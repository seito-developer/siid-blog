[{"id":"e629fa6598","publishedAt":"2024-01-17T01:08:30.000Z","title":"PythonでExcelを自在に操るための４つの方法","contents":"<p>本記事ではPythonとExcelのそれぞれの長所を活用したいという願望を実現する４つのPythonライブラリを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PythonからExcelを操作するためのライブラリ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>PythonでExcelファイルを扱うには、いくつかのライブラリが利用可能です。主に使われるライブラリには以下のようなものがあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Pandas</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Excelファイルの読み込みや書き込みに広く使われています。データ分析やデータ処理に非常に強力です。<code>read_excel()</code> でExcelファイルを読み込み、<code>to_excel()</code> でExcelファイルを書き出すことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>OpenPyXL</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Excelファイル（特に<code>.xlsx</code>ファイル）を読み書きするためのライブラリです。セルの書式設定や図表の挿入など、細かい操作が可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>xlrd/xlwt</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><code>xlrd</code> はExcelファイルを読むため、<code>xlwt</code> は新しいExcelファイルを作成するために使われます。ただし、これらは主に古い<code>.xls</code>フォーマットに対応しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>XlsxWriter</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Excelファイルの作成に特化したライブラリで、豊富な書式設定やチャート作成の機能があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">具体的な使用例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>これらのライブラリを使用するためには、まずPythonにインストールする必要があります。例えば、Pandasをインストールするには以下のコマンドを使います：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">pip install pandas</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ライブラリのインストールが完了しました。次に、それぞれのライブラリ（Pandas、OpenPyXL、xlrd、XlsxWriter）を使用してExcelファイルを読み込み、基本的な処理を行うサンプルコードを示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Pandasを使用したサンプル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pandasはデータフレームを使用してExcelデータを簡単に扱えます。以下の例では、Excelファイルを読み込み、最初の5行を表示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# Excelファイルの読み込み\ndf = pd.read_excel('example.xlsx')\n\n# データフレームの最初の5行を表示\nprint(df.head())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. OpenPyXLを使用したサンプル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>OpenPyXLは<code>.xlsx</code>ファイルの読み書きに特化しています。以下の例では、Excelファイルを読み込み、最初のシートの最初のセルの値を表示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook\n\n# Excelファイルの読み込み\nwb = load_workbook('example.xlsx')\nsheet = wb.active\n\n# 最初のシートの最初のセルの値を表示\nprint(sheet['A1'].value)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. xlrdを使用したサンプル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>xlrdは主に古い<code>.xls</code>ファイルの読み込みに使われますが、<code>.xlsx</code>ファイルもサポートしています。以下の例では、Excelファイルを読み込み、最初のシートの最初のセルの値を表示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import xlrd\n\n# Excelファイルの読み込み\nbook = xlrd.open_workbook('example.xlsx')\nsheet = book.sheet_by_index(0)\n\n# 最初のシートの最初のセルの値を表示\nprint(sheet.cell_value(0, 0))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. XlsxWriterを使用したサンプル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>XlsxWriterはExcelファイルの作成に使用されます。既存のファイルを読み込むことはできませんが、新しいファイルを作成してデータを書き込むことができます。以下の例では、新しいExcelファイルを作成し、いくつかのデータを書き込みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import xlsxwriter\n\n# 新しいExcelファイルの作成\nworkbook = xlsxwriter.Workbook('new_example.xlsx')\nworksheet = workbook.add_worksheet()\n\n# データの書き込み\ndata = ['This is a sample', 'Hello, World!', 123]\nfor row_num, value in enumerate(data):\n    worksheet.write(row_num, 0, value)\n\n# ファイルを保存して閉じる\nworkbook.close()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これらのコードは実際のファイルパスに合わせて適宜調整する必要があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>さらに詳しい情報は公式のドキュメントを参照してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><a href=\"https://pandas.pydata.org/docs/user_guide/index.html#user-guide\">Pandas ドキュメント</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://openpyxl.readthedocs.io/en/stable/\">OpenPyXl ドキュメント</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://xlrd.readthedocs.io/en/latest/\">xlrd ドキュメント</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://xlsxwriter.readthedocs.io/\">XlsxWriter ドキュメント</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/17bfcab9f22740fd86cf93ab1570d6da/image-3.webp","categories":["faba1e00af","11a4a60b51"],"tags":["faba1e00af","11a4a60b51"]},{"id":"86e5014965","publishedAt":"2024-01-19T22:27:40.000Z","title":"Pythonにおける配列の扱い方","contents":"<p>Pythonでの「配列」という用語は、しばしば混乱を招くことがあります。Pythonにはいくつかの配列に関するデータ構造があり、それぞれ異なる用途に適しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pythonにおける４つの配列の種類</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>リスト (List)</strong>: Pythonで最も一般的な配列型のデータ構造です。リストは異なるデータ型の要素を格納でき、変更可能（mutable）です。要素の追加、削除、変更が容易にできます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>タプル (Tuple)</strong>: タプルも配列型のデータ構造ですが、リストとは異なり変更不可能（immutable）です。つまり、作成後にその内容を変更することはできません。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>配列モジュール (array module)</strong>: Pythonの標準ライブラリに含まれる<code>array</code>モジュールは、リストに似ていますが、すべての要素が同じデータ型でなければならないという制限があります。これはメモリ効率が良く、大量の数値データを扱う場合に便利です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>NumPy 配列 (NumPy Array)</strong>: 科学計算に特化した外部ライブラリNumPyに含まれる配列型です。これもすべての要素が同じデータ型でなければならず、効率的な数値計算に適しています。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">リストの基本的な扱い方</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>リストはPythonで最も一般的に使用される配列型です。以下にリストの基本的な操作を示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">リストの作成</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>my_list = [1, 2, 3]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">要素の追加</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>my_list.append(4)  # リストの末尾に4を追加</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">要素の削除</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>del my_list[0]  # 最初の要素を削除</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">要素へのアクセス</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>first_element = my_list[0]  # 最初の要素にアクセス</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">リストの長さの取得</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>length = len(my_list)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>リストは非常に柔軟で、さまざまなデータ型の要素を含むことができます（数値、文字列、さらに他のリストも含めることができます）。また、リスト内包表記を使用して、コードを簡潔に記述することもできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>もちろんです。それぞれのデータ構造について基本的な使用方法を例と共に説明します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">タプル (Tuple)</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>タプルは変更不可能（immutable）なデータ構造です。一度作成すると、その要素を変更することはできません。タプルは、異なる型のデータをグループ化するのに便利です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">タプルの作成</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>my_tuple = (1, \"apple\", 3.14)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">タプルの要素へのアクセス</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>item = my_tuple[1]  # \"apple\"を取得</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>タプルはリストよりもメモリ効率が良く、変更されないデータを扱う際によく使用されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">配列モジュール (array module)</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>array</code>モジュールは、すべての要素が同じ型である必要がある点を除けば、リストに似ています。これは数値データの集合を効率的に扱うために使用されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">配列の作成と操作</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>from array import array\n\nmy_array = array('i', [1, 2, 3, 4])  # 整数型の配列\nmy_array.append(5)  # 5を追加\nmy_array.remove(2)  # 値2を削除</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">NumPy配列 (NumPy Array)</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>NumPy配列は、科学計算用の外部ライブラリNumPyの一部です。これらの配列は、大量の数値データを効率的に扱うために最適化されています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">NumPy配列の作成と操作</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずNumPyをインストールして、インポートします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import numpy as np\n\nmy_numpy_array = np.array([1, 2, 3, 4])  # NumPy配列の作成\nmy_numpy_array = np.append(my_numpy_array, 5)  # 5を追加</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>NumPy配列は、ベクトル化された操作、ブロードキャスティング、多次元配列操作など、高度な数学的操作に対応しています。これらの特徴は、特に科学計算やデータ分析において非常に有用です。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9b0a92446e424ddda7afaf66658cf42e/image-4.webp","categories":["11a4a60b51"]},{"id":"31489056e0","publishedAt":"2024-03-22T20:25:37.000Z","title":"Google Apps ScriptでGoogle スプレッドシートを操る方法【業務自動化】","contents":"<p><br>本記事では、<a href=\"https://workspace.google.co.jp/intl/ja/products/apps-script/\">Google Apps Script</a>を活用してGoogle スプレッドシートの機能拡張を行い、日常業務の自動化及び効率化に寄与する方法を探求します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Google スプレッドシートは多くの人や組織にとって重要なデータ管理ツールであり、業務を自動化することで生産性を増大させることができます。Google Apps Script（GAS）では様々なGoogleのサービスを自動化することができますが、ここではGoogle スプレッドシートを自動化するための最初のステップを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>今回は、一枚目のシートに入力されている数字を合計し、ログに出力するスクリプトを通して自動化への第一歩へ進みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">スプレッドシートとGoogle Apps Scriptの連携</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まず、googleスプレッドシートを開き、セルに適当な数字を入力し、タブの<strong>「拡張機能」</strong>をクリックしましょう。さらに「Apps Script」を選択します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":51,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/da241cef2d8f4193a32978b6da2b606a/image-2-1024x712.webp\" alt=\"googleスプレッドシートとGoogle Apps Scriptの連携\" class=\"wp-image-51\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>すると、次の画像のようにプログラミングコードを入力する画面が出現します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":50,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3b2d7c70302f4d01919a0e2eadf8741f/image-3-1024x235.webp\" alt=\"Google Apps Script\" class=\"wp-image-50\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Google Apps Script を書いてみる</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Google Apps ScriptはJavaScriptを用いて書きます。まずは、動作しているかどうかを確認するコードを書いてみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code {\"lineNumbers\":true} -->\n<pre title=\"google apps script \" class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript line-numbers\">function readSpreadsheetData() {\n  //'シート１'を取得\n  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('シート1');\n  //データがある範囲を取得\n  const range = sheet.getDataRange();\n　　　//データの値を取得\n  const values = range.getValues();\n  \n  console.log(values);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これは、'シート１'のデータを全て取得してログに出力するコードです。「保存」ボタンをクリックし「実行」してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":55,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/28b566c20a82493db358b44d5fc9fc9a/image-4-1024x342.webp\" alt=\"google apps scriptにコードを入力\" class=\"wp-image-55\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Apps Scriptへのアクセス権限付与</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>初めて実行する時、Apps Scriptがスプレッドシートへアクセスする権限を付与しなければなりません。「実行」をおすと次のようなダイアログが立ち上がると思います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":56,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/21ef6677cf7243faba747dbff3bc53d5/image-5-1024x357.webp\" alt=\"Apps Scriptへのアクセス権限付与\" class=\"wp-image-56\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>「権限を確認」をクリックし、許可してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>次のようなエラー「このアプリはGoogleで確認されていません」が出た場合は、「詳細を表示」をクリックし、左下のリンクをクリックします。<br>その後、「許可」を押してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":57,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e47577a22b664af29b168bf6d40057a8/image-6-1024x731.webp\" alt=\"エラー「このアプリはGoogleで確認されていません」\" class=\"wp-image-57\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>順調に進むと、コードが実行されます。データを入力した範囲のデータが全て取得され、ログに出力されていることを確認してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":58,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/0c3c824e8cbd4812a069355b3df81133/image-7-1024x615.webp\" alt=\"Google Apps Scriptの実行結果\" class=\"wp-image-58\"></figure>\n<!-- /wp:image -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/1d0f988a1cda42df8b1314a8b6c2c950/image-8.webp","categories":["2fe840e132"],"tags":["2fe840e132","55a2af0997"]},{"id":"d029fa3a95","publishedAt":"2024-03-24T14:21:38.000Z","title":"Google Apps Script【GAS】によるGoogleフォームの扱い方入門","contents":"<p>本記事では、<a href=\"https://workspace.google.co.jp/intl/ja/products/apps-script/\">Google Apps Script</a>を活用してGoogle フォームの機能拡張を行い、日常業務の自動化及び効率化に寄与する方法を探求します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Google フォームは多くの人や組織にとって重要なデータ管理ツールであり、アンケート、試験、申請など多岐に渡り用いられています。Google Apps Script（GAS）では様々なGoogleのサービスを自動化することができますが、ここではGoogle フォームに対してどのような拡張を行えるのかを見ていきます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>今回は、チュートリアルとして、アンケートの回答に特定のキーワドが検出された場合にメール通知が行われるGASを書いてみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Google Apps Script (GAS)とGoogleフォームで何ができるのか</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>GASとGoogleフォームを組み合わせることで、どのようなことがオートメーションできるのでしょうか？次にいくつかの例を挙げてみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Google フォームと Google Apps Script (GAS) を組み合わせることで、多種多様なオートメーションを実現できます。以下に、いくつかのアイディアを示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 自動回答確認メールの送信</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>フォームの回答があった際に、回答者に自動で確認メールを送信します。カスタマイズ可能な内容で、フォーム回答の概要や、次のステップに関する情報を含めることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. 回答内容に基づく自動アラート</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>特定のキーワードや条件にマッチする回答があった場合に、自動で担当者にメールや Slack 通知を送る機能を作れます。例えば、サービスに関する重要なフィードバックや、サポートが必要な問い合わせを即時に察知します。本記事では、これに関するチュートリアルを行います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. スプレッドシートへの自動データ整理・集計</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>回答データをスプレッドシートに自動転送し、集計やグラフ化を自動化します。回答データに基づいてダッシュボードを自動更新することで、リアルタイムでの分析ができるようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. 予約システム</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>イベントや会議の予約フォームとして利用し、日時や参加人数に基づいて自動でカレンダーに予約を追加したり、満席時には自動で回答をクローズしたりする機能を実装します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. テスト・クイズの自動化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Googleフォームによる回答を即座に採点し、結果を回答者に自動でフィードバックすることができます。さらに、成績を集計して講師に報告する機能も追加できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. ワークフローの自動化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>例えば、採用プロセスにおいて、応募者からの情報収集にフォームを使用し、応募データに基づいて自動で次の選考ステップへと進むようなワークフローを自動化できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. カスタマイズされたレポートの生成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>フォーム回答を収集し、特定のフォーマットやテンプレートに基づいてレポートを自動生成します。これにより、定期的なレポート作成の手間を省きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. フィードバックループの自動化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>顧客からのフィードバックを収集し、その内容に基づいて自動で改善アクションを計画するプロセスを設定します。重要なフィードバックには自動でフォローアップし、顧客満足度の向上を目指します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">【チュートリアル】回答内容に基づく自動アラートを作ってみる</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからは、実際にGASを使ってGoogleフォームの回答内容に基づく自動通知設定を作ってみます。回答文章に「米津玄師」という文言が含まれていた場合に自動でメール通知が行われるようなシステムを作ります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ1: Googleフォームの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは<a href=\"https://support.google.com/a/users/answer/9303071?hl=ja\">Google フォームを作成</a>し、質問を設定します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":64,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/38368bc4a4114c11ab96ebd8729dac12/image-9-1024x428.webp\" alt=\"googleフォームの作成\n\" class=\"wp-image-64\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>次に、フォームの回答を格納するために、Google スプレッドシートを関連付けます。フォームの「回答」タブから「スプレッドシートで表示」を選択します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":65,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f8ddee2599d34e6f8f3efb4c61e17bf3/image-10-1024x231.webp\" alt=\"googleフォームの設定\" class=\"wp-image-65\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ 2: スクリプト エディタの開始</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Google スプレッドシートで、<code>拡張機能</code> → <code>Apps Script</code> を選択します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":66,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/dd19bb50007d44408f45140187ac492b/image-11-1024x383.webp\" alt=\"Google Apps Scriptの作成\" class=\"wp-image-66\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>すると新しいスクリプト プロジェクトが開きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":50,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3b2d7c70302f4d01919a0e2eadf8741f/image-3-1024x235.webp\" alt=\"Apps Scripts\" class=\"wp-image-50\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ 3: 通知スクリプトの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下のスクリプトをスクリプト エディタにコピペしてください。このスクリプトは、フォームからの新しい回答がスプレッドシートに追加されるたびにトリガーされ、特定のキーワードを含む回答を検出した場合に、指定したメールアドレスに通知を送信します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code {\"lineNumbers\":true} -->\n<pre title=\"google form automation\" class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript line-numbers\">function setupTrigger() {\n  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();\n  ScriptApp.newTrigger('checkForKeywords')\n           .forSpreadsheet(spreadsheet)\n           .onFormSubmit()\n           .create();\n}\n\nfunction checkForKeywords(e) {\n  var responses = e.values;\n  var keyword = '米津玄師';\n  var found = responses.toString().indexOf(keyword) !== -1;\n\n  if (found) {\n    sendNotification(responses);\n  }\n}\n\nfunction sendNotification(responses) {\n  var email = 'your-email@example.com'; // 通知を受け取るメールアドレス\n  var subject = '【重要】キーワード検出通知';\n  var message = 'フォームの回答で指定されたキーワードが検出されました。\\n\\n' +\n                '回答内容: ' + responses.join(', ');\n\n  MailApp.sendEmail(email, subject, message);\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ 4: スクリプトの実行とトリガーの設定</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>スクリプト エディタで、<code>setupTrigger</code> 関数を選択し、保存、実行ボタンを順にクリックします。これにより、フォームの回答がスプレッドシートに送信されたときにスクリプトが実行されるように設定されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":67,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/da4785a5b2f446ecb5675a811bd12f3f/image-12-1024x609.webp\" alt=\"Google Apps Scriptの実行\" class=\"wp-image-67\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>スクリプトの実行には、Google アカウントによる認証が必要になります。その方法については<a href=\"https://2jigenha.com/2024/03/23/google-apps-script-spreadsheet/\">こちらの記事で解説</a>しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>また、スクリプトはサンプルです。実際に使用する際は、<code>your-email@example.com</code> を実際に通知を受け取りたいメールアドレスに置き換えてください。これで、Google フォームの回答に「米津玄師」というキーワードが含まれていた場合に、自動的にメール通知が送信されるようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>実際に自分で「米津玄師」というキーワードを使った文章を回答してみると、メールに通知が来ました。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":69,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/88031db491de444c9dfad5e2b3f48952/image-13-1-1024x332.webp\" alt=\"Googleフォームの送信\" class=\"wp-image-69\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":70,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b7ea0fdd8ed24b45b815c6ad830e35dd/image-14.webp\" alt=\"Google Apps Scriptによる自動検出\" class=\"wp-image-70\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>これをきっかけに、さらに高度で実用的なGASを作ってみてください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9a324193d1984dbcadd52600f31cd78d/image-15.webp","categories":["2fe840e132"],"tags":["2fe840e132","2cb1ce1b9b"]},{"id":"96061e92f5","publishedAt":"2024-03-24T23:01:10.000Z","title":"Google Apps Scriptでスプレッドシートのシートとセルを取得する関数一覧","contents":"<p>Google Apps Script（GAS）を使用すると、Google スプレッドシートのデータを操作できます。ここでは、シートとセルを取得するための関数の一覧で表し、簡単な解説を添えました。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">シートを取得する関数</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":75,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/59426ab599f042cd95164b48b0784124/image-1.jpg\" alt=\"スプレッドシート：シートを取得する関数\" class=\"wp-image-75\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>getActiveSpreadsheet()</strong><br>現在アクティブなスプレッドシート全体を取得します。<br>例: <code>var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>getActiveSheet()</strong><br>アクティブなスプレッドシートの中で現在選択されているシートを取得します。<br>例: <code>var sheet = spreadsheetgetActiveSheet();</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>getSheetByName(name)</strong><br>指定した名前のシートを取得します。存在しない場合はnullを返します。<br>例: <code>var sheet = spreadsheet.getSheetByName(\"Sheet1\");</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>getSheets()</strong><br>スプレッドシート内の全シートを配列として取得します。<br>例: <code>var sheets = spreadsheet.getSheets();</code></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">セルを取得する関数</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":76,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5d8eafa9af644914b512f27511e7b975/image-2.jpg\" alt=\"スプレッドシート：セルを取得する関数\" class=\"wp-image-76\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>getRange(a1Notation)</strong><br>A1表記法を使用して、シート上の特定の範囲を取得します。<br>例: <code>var range = sheet.getRange(\"A1:B2\");</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>getRange(row, column)</strong><br>指定した行と列のセルを取得します。<br>例: <code>var cell = sheet.getRange(1, 1);</code> // 1行1列目</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>getRange(row, column, numRows)</strong><br>指定した行と列から始まる、指定された数の行を含む範囲を取得します。<br>例: <code>var range = sheet.getRange(1, 1, 2);</code> // 1行1列目から2行分</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>getRange(row, column, numRows, numColumns)</strong><br>指定した行と列から始まり、指定された数の行と列を含む範囲を取得します。<br>例: <code>var range = sheet.getRange(1, 1, 2, 3);</code> // 1行1列目から2行3列分</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>getDataRange()</strong><br>シートにデータが入っている範囲全体を取得します。これは、最初の行と列から始まり、最後の行と列までの範囲です。<br>例: <code>var range = sheet.getDataRange();</code></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>これらの関数は、Google Apps Scriptを使用してGoogleスプレッドシートを操作する際の基本的なツールです。シートやセルの選択からデータの読み書きまで、これらの関数を組み合わせることで幅広い操作が可能になります。特に<code>getRange</code>関数は、A1表記法や行列指定など多様な方法でセル範囲を指定できるため、非常に柔軟なデータ操作を実現できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データ取得のスクリプトの使用例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":74,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8b6fcbb64f704e8bbba0c7741b1f4bfa/image.jpg\" alt=\"google app script スプレッドシートの値を取得\" class=\"wp-image-74\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>それでは、「getRange()」と「getDataRange()」の2つの関数を使用した簡単なチュートリアルを行います。基本的なGASの実行方法については<a href=\"https://2jigenha.com/2024/03/23/google-apps-script-spreadsheet/\">こちらの記事を参照</a>してください。このチュートリアルでは、Googleスプレッドシートからデータを読み取り、そのデータを加工して、新しい範囲に書き込みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>スプレッドシートから特定の範囲のデータを読み取る。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>読み取ったデータに何らかの操作を行う（例：各セルの値に2を乗算）。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>加工したデータを新しい範囲に書き込む。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ1: スプレッドシートの準備</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Googleスプレッドシートを開き、任意のデータを入力してください。例えば、A1からC3の範囲に数値を入力します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ2: スクリプトエディタの開始</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>スプレッドシートの画面から「拡張機能」&gt;「Apps Script」を選択してスクリプトエディタを開きます。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ3: データの読み取りと加工</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下のスクリプトをスクリプトエディタにコピー＆ペーストします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function processData() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n\n  // 特定の範囲のデータを読み取る\n  var range = sheet.getRange(\"A1:C3\");\n  var values = range.getValues();\n\n  // データの加工（各セルの値に2を乗算）\n  var processedValues = values.map(row =&gt; row.map(cell =&gt; cell * 2));\n\n  // 加工したデータを新しい範囲に書き込む（例：E1からG3）\n  var newRange = sheet.getRange(\"E1:G3\");\n  newRange.setValues(processedValues);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ4: スクリプトの実行</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>スクリプトエディタ上で「processData」関数を選択し、「実行」ボタンをクリックします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>実行には認証が必要になりますので、画面の指示に従って認証を完了してください。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ5: 結果の確認</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>スプレッドシートに戻り、E1からG3の範囲を確認します。元のデータが2倍になっているはずです。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/205de018e99a4d549db433a4d25dede0/image-3.jpg","categories":["2fe840e132"],"tags":["2fe840e132","55a2af0997"]},{"id":"48449a14a4","publishedAt":"2024-03-25T04:31:49.000Z","title":"【Google】スプレッドシートからカレンダーにGASで自動的にイベントを組み込む方法","contents":"<p>Google Apps Script (GAS) を使用して Googleスプレッドシートのデータを基に Google カレンダーにイベントを追加する一連の手順を紹介します。あらかじめスプレッドシートにはイベントのタイトル、開始日時、終了日時がリストされているとします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ステップ 1: スプレッドシートの準備</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Google スプレッドシートを開き、3列（タイトル、開始日時、終了日時）を用意します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>各行にイベントのデータを入力します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":81,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9485d0774373425faabdcfd2f8fd781d/image-16-1024x411.webp\" alt=\"google spread sheetのgoogle カレンダー用の設定\" class=\"wp-image-81\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ステップ 2: Google Apps Script の作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>スプレッドシートのメニューから「拡張機能」&gt;「Apps Script」を選択します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>下記のスクリプトをコピーして Apps Script のエディタに貼り付けます。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>このプロセスの詳細は、<a href=\"https://2jigenha.com/google-apps-script-spreadsheet/\">こちらのページ</a>を確認してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">// 関数 `addEventsToCalendar` の定義を開始\nfunction addEventsToCalendar() {\n  // 現在アクティブなスプレッドシートを取得し、そのアクティブなシートを変数 `sheet` に格納\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  // シート内のすべてのデータ範囲を取得し、その値（2次元配列）を `rows` に格納\n  var rows = sheet.getDataRange().getValues();\n  // デフォルトのカレンダーを取得し、変数 `calendar` に格納\n  var calendar = CalendarApp.getDefaultCalendar();\n\n  // ループを開始。1行目はヘッダー行として扱うため、2行目から処理を開始（i = 1）\n  for (var i = 1; i &lt; rows.length; i++) {\n    // 現在の行のデータを `row` に格納\n    var row = rows[i];\n    // 行の最初の要素（0番目の列）をイベントのタイトルとして取得\n    var title = row[0];\n    // 行の2番目の要素（1番目の列）を開始日時として取得し、Date オブジェクトに変換\n    var startTime = new Date(row[1]);\n    // 行の3番目の要素（2番目の列）を終了日時として取得し、Date オブジェクトに変換\n    var endTime = new Date(row[2]);\n    // 取得したタイトル、開始日時、終了日時を使用して、カレンダーに新しいイベントを作成\n    calendar.createEvent(title, startTime, endTime);\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":82,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/756450d0d066407dbb71551a20c5f672/image-17-1024x484.webp\" alt=\"google spread sheetとgoogle apps scriptの連携\" class=\"wp-image-82\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ 3: スクリプトの実行</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Apps Script のエディタで「実行」ボタンをクリックし、<code>addEventsToCalendar</code> 関数を選択します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>初めてスクリプトを実行する場合は、Google による認証が必要になります。画面の指示に従って認証を完了させてください。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>このスクリプトを実行すると、次のようにGoogleカレンダーに、スプレッドシートに書いた予定が反映されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":83,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/512147d17cd94e3fb0b963e5899667ea/image-18-1024x616.webp\" alt=\"google カレンダー\" class=\"wp-image-83\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">主な Google カレンダー操作関数</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下に列挙するGoogleカレンダーの操作関数を使えば、さらに高度なプログラムを作ることができるので、参考までに。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>イベントの追加</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>createEvent(title, startTime, endTime, options)</code><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>イベントをカレンダーに追加します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>title</code> はイベントのタイトル、<code>startTime</code> と <code>endTime</code> は <code>Date</code> オブジェクトで、イベントの開始と終了時刻を指定します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>options</code> は任意のパラメータを含むオブジェクトで、場所や説明などを設定できます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>イベントの検索</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>getEvents(startTime, endTime)</code><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>指定した期間内のイベントを取得します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>startTime</code> と <code>endTime</code> は <code>Date</code> オブジェクトで、検索する期間の開始と終了時刻を指定します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>イベントの更新</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>GAS は直接「イベントを更新する」関数を提供していませんが、<code>getEvents</code> で取得したイベントオブジェクトを通じて、<code>setTitle</code>、<code>setTime</code>、<code>setDescription</code> などのメソッドを使用してイベントの詳細を更新できます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>イベントの削除</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>イベントオブジェクトには <code>deleteEvent</code> メソッドがあり、これを使用してイベントを削除できます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/be34fed364ac49b7bb7e6b3a6dd7f47f/image-19.webp","categories":["2fe840e132"],"tags":["2fe840e132","627e7e96e6","55a2af0997"]},{"id":"8b940be7fb","publishedAt":"2024-03-25T18:45:58.000Z","title":"GASを使ってGoogleスプレッドシートを検索する方法","contents":"<p>Google Apps Script (GAS)を使えば様々なGoogleのサービスを自動化することができます。スプレッドシート上のデータを元に何かを処理したい場合、まずは条件に一致したデータを取得する必要があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>本記事では、GASを使ってGoogleスプレッドシート上のデータを検索する方法を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">スプレッドシート検索の手順</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>全体的な流れとしては、以下のようになると思います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Apps Script (GAS) とGoogleスプレッドシートの連携</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>スプレッドシート・データ範囲の取得</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>条件に一致するものを検索</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>GASとスプレッドシートの連携に関しては、<a href=\"https://2jigenha.com/google-apps-script-spreadsheet/\">こちらの記事</a>をご参照ください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">スプレッドシート・データ範囲の取得</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>検索をする前に、まずはデータを取得する必要があります。以下に、そのための基本的な関数を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">//GoogleスプレッドシートをIDで取得\nvar spreadsheet = SpreadsheetApp.openById('スプレッドシートのID');\n//Googleスプレッドシートをシート名で取得\nvar sheet = spreadsheet.getSheetByName('シート名');\n\n//Googleスプレッドシートのセル範囲を取得\nvar range = sheet.getDataRange();\n//Googleスプレッドシートのセル範囲のデータを取得\nvar values = range.getValues();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>データ取得方法のさらに詳しい方法は、<a href=\"https://2jigenha.com/gas_spreadsheet_get/\">こちらのページ</a>をご覧ください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">条件に一致するものを検索</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>最もシンプルな方法は、取得したデータをループで一つ一つ取り出し、条件に合致したものを探すという手法です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">for (var i = 0; i &lt; values.length; i++) {\n  for (var j = 0; j &lt; values[i].length; j++) {\n    if (values[i][j] == '検索条件') {\n　　　　　　　　　　　　//以下に、'検索条件'が見つかった場合の処理を記述。例えば、検索条件の値をログに主力\n      Logger.log('見つかった値: ' + values[i][j]);\n　　　　　　　　　　　　//検索条件の行と列の番号を取得\n      Logger.log('行: ' + (i+1) + ', 列: ' + (j+1));\n    }\n  }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>また、SQLに似たクエリ言語がサポートされているので、以下のようにQUERY関数を用いて検索を行うこともできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">var queryString = '=QUERY(A1:C10, \"select * where B = \\'条件\\'\", 1)';\nsheet.getRange('E1').setFormula(queryString);</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>さらに、JavaScriptで正規表現を扱うためのオブジェクト、RegExp()を用いた検索方法もご紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">var regex = new RegExp('検索パターン');\nfor (var i = 0; i &lt; values.length; i++) {\n  if (regex.test(values[i][0])) { // 例として1列目の値に対して検証\n    Logger.log('見つかった行: ' + (i+1));\n  }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9ddb30ecec99418aaf19a3944394504c/image-4.jpg","categories":["2fe840e132"],"tags":["2fe840e132","55a2af0997"]},{"id":"d6d824abba","publishedAt":"2024-03-25T21:31:49.000Z","title":"Googleスプレッド シートで「スクリプトエディタ」が出 てこない時の対処法","contents":"<p>2021年の11月の変更により、Googleスプレッドシートから「スクリプトエディタ」へアクセスする方法が変わりました。以前は、上のタブから「ツール」→「スクリプトエディタ」と辿るとApps Scriptの編集画面にアクセスできました。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">スプレッドシートからApps Scriptへアクセスする</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>変更後は、上部のタブの「拡張機能」から「Apps Script」へアクセスすれば、以前のようにスクリプトエディタが開くようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":49,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a2e22327a0704cd593a28c6d6180b326/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-23-13.35.46-1024x712.png\" alt=\"Googleスプレッドシート Apps Script\" class=\"wp-image-49\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>上の画像の「Apps Script」をクリックすると、次の画像のようにスクリプトエディタが開きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":50,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3b2d7c70302f4d01919a0e2eadf8741f/image-3-1024x235.webp\" alt=\"Apps Scripts\" class=\"wp-image-50\"></figure>\n<!-- /wp:image -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5686538f375d40f48bab0fca60d19251/image-20.webp","categories":["2fe840e132"],"tags":["2fe840e132","55a2af0997"]},{"id":"ad57366865","publishedAt":"2024-03-25T22:52:53.000Z","title":"初心者でも書ける面白いPythonコード","contents":"<p>Pythonと聞けば何を思い浮かべますか？まず出てくるのは機械学習やAIでしょう。それらに加えて、多くの大規模ウェブアプリケーション作りにも使われたりしています。YoutubeとかSpotyfyは実はPythonで作られていたりします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>そんなPythonを今から学びたい初心者の方に向けて、簡単だけど面白く、強力なツールであることを実感できるコードを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">簡単で面白いウェブスクレイピング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ウェブスクレイピングとはウェブ上にあるデータを機械的に収集することです。Pythonによるウェブスクレイピングのコードは初心者でも簡単に書ける割には、様々なことへ応用できる強力な代物です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ここでは、某ニュースサイトのトップ記事を収集し、コメントが200件以上ついている記事のヘッドラインを表示するコードを書いてみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import requests\nfrom bs4 import BeautifulSoup\n\n# 某ニュースサイトのURL\nurl = 'https://www.yahoo.co.jp/'\n\n# リクエストを送信してHTMLコンテンツを取得\nresponse = requests.get(url)\nresponse.encoding = response.apparent_encoding  # 文字化け防止\n\n# BeautifulSoupオブジェクトを作成\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# 特定の記事を含む&lt;article&gt;タグを探す\narticles = soup.find_all('article', class_='QLtbNZwO-lssuRUcWewbd')\n\nfor article in articles:\n    a_tag = article.find('a')\n    if a_tag:\n        # 記事のタイトルを取得\n        title = a_tag.find('h1').text.strip()\n        print(title)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>さて、以上のコードを実行すると次のようにヘッドラインを抽出することができます。まずはコピペで動作確認してみてください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":101,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3dfe765550b440739ebcf1f8d550876e/image-21-1024x520.webp\" alt=\"Pythonでできる面白いコード\" class=\"wp-image-101\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>ここからは、このコードを解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 必要なライブラリのインポート</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import requests\nfrom bs4 import BeautifulSoup</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>requests</code>: ウェブページの内容を取得するために使用します。このライブラリを使って、指定したURLのHTMLデータをダウンロードできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>BeautifulSoup</code>: 取得したHTMLデータを解析し、必要な情報を抽出するために使用します。<a href=\"https://job-support.ne.jp/blog/html/basic-structure\">HTMLの構造</a>を理解しやすい形に変換して、タグやクラスに基づいて特定の要素を簡単に見つけることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>まだインポートしていなかったら、pipコマンドでインストールしてください。(<a href=\"https://2jigenha.com/pip-install/\">詳しくはこちら</a>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. URLの定義</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">url = 'https://www.yahoo.co.jp/'</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>スクレイピングの対象となるYahooニュースのトップページのURLを指定します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. リクエストの送信とHTMLコンテンツの取得</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">response = requests.get(url)\nresponse.encoding = response.apparent_encoding  # 文字化け防止</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>requests.get(url)</code>: 指定したURLにHTTP GETリクエストを送信し、そのレスポンスを<code>response</code>変数に格納します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>response.encoding = response.apparent_encoding</code>: レスポンスの文字コードを、レスポンスから自動的に推測したもの（<code>apparent_encoding</code>）に設定します。これにより、日本語などの特定の文字が文字化けすることを防ぎます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. BeautifulSoupオブジェクトの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">soup = BeautifulSoup(response.text, 'html.parser')</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>BeautifulSoup(response.text, 'html.parser')</code>: 取得したHTMLテキスト（<code>response.text</code>）からBeautifulSoupオブジェクトを作成します。このオブジェクトを通じて、HTMLの解析や情報の抽出が行えます。第二引数の<code>'html.parser'</code>は、HTMLを解析するために使用するパーサーを指定しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. 記事の探索とタイトルの表示</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">articles = soup.find_all('article', class_='QLtbNZwO-lssuRUcWewbd')\n\nfor article in articles:\n    a_tag = article.find('a')\n    if a_tag:\n        title = a_tag.find('h1').text.strip()\n        print(title)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>soup.find_all('article', class_='QLtbNZwO-lssuRUcWewbd')</code>: HTMLから特定のクラス属性を持つ<code>&lt;article&gt;</code>タグを全て見つけ、そのリストを<code>articles</code>に格納します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for article in articles</code>: 取得した各<code>&lt;article&gt;</code>タグに対してループ処理を行います。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>a_tag = article.find('a')</code>: 各<code>&lt;article&gt;</code>タグの中から最初の<code>&lt;a&gt;</code>タグを探します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>if a_tag:</code>: <code>&lt;a&gt;</code>タグが見つかった場合にのみ、次の処理を行います。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>title = a_tag.find('h1').text.strip()</code>: <code>&lt;a&gt;</code>タグ内の最初の<code>&lt;h1&gt;</code>タグのテキスト（ニュースのタイトル）を取得し、先頭と末尾の余計な空白を削除します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>print(title)</code>: 取得したタイトルを出力します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>このコードにより、某ニュースサイトのトップページに表示されるニュースのタイトルがコンソールに列挙されます。ウェブページの構造が変わると、セレクタや取得方法を更新する必要がありますので、注意してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>いかがでしたか？これで、シンプルなPythonコードで、データ収集を自動的に行うことができました。Pythonの面白さを体験していただけていたら嬉しいです。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b11fd07b59f844a69f5d712cdb09ac51/image-23.webp","categories":["11a4a60b51"],"tags":["11a4a60b51","ba29ed493c"]},{"id":"37834f2f25","publishedAt":"2024-03-25T22:44:32.000Z","title":"pipを使ってPythonライブラリをインストールする方法","contents":"<p>Pythonのライブラリは、Pythonの機能を拡張するためのコードの集合体です。これらのライブラリをインストールすることで、データ分析、ウェブスクレイピング、データベース操作など、多岐にわたる作業を簡単に行うことができます。<br>Pythonには<code>pip</code>というパッケージ管理システムが付属しており、これを使って非常に簡単にライブラリをインストールできます。ここでは、<code>pip</code>を使用したPythonライブラリのインストール方法について、わかりやすく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">前提条件</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonが既に使用されているにインストールされていることを確認してください。Pythonのバージョンを確認するには、ターミナルまたはコマンドプロンプトで以下のコマンドを実行します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">python --version</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>または</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">python3 --version</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonがインストールされていれば、バージョン番号が表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">pipの確認とアップグレード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>pip</code>はPythonのパッケージ管理ツールなので、大抵の場合はPythonと共に自動的にインストールされます。念の為<code>pip</code>がインストールされているか確認しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip --version</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>最新バージョンにアップグレードするには、以下のコマンドを実行します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install --upgrade pip</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ライブラリのインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>pip</code>を使用してPythonライブラリをインストールするには、以下のコマンドを実行します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install ライブラリ名</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>たとえば、データ分析に広く使用される<code>pandas</code>ライブラリをインストールするには、次のように入力します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install pandas</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">特定のバージョンのライブラリをインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ライブラリの特定のバージョンをインストールする必要がある場合は、以下の形式を使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install ライブラリ名==バージョン番号</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>例えば、<code>pandas</code>のバージョン<code>1.1.5</code>をインストールするには、次のように入力します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install pandas==1.1.5</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">インストール済みのライブラリのリスト表示とアンインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>システムにインストール済みのライブラリ一覧を表示するには、次のコマンドを実行します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip list</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>不要になったライブラリをアンインストールするには、以下のコマンドを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip uninstall ライブラリ名</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>pip</code>を使えばPythonライブラリのインストール、アップグレード、アンインストールが簡単に行えます。これであなたもPythonの強力なエコシステムをフル活用して、あらゆる種類のプロジェクトに取り組むことができます。常に<code>pip</code>とPythonを最新の状態に保ち、セキュリティや互換性の問題を避けるようにしましょう。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/aa04fcc7c7b04207bde9c2b18a58f5a0/image-22.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"b1556dea32","publishedAt":"2024-03-27T15:42:34.000Z","title":"【Python】顔認識ライブラリ face_recognition の使い方","contents":"<p>わずか数行のコードを書くだけで顔認識のプログラムコードを書ける「face_recognition」。本記事では、顔の映った画像から顔の部分にマーキングするプログラムを書くことを通して、この有用なPythonライブラリの使い方を解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ステップ１：ライブラリのインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは<a href=\"https://2jigenha.com/pip-install/\">pip</a>を使って、ライブラリをインストールします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install face_recognition pillow</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>face_recognitionは、目的のライブラリであり、pillowは画像処理（マーキング）をするために必要なライブラリです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ステップ２：顔認識に使う写真の準備</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>使用する画像を用意しましょう。本記事では以下の画像を使用します。ファイル名は、ここでは「group_pic.png」としました。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":113,\"width\":\"498px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/582e2ea653a6456885973dc6508b644a/image-24.webp\" alt=\"face_recognitionに使う画像\" class=\"wp-image-113\" style=\"width:498px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>用意した画像を、<strong>Pythonコードを書く階層と同じフォルダに格納</strong>します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ステップ３：face_recognitionを使う</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まず、face_recognitionを使うためのPythonコードを書きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import face_recognition\n\n# 画像をロード\nimage = face_recognition.load_image_file('group_pic.png')\n\n# 画像内の全ての顔の位置を検出\nface_locations = face_recognition.face_locations(image)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これで顔認識ができました。変数「face_locations」に顔の位置の座標などが格納されています。驚くほど簡単ですね。しかしこれでは我々は何もわからないので、顔にマーキングするプログラムを書いていきましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from PIL import Image, ImageDraw\n\n# PILイメージオブジェクトを作成\npil_image = Image.fromarray(image)\n\n# PILの描画ツールを使って描画用のオブジェクトを作成\ndraw = ImageDraw.Draw(pil_image)\n\n# 検出された顔の位置に矩形を描画\nfor (top, right, bottom, left) in face_locations:\n    # PIL/ImageDrawを使用して顔の周りに矩形を描画\n    draw.rectangle(((left, top), (right, bottom)), outline=(255, 0, 0))\n\n# 描画用のオブジェクトを破棄（保存された変更を確定）\ndel draw\n\n# 結果の画像を表示\npil_image.show()\n\n# 必要に応じて結果の画像を保存\npil_image.save('result_image.jpg')</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>以上のプログラムを実行すると、同じ階層のディレクトリに「result_image.jpg」と名前のついた次のような画像が保存されているはずです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":114,\"width\":\"607px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9c10f91ae6df4c1aa5322452b2cd991d/image-25.webp\" alt=\"face_recognitionによって顔認識マーキングされた画像\" class=\"wp-image-114\" style=\"width:607px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>顔の部分に赤い正方形が配置され、顔認識がうまくいっていることがわかります。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c0b5ed5f583a41cca0f6ef1c84f2c314/image-26.webp","categories":["11a4a60b51"],"tags":["bd2f88bbd9","11a4a60b51"]},{"id":"2ac878b0e2","publishedAt":"2024-03-27T16:16:48.000Z","title":"PythonのPDF生成ライブラリ「reportlab」の使い方","contents":"<p><code>reportlab</code>はPythonでPDFドキュメントを生成するためのライブラリです。PDFを作成し、テキスト、グラフィックス、表、グラフなどの豊富なコンテンツをPDFファイルに組み込むことが可能です。<code>reportlab</code>はビジネスレポート、公式文書など、プロ級品質のPDFドキュメントを生成することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">reportlabの特徴</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>reportlabには以下のような特徴があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>描画機能</strong>: ベクターベースの描画機能により、精密なグラフィックスやテキストレンダリングを実現する。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ページレイアウト</strong>: ページのレイアウトとデザインを細かく制御し複雑な文書構造を構築できる。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>テキスト処理</strong>: 複数のフォント、スタイル、配置をサポートし、テキストの流れや配置を精密に管理する。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>グラフとチャート</strong>: 組み込みのグラフィックエンジンを使用して、様々な種類のグラフやチャートを生成できる。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>画像のサポート</strong>: JPEG、PNG、GIFなどの画像形式を文書に組み込むことができる。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">reportlabの基本的な使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>reportlab</code>ライブラリを使用してPythonでPDF文書を生成する基本的なチュートリアルを以下に示します。このチュートリアルでは、PDFの作成、テキストの追加、画像の挿入、そしてページに基本的な図形を描画する方法をカバーします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. reportlabのインストール</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まず、<code>reportlab</code>を使用するためにライブラリをインストールする必要があります。これはpipを使用して簡単に行えます：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">pip install reportlab</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. PDFファイルの生成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>reportlab</code>の<code>canvas</code>クラスを使って、新しいPDFファイルを生成し、その上に描画を行います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">from reportlab.pdfgen import canvas\n\n# 新しいPDFファイルを作成\nc = canvas.Canvas(\"example.pdf\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. テキストの追加</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>drawString</code>メソッドを使用して、PDFにテキストを追加します。座標は左下が原点(0, 0)です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>水平座標（X軸）</strong>: 原点（左下隅）からの右方向への距離を表します。値が大きくなるほど、右に移動します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>垂直座標（Y軸）</strong>: 原点からの上方向への距離を表します。値が大きくなるほど、上に移動します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">c.drawString(100, 800, \"Hello, ReportLab!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. 図形の描画</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>線や図形を描画するには、<code>line</code>、<code>rect</code>（矩形）、<code>circle</code>（円）などのメソッドを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\"># 線を描画\nc.line(100, 790, 300, 790)\n\n# 矩形を描画\nc.rect(100, 770, 200, 20)\n\n# 円を描画\nc.circle(150, 700, 50)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. 画像の挿入</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>drawImage</code>メソッドを使って、PDFに画像を挿入することができます。画像形式はJPEG、PNG、GIFなどがサポートされています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">c.drawImage(\"image.png\", 100, 400, width=200, height=100)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. PDFの保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>すべての描画操作が完了したら、<code>save</code>メソッドを呼び出してPDFファイルを保存します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">c.save()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これで、<code>example.pdf</code>というファイルが同じ階層のディレクトリに生成され、指定したテキスト、図形、画像が含まれます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>生成されたPDFは以下のようなものになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":119,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/84cc740a8e7a4ca7a04d9c5f8510433c/image-27-1024x645.webp\" alt=\"reportlabによって生成されたPDF\" class=\"wp-image-119\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">まとめ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>この記事では、<code>reportlab</code>を使ってPDFを生成し、その中にテキスト、図形、画像を追加する基本的な方法を紹介しました。<code>reportlab</code>は非常に柔軟で強力なライブラリで、さらに複雑なPDF文書の作成にも対応しています。<a href=\"https://docs.reportlab.com/\">公式ドキュメント</a>など参照することで、より高度な機能について学ぶことができます。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/ce47f756865044d3a67d06e8932ae70e/image-28.webp","categories":["11a4a60b51"],"tags":["11a4a60b51","d96efdce45"]},{"id":"1be0034108","publishedAt":"2024-03-27T16:29:11.000Z","title":"Pythonにおけるelseの使い方3選","contents":"<p>Pythonにおける<code>else</code>文は条件分岐を扱う時によく使用されます。基本的には<code>if</code>文に続けて使われ、<code>if</code>文の条件が<code>False</code>のときに実行されるブロックを指定します。しかし、<code>else</code>の使用は<code>if</code>文だけに限らず、ループ（<code>for</code>や<code>while</code>）との組み合わせでも使うことが。ここでは、それぞれの使用例を解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <code>if</code>文と<code>else</code>文</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>if</code>文は、特定の条件が<code>True</code>（真）の場合にブロック内のコードを実行します。<strong>条件が</strong><code>False</code><strong>（偽）の場合に別のコードを実行したい場合は、</strong><code>else</code><strong>文を使用します。</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">x = 10\n\nif x &gt; 5:\n    print(\"xは5より大きい\")\nelse:\n    print(\"xは5以下\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、<code>x</code>が5より大きいかどうかを評価しています。条件がTrue（<code>x &gt; 5</code>）ならば、\"xは5より大きい\"を出力します。条件がFalseならば、<code>else</code>によって指定されたブロックが実行され、\"xは5以下\"を出力します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <code>elif</code>（Else If）の使用</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>条件が複数ある場合は、<code>elif</code>キーワードを使用して追加の条件を指定できます。<code>elif</code>は<code>else</code>と<code>if</code>を組み合わせたもので、複数の条件分岐を可能にします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">x = 10\n\nif x &gt; 10:\n    print(\"xは10より大きい\")\nelif x == 10:\n    print(\"xは10に等しい\")\nelse:\n    print(\"xは10より小さい\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、最初に<code>x</code>が10より大きいかを確認し、次に<code>x</code>が10に等しいかを<code>elif</code>で確認しています。どちらの条件も満たさない場合、<code>else</code>ブロックが実行されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. ループと<code>else</code>文</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonでは、<code>for</code>ループや<code>while</code>ループが正常に終了した後にコードを実行するために<code>else</code>ブロックを使用できます。ここでの「正常に終了」とは、ループが中断されずに最後まで実行されたことを意味します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>for</code>ループの例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">for i in range(3):\n    print(i)\nelse:\n    print(\"ループ正常終了\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードでは、<code>range(3)</code>によって生成される0から2までの数値が順に出力され、ループが中断されることなく正常に終了すると、\"ループ正常終了\"が出力されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>while</code>ループの例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">x = 3\n\nwhile x &gt; 0:\n    print(x)\n    x -= 1\nelse:\n    print(\"ループ正常終了\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、<code>x</code>が0より大きい間、<code>x</code>の値を出力し、<code>x</code>から1を引き続けます。<code>x</code>が0になるとループは終了し、\"ループ正常終了\"が出力されます。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/7c0fbf8fbaf74d8faa486b30dbf3f1db/image-29.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"0f8ef3377b","publishedAt":"2024-03-27T23:36:19.000Z","title":"【形態素解析】mecabをpythonで使用する方法","contents":"<p><a href=\"https://pypi.org/project/mecab-python3/\">MeCab</a>は、日本語の形態素解析ツールであり、テキストデータを単語に分割し、品詞を識別するために使われます。これは自然言語処理（NLP）の分野でよく使われるツールで、特に日本語テキストの分析に用いられます。MeCabはオープンソースであり、多くのプラットフォームで利用可能です。今回はPythonでMeCabを使用する方法を解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">MeCabのインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まず、pipを用いてMeCabをインストールしましょう。<code>mecab-python3</code>をPythonで使用する際には、MeCab自体のインストールと辞書データが必要です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># MeCabと辞書のインストール\npip install mecab-python3 unidic-lite</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">MeCabの使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>MeCabをインストールした後、Pythonから簡単に使用することができます。以下は、MeCabを使用してテキストを形態素解析する基本的な例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import MeCab\n\n# MeCabオブジェクトの初期化\nmecab = MeCab.Tagger()\n\n# 解析したいテキスト\ntext = \"これは形態素解析の例です。\"\n\n# 形態素解析の実行\nresult = mecab.parse(text)\n\nprint(result)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このスクリプトは、指定したテキストを形態素に分解し、各形態素の基本形、品詞などの情報を表示します。実行結果は次のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":126,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8caac21496c74f98b0260292c27be63b/image-30-1024x438.webp\" alt=\"MeCabによる形態素解析\" class=\"wp-image-126\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">さらにMeCabを使いこなす</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>さて、もう少し高度なMeCabの使い方を解説します。あるテキストデータから、名詞の単語だけ抽出するコードを書いてましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import MeCab\n\n# MeCabの初期化\nmecab = MeCab.Tagger()\n\n# 解析したいテキストデータ\ntext = \"\"\"\n日本経済新聞で面白い記事を読みました。AIに関する最新の研究成果が紹介されており、\n非常に興味深い内容でした。技術の進歩は日々加速しているようです。\n\"\"\"\n\n# 特定の品詞を検索する関数\ndef search_words_by_pos(text, pos_to_search):\n    words_found = []\n    \n    # テキストを形態素解析\n    node = mecab.parseToNode(text)\n    \n    # ノードを走査\n    while node:\n        # 品詞情報の取得\n        pos = node.feature.split(\",\")[0]\n        # 指定した品詞に一致する場合は、単語をリストに追加\n        if pos == pos_to_search:\n            word = node.surface\n            words_found.append(word)\n        node = node.next\n    \n    return words_found\n\n# 名詞を検索\nnouns = search_words_by_pos(text, \"名詞\")\n\nprint(\"見つかった名詞:\", nouns)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードを実行すると、次のような出力結果が得られます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":127,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/630a41c851f449ac9c9a3a8c60021ac4/image-31-1024x28.webp\" alt=\"MeCabの高度な使い方　出力結果\" class=\"wp-image-127\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>わずかなPythonコードで形態素解析ができるMeCabの面白さを実感していただけましたか？今後本格的に使用される場合は以下のことに留意してください</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>MeCabのバージョンやインストールした辞書によって、出力結果が異なる場合がある。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>MeCabは非常に高速で正確な形態素解析を提供するが、専門的な用語や新しい言葉には対応していない場合がある。これらの場合、カスタム辞書を追加することで解決できることがある。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f4ff84ac514f40aebea3f6ab7300d347/image-6.jpg","categories":["11a4a60b51"],"tags":["d90d3f57f0","11a4a60b51"]},{"id":"dbb1ded63b","publishedAt":"2024-03-27T23:50:02.000Z","title":"【Python】三項演算子とは何か？","contents":"<p>Pythonの三項演算子（ternary operator）は、条件式を1行で書くための便利な方法です。一般的には以下のように書きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">&lt;式1&gt; if &lt;条件&gt; else &lt;式2&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この演算子は、「もし条件が真（True）ならば式1を評価し、そうでなければ式2を評価する」という意味になります。この三項演算子は、単純な条件に基づいて値を選ぶ必要がある時に重宝されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">３項演算子の使用例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>例えば、二つの数<code>a</code>と<code>b</code>があり、そのうちの大きい方の数を変数<code>max_value</code>に代入する場合を考えます。通常のif文を使うと、以下のように書けます：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">if a &gt; b:\n    max_value = a\nelse:\n    max_value = b</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これを三項演算子を使って1行で書くと、以下のようになります：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">max_value = a if a &gt; b else b</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">３項演算子を使用する上での留意点</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>三項演算子は、上記のようにシンプルな条件式の場合に非常に便利有ですが、複雑なロジックや多くの条件が絡む場合は、コードの可読性を保つために通常のif-else文を使用した方が良い場合もあります。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b6e384df8d1d44c0aafb4c620114a9c4/image-32.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"d80eae6e96","publishedAt":"2024-03-28T01:07:39.000Z","title":"グラフ描画ライブラリSeabornを使ってみよう【Python】","contents":"<p><a href=\"https://seaborn.pydata.org/index.html\">Seaborn</a>はPythonで使える統計的グラフを作成するためのライブラリです。<a href=\"https://matplotlib.org/\">matplotlib</a>に基づいていて、より美しく、より洗練されたグラフを簡単に作成することができます。ここではSeabornの基本的な使い方をいくつか紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Seabornのインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずはSeabornをインストールする必要があります。<a href=\"https://2jigenha.com/pip-install/\">pip</a>を使ってインストールしましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install seaborn</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">とりあえずグラフ描画してみる</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Seabornの公式チュートリアルに従い、デモ用のデータを用いてグラフを描画してみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># seabornのインポート\nimport seaborn as sns\n\n# デフォルトのテーマ適応\nsns.set_theme()\n\n# デモ用のデータをロード\ntips = sns.load_dataset(\"tips\")\n\n# データを可視化する\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>すると以下のようなグラフが生成されるはずです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":138,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/380f51e90ee845208bc798bb3fda3e5d/image-33-1024x471.webp\" alt=\"Seabornによるデータの可視化\" class=\"wp-image-138\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>それでは各部分について詳しく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Seabornのインポート</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>最初に、Seabornライブラリを<code>sns</code>というエイリアスでインポートしています。これにより、「<code>sns」</code>を使用して簡単にSeabornの機能にアクセスできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">デフォルトのテーマ適応</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.set_theme()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>sns.set_theme()</code>は、グラフにデフォルトのテーマを適用します。これにより、グラフの見た目（フォントサイズ、色など）をを良くすることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">デモ用のデータをロード</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">tips = sns.load_dataset(\"tips\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>sns.load_dataset(\"tips\")</code>は、Seabornに組み込まれている<code>tips</code>データセットをロードします。このデータセットはPandas型のデータで、レストランのチップに関する情報（食事の合計額、チップの額、喫煙者かどうか、訪問時刻）が含まれています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">データの可視化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>sns.relplot()</code>は、関係性を表すプロット（ここでは散布図）を作成する関数です。この関数により、データセット内の複数の変数間の関係を一度に可視化することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>data=tips</code>では、使用するデータセットを指定しています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>x=\"total_bill\", y=\"tip\"</code>で、x軸に<code>total_bill</code>（食事の合計額）、y軸に<code>tip</code>（チップの額）をそれぞれ設定しています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>col=\"time\"</code>により、データを<code>time</code>（昼か夜か）に基づいて列方向に分割して表示します。これにより、昼と夜でのデータの分布を比較することができます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>hue=\"smoker\"</code>は、データポイントの色を<code>smoker</code>（喫煙者かどうか）の値に基づいて変更します。これにより、喫煙者と非喫煙者のデータポイントを色分けして表示します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>style=\"smoker\"</code>により、喫煙者と非喫煙者のデータポイントに異なるマーカースタイルを適用します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>size=\"size\"</code>は、データポイントのサイズを<code>size</code>（テーブルのサイズ）に基づいて調整します。これにより、テーブルの大きさをデータポイントのサイズで表現します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>このコードによって、<code>tips</code>データセットの複数の変数間の関係性を可視化するグラフが作成されます。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3c0d581d07bf43e9ad239bc27e3bb8e5/image-7.jpg","categories":["11a4a60b51"],"tags":["11a4a60b51","ee54b596e9"]},{"id":"2c7d5490e6","publishedAt":"2024-03-28T23:33:07.000Z","title":"Seabornによるヒートマップ(heatmap)の作り方","contents":"<p>Seabornの<code>heatmap</code>関数を使用して、色エンコードされたマトリックスとして矩形データをプロットする方法について解説します。<code>heatmap</code>関数はデータを色で表現したヒートマップを作成するために使われ、データのパターンや相関を視覚的に理解しやすくします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">基本的な使用方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下のようなシンプルなコードで、簡単なヒートマップを作成することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\n\n# データセットの読み込み\ndata = # 2Dデータセット（例えば、PandasのDataFrame）\n\n# ヒートマップの描画\nsns.heatmap(data)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">seabornに渡すパラメータ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>いくつかのパラメータを指定することで、ヒートマップの見た目を調整することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>data</code>: 矩形データセット。ndarrayに変換できる2Dデータセットで、Pandas DataFrameが提供された場合は、インデックス/カラム情報がラベルに使用されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>vmin</code>, <code>vmax</code>: カラーマップをアンカーする値。指定されていない場合は、データと他のキーワード引数から推測されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>cmap</code>: データ値から色空間へのマッピング。指定されていない場合は、<code>center</code>が設定されているかどうかによってデフォルトが変わります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>center</code>: 発散データをプロットする際にカラーマップを中心に設定する値。このパラメータを使用すると、指定されていない場合のデフォルトの<code>cmap</code>が変更されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>robust</code>: <code>True</code>の場合、<code>vmin</code>または<code>vmax</code>がないときに、極端な値ではなく頑健な分位数でカラーマップの範囲が計算されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>annot</code>: <code>True</code>の場合、各セルにデータ値を記述します。データと同じ形状の配列のようなものであれば、データの代わりにこれを使用してヒートマップに注釈を付けます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>fmt</code>: 注釈を追加する際に使用する文字列フォーマットコード。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>cbar</code>: カラーバーを描画するかどうか。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>よく使われるものを例示しましたが、このほかのパラメータも設定可能です。詳しくは<a href=\"https://seaborn.pydata.org/generated/seaborn.heatmap.html\">こちらの公式ページ</a>を参考にしてください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">heatmap作成のチュートリアル</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>それでは、具体的にいくつかの例を通してヒートマップを作成してみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">基本的なヒートマップの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まず、Seabornが提供する<code>load_dataset</code>関数でデータセットをロードし、<code>pivot</code>メソッドを使用してDataFrameを再構成します。これにより、数字データの部分のみが読み込まれるようになります。この例では<code>glue</code>データセットを使用し、モデルごとのタスクスコアをヒートマップにします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\n\n# データセットのロードとピボット\nglue = sns.load_dataset(\"glue\").pivot(index=\"Model\", columns=\"Task\", values=\"Score\")\n\n# ヒートマップの作成\nsns.heatmap(glue)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードを実行すると以下のようなヒートマップが生成されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":142,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/88ae51696dc34a0ebe7bc0007167193d/image-34-1024x626.webp\" alt=\"basic seaborn heatmap\" class=\"wp-image-142\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">セルの値の注釈付け</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>annot=True</code>を指定することで、各セルに数値を注釈として表示できます。これにより、値を一目で確認できるようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.heatmap(glue, annot=True)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":143,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/be038d113d5b4018aaf615a2e4dc780c/image-35-1024x626.webp\" alt=\"seaborn heatmap, annot\" class=\"wp-image-143\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">注釈のフォーマット</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>fmt</code>パラメータを使用して、注釈の数値フォーマットを制御できます。例えば、<code>fmt=\".1f\"</code>とすると、小数点以下1桁までの数値が表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.heatmap(glue, annot=True, fmt=\".1f\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":144,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/48eb551cc52042659b53773a1d26a6df/image-36-1024x626.webp\" alt=\"seaborn heatmap, annot\" class=\"wp-image-144\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">別のDataFrameを使った注釈</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>注釈に別のDataFrameを使用して、例えばランキングなど別の情報を表示することもできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.heatmap(glue, annot=glue.rank(axis=\"columns\"))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":145,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/6555ddec6a894f33b15367cfd9ff6076/image-37-1024x626.webp\" alt=\"seaborn heatmap, another annotation\" class=\"wp-image-145\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">セル間に線を追加</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>linewidths</code>パラメータを使ってセル間に線を追加し、視覚的な分離を強調できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.heatmap(glue, annot=True, linewidths=.5)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":146,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a3faa47d73a2488aa48f7b4fe25a1b64/image-38-1024x626.webp\" alt=\"seaborn heamap, line between cells\" class=\"wp-image-146\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カラーマップの選択</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>cmap</code>パラメータを使用して、様々なカラーマップから選択したり、カラーマップオブジェクトを渡してカスタマイズしたりできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 名前で選択\nsns.heatmap(glue, cmap=\"crest\")\n\n# カラーマップオブジェクトを使用\nsns.heatmap(glue, cmap=sns.cubehelix_palette(as_cmap=True))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":147,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/bfe15d17a6d54baabc04343e639b4eb6/image-39-1024x626.webp\" alt=\"seaborn heatmap, color map\" class=\"wp-image-147\"><figcaption class=\"wp-element-caption\">名前で選択</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":148,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/610ce3f3d6e2439889110c6f6966e4dd/image-40-1024x626.webp\" alt=\"seaborn heatmap, color map\" class=\"wp-image-148\"><figcaption class=\"wp-element-caption\">カラーマップオブジェクトを使用</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カラーマップの範囲の調整</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>vmin</code>と<code>vmax</code>を設定することで、データ値に対応するカラーマップの最小点と最大点を指定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.heatmap(glue, vmin=50, vmax=100)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":149,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/25de1b1c6699439ab31fc75d19f5ef12/image-41-1024x626.webp\" alt=\"seaborn heatmap, adjastment of color map\" class=\"wp-image-149\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">matplotlibの軸オブジェクトを使用したカスタマイズ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>sns.heatmap</code>はmatplotlibの軸（Axes）オブジェクトを返すため、これを使用してプロットをさらに微調整することが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">ax = sns.heatmap(glue, annot=True)\nax.set(xlabel=\"\", ylabel=\"\")\nax.xaxis.tick_top()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":150,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/0b6b38ce94b44114aa345567dd795233/image-42-1024x626.webp\" alt=\"seaborn heatmap, matplotlib\" class=\"wp-image-150\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以上の方法で、Seabornの<code>heatmap</code>関数を使って、さまざまなデータの相関やパターンを視覚的に表現するヒートマップを作成することができます。データの分析やプレゼンテーションに役立ててください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/0efb04d3d9214cde913d2770d2c2b5b0/image-8.jpg","categories":["11a4a60b51"],"tags":["1d7035dd7f","11a4a60b51","ee54b596e9"]},{"id":"620c9c3321","publishedAt":"2024-03-29T04:14:11.000Z","title":"Seabornを用いた箱ひげ図（boxplot）の作り方","contents":"<p>Seabornの<code>boxplot</code>関数は、カテゴリに対する分布を示する箱ひげ図（boxplot）を描画するために使用されます。箱ひげ図（boxplot）は、データの分布をカテゴリー間で比較するのに便利です。箱（box）はデータセットの四分位数を示し、ひげ（whisker）は「外れ値」と判断された点を除く、残りの分布を示すために伸びます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">boxplotの基本的な使用法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\n\n# データセットの読み込み\ntips = sns.load_dataset(\"tips\")\n\n# ボックスプロットの描画\nsns.boxplot(x=\"day\", y=\"total_bill\", data=tips)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードは、<code>tips</code>データセット内の<code>day</code>ごとの<code>total_bill</code>（総請求額）の分布をボックスプロットで示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":155,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a8024ce41c0042c5b196d72d3f928c37/image-43.webp\" alt=\"seaborn boxplot, example\" class=\"wp-image-155\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">seabornに渡すパラメータ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>data</code>: プロットするデータセット。<code>x</code>と<code>y</code>がなければ広形式と解釈され、それ以外の場合は長形式と期待されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>x</code>, <code>y</code>, <code>hue</code>: データ内の変数名、またはベクトルデータ。長形式データのプロット用の入力です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>order</code>, <code>hue_order</code>: カテゴリカルレベルをプロットする順序。指定されていない場合、データオブジェクトからレベルが推測されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>orient</code>: プロットの向き（垂直または水平）。これは通常、入力変数のタイプに基づいて推測されますが、<code>x</code>と<code>y</code>が数値の場合や広形式データをプロットする場合のあいまいさを解決するために使用されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>color</code>, <code>palette</code>: プロット要素の色または<code>hue</code>変数のレベルの色。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>saturation</code>: 塗りつぶし色を描画する際の元の彩度の割合。大きなパッチでは薄い色の方が見栄えが良いことがあります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>fill</code>: <code>True</code>の場合、固体パッチを使用します。そうでなければ線画として描画されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>dodge</code>: <code>hue</code>マッピングを使用する場合、要素を狭めて重なりを解消するかどうか。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>width</code>: 各要素に割り当てられる幅。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>whis</code>: ウィスカーの長さを制御するパラメータ。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">色とパレットのカスタマイズ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.boxplot(x=\"day\", y=\"total_bill\", data=tips, color=\"skyblue\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":156,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/57d5cf8d177247a6b0cbe2e4d90ca393/image-44.webp\" alt=\"seaborn boxplot, custamized color\" class=\"wp-image-156\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ヒュー（カテゴリカル変数）による分割</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.boxplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips, palette=\"Set3\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":157,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/73e4ff4672a543028553e9ae976d4e6c/image-45.webp\" alt=\"seaborn boxplot, hue\" class=\"wp-image-157\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">垂直と水平の向き</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 垂直向き\nsns.boxplot(x=\"total_bill\", data=tips)\n\n# 水平向き\nsns.boxplot(y=\"total_bill\", data=tips)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":158,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/39bfb0712aff4fae8cd494cdb59ec180/image-46.webp\" alt=\"seaborn boxplot, horizontal\" class=\"wp-image-158\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":159,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d701ebfc094b4e3aa8680b9880bcd58b/image-47.webp\" alt=\"seaborn boxplot, vertical\" class=\"wp-image-159\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">異なる幅とウィスカー長</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.boxplot(x=\"day\", y=\"total_bill\", data=tips, width=0.5, whis=2.5)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":160,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c3646103c36c4960aef320d518fcfdce/image-48.webp\" alt=\"seaborn\" class=\"wp-image-160\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Seabornの<code>boxplot</code>関数は、データの中央値、四分位範囲、外れ値を視覚的に表示する強力なツールです。上記のパラメータを調整することで、様々なデータセットに対して柔軟にボックスプロットをカスタマイズできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Seabornを使ったboxplotの例（チュートリアル）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからは、さらに豊富なカスタマイズをしていきましょう。有名なタイタニックの生存者のデータを用いて箱ひげ図を作っていきます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">単一の水平ボックスプロット</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\ntitanic = sns.load_dataset(\"titanic\")\n\nsns.boxplot(x=titanic[\"age\"])\n\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":161,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f4115cd5d27040f4ba86aae125fd1fba/image-49.webp\" alt=\"seaborn boxplot, titanic\" class=\"wp-image-161\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カテゴリー的変数によるグループ化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.boxplot(data=titanic, x=\"age\", y=\"class\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>class</code>（等級）ごとに年齢の分布を比較します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":162,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/cb94bab8c452472f8bd39b43ed00f2bb/image-50.webp\" alt=\"seaborn boxplot, categorical\" class=\"wp-image-162\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ネストされたグループ化によるボックスプロット</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.boxplot(data=titanic, x=\"class\", y=\"age\", hue=\"alive\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>class</code>によるグループ化に加えて、<code>alive</code>（生存状況）によるネストされたグループ化を行います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":163,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/1f96b1f024b84f79945c9e9af7a15322/image-51.webp\" alt=\"\" class=\"wp-image-163\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">データの全範囲をカバーするひげ（whisker）</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.boxplot(data=titanic, x=\"age\", y=\"deck\", whis=(0, 100))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>whis</code>パラメータを使用して、ひげがデータの全範囲をカバーするようにします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":164,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5f25ec1151df40c4912c558ba0e3af04/image-52.webp\" alt=\"seaborn, boxplot, whiscar\" class=\"wp-image-164\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">より狭いボックス</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.boxplot(data=titanic, x=\"age\", y=\"deck\", width=.5)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ボックスの幅を狭くします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":165,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c9e812b285c04f1b837ef65531f54b1d/image-53.webp\" alt=\"seaborn boxplot, narrow\" class=\"wp-image-165\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Matplotlib関数のパラメータを使用したカスタマイズ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">sns.boxplot(\n    data=titanic, x=\"age\", y=\"class\",\n    notch=True, showcaps=False,\n    flierprops={\"marker\": \"x\"},\n    boxprops={\"facecolor\": (.3, .5, .7, .5)},\n    medianprops={\"color\": \"r\", \"linewidth\": 2},\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ノッチの追加、キャップの非表示、外れ値のマーカースタイルの変更、ボックスと中央値の線のカスタマイズを行います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":166,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e82ae803d5c04518933ff3080b5c5d76/image-54.webp\" alt=\"seaborn boxplot, matplotlib\" class=\"wp-image-166\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>seabornを用いてさまざまな箱ひげ図の作り方を見てきました。データの分析やプレゼンテーションに役立てていただけると幸いです。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d831666e8cc445acb7ce00a80115a2ad/image-55.webp","categories":["11a4a60b51"],"tags":["4f7165a839","11a4a60b51","ee54b596e9"]},{"id":"f57e5cb1f4","publishedAt":"2024-03-30T02:03:01.000Z","title":"Seabornを用いた散布図（scatterplot）の作り方","contents":"<p>Seabornライブラリを用いた散布図（Scatterplot）の描画方法について解説します。散布図（Scatterplot）は、2つの連続変数の関係性を視覚的に示すためのグラフです。<a href=\"https://seaborn.pydata.org/generated/seaborn.scatterplot.html\">Seabornの<code>scatterplot</code>関数</a>は、さまざまなグルーピングに基づいて散布図を描画し、視覚的にデータの意味を持たせる機能を提供します。本記事では、<code>scatterplot</code>関数の基本的な使い方と、そのカスタマイズ可能なオプションについて詳しく見ていきましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">scatterplotの基本的な使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\nsns.set_theme()　＃見た目をよくする設定\nsns.scatterplot(data=データ, x=\"X軸の変数\", y=\"Y軸の変数\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードは、指定されたデータセット内の2つの変数に基づいて散布図を描画します。<code>data</code>引数には、pandasのDataFrame、numpyのndarray、マッピング、またはシーケンスを指定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Scatterplotのオプション</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>散布図には、<code>hue</code>、<code>size</code>、<code>style</code>という3つのパラメーターを使用して、データのサブセット間の関係性をわかりやすく示すことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>hue（色）</strong>: 点の色を変えることで、別の変数のグループを表現します。カテゴリカル変数も数値変数も使用できますが、色のマッピングは数値変数の場合とは異なる振る舞いをします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>size（サイズ）</strong>: 点のサイズを変えることで、別の変数のグループを表現します。こちらもカテゴリカル変数と数値変数の両方が使用できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>style（スタイル）</strong>: 点のマーカーの形状を変えることで、別の変数のグループを表現します。このパラメーターは数値型を持つことができますが、常にカテゴリカルとして扱われます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">その他のカスタマイズオプション</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>scatterplot</code>関数は、色（<code>palette</code>）、色の順序（<code>hue_order</code>）、サイズ（<code>sizes</code>）、マーカーのスタイル（<code>markers</code>）、凡例の表示方法（<code>legend</code>）など、グラフの見た目をカスタマイズするための多くのオプションを提供します。これらのオプションを使って、グラフの見た目をデータの特性やプレゼンテーションの目的に合わせて調整することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Seabornによる散布図（scatterplot）作成の例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Seabornライブラリを活用したScatterplotの例をご紹介します。このチュートリアルでは、<code>tips</code>データセットを例に、散布図の基本的な描画方法から、さまざまなセマンティックなマッピングの適用方法までを学びます。tipsはチップの額に関するデータセットで、seabornが提供してくれるものです。<code>tips</code>データセットには数値変数とカテゴリカル変数が混在しており、この多様性を利用して散布図の豊富な表現を探ります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>まず、Seabornの<code>load_dataset</code>関数を使って<code>tips</code>データセットを読み込みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\nsns.set_theme()\n\ntips = sns.load_dataset(\"tips\")\ntips.head()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">基本的な散布図</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>2つの変数間の散布図を描画するには、<code>scatterplot</code>関数にデータフレームとx、y軸に使用する変数名を指定します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":170,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5afcb1ae1c75412cadd564dc9298ba67/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.38.02.webp\" alt=\"seaborn scatterplot, basic plot\" class=\"wp-image-170\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">色（hue）を使用したグルーピング</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>hue</code>パラメータを使用することで、点の色を変え、異なるカテゴリのデータを区別できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":171,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/61b5142e7e7e4b25a2a0a7bcc622fccf/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.50.21.webp\" alt=\"seaborn scatterplot, hue\" class=\"wp-image-171\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">スタイル（style）でマーカーを変更</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>style</code>パラメータを使用して、マーカーの形状を変更し、よりアクセシブルなプロットを作成します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\", style=\"time\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":172,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e9cd19b755d6427b9d6d7fbd1391a7dd/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.50.29.webp\" alt=\"seaborn scatterplot, style\" class=\"wp-image-172\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">色（hue）とスタイル（style）の独立した変更</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>hue</code>と<code>style</code>を異なる変数に割り当てることで、色とマーカーを独立して変更できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"day\", style=\"time\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":173,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/079f3eef6c46460fa3d189e125a6c0e8/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.50.35.webp\" alt=\"seaborn scatterplot, hue, style\" class=\"wp-image-173\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">数値データのセマンティックマッピング</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>hue</code>に数値変数を割り当てると、量的なマッピングが適用され、デフォルトのパレットが変わります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":174,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e28083292d164800b9ef6cdd22a88468/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.50.41.webp\" alt=\"seaborn scatterplot, semantic\" class=\"wp-image-174\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カスタムパレットの適用</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>カテゴリカルなマッピングを強制するために、カテゴリカルパレット名や明示的な色を指定します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\", palette=\"deep\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":175,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9dfa3913313243f6931226684d5f7615/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.50.48.webp\" alt=\"seaborn scatterplot, custom palette\" class=\"wp-image-175\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">サイズ（size）によるセマンティックマッピング</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>size</code>パラメータに数値変数を割り当てることで、点の大きさにセマンティックなマッピングを適用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\", size=\"size\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":176,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c3475e704df24a36ac560d4b5a64e2cf/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.50.55.webp\" alt=\"seaborn scatterplot, size\" class=\"wp-image-176\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カスタムマーカーの使用</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>markers</code>パラメータにリストや辞書を渡すことで、スタイル変数に応じた特定のマーカーを指定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">markers = {\"Lunch\": \"s\", \"Dinner\": \"X\"}\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", style=\"time\", markers=markers)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":177,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/ce78738735e448a2b3ac3c2fdec0e086/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.51.03.webp\" alt=\"seaborn scatterplot, custom marker\" class=\"wp-image-177\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">マーカーの形を任意に設定</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>matplotlib.axes.Axes.scatter</code>に直接渡される追加のキーワード引数を使用して、任意にマーカーの形を設定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", s=100, color=\".2\", marker=\"+\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":178,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9b2fba8384de4999b52ba2fc5b9bf617/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.51.10.webp\" alt=\"seaborn scatterplot, marker\" class=\"wp-image-178\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">wide-formデータの使用</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>wide-formデータを使用すると、各列がインデックスに対してプロットされ、hueとstyleマッピングも使用できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\nimport numpy as np\n\nindex = pd.date_range(\"1 1 2000\", periods=100, freq=\"m\", name=\"date\")\ndata = np.random.randn(100, 4).cumsum(axis=0)\nwide_df = pd.DataFrame(data, index, [\"a\", \"b\", \"c\", \"d\"])\n\nsns.scatterplot(data=wide_df)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":179,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/111e070b48874087ba138ebfc50ed6ef/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.51.15.webp\" alt=\"seaborn scatterplot, wide-form\" class=\"wp-image-179\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">複数のサブプロットへの分割</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>relplot</code>を使用して<code>scatterplot</code>と<code>FacetGrid</code>を組み合わせ、追加のカテゴリカル変数によるグルーピングを複数のサブプロットに渡って描画します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.relplot(\n    data=tips, x=\"total_bill\", y=\"tip\",\n    col=\"time\", hue=\"day\", style=\"day\",\n    kind=\"scatter\"\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":180,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/28cc417b1e424b54bec6ad373e821f7d/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-19.51.26-1024x471.webp\" alt=\"seaborn scatterplot, subplot\" class=\"wp-image-180\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>seabornを用いてさまざまな散布図の作り方を見てきました。データの分析やプレゼンテーションに役立てていただけると幸いです。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c3c501dd12fd40c38ce91a624e4a5607/narityan_scatterplot_graph_black_and_white_3ca12157-1214-4927-a0d0-1cc0f7eed47c.webp","categories":["11a4a60b51"],"tags":["11a4a60b51","16841c9d30","ee54b596e9"]},{"id":"b8aed072d2","publishedAt":"2024-03-30T02:31:07.000Z","title":"Seabornを用いた棒グラフ（barplot）の作り方","contents":"<p>Seabornの<code>barplot</code>関数は、カテゴリー別の数値データの集計値（点推定値）とその誤差範囲を棒グラフで表現するための強力なツールです。この記事では、<code>barplot</code>関数のパラメーターとその使い方を詳しく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">seaborn.barplot の概要</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>seaborn.barplot</code>は、数値変数の集計や統計推定値を矩形の高さで表し、その推定値の不確実性をエラーバーで示します。バーplotは、0を軸範囲に含み、変数にとって0が意味のある値となる場合に適しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">主要パラメータ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>data</code>: プロット用のデータセット。<code>x</code>と<code>y</code>が省略された場合、wide-formと解釈されます。それ以外の場合は、long-formが想定されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>x</code>, <code>y</code>, <code>hue</code>: data内の変数の名前、またはベクトルデータ。long-formデータの描画用の入力です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>order</code>, <code>hue_order</code>: カテゴリーレベルを描画する順序。指定がない場合は、データオブジェクトから推測されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>estimator</code>: 各カテゴリービン内で推定する統計関数。文字列またはベクトル-&gt;スカラーをマッピングするcallable。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>errorbar</code>: エラーバーの方法。<code>\"ci\"</code>, <code>\"pi\"</code>, <code>\"se\"</code>, <code>\"sd\"</code>の文字列、またはメソッド名とレベルパラメーターのタプル、またはベクトルから(min, max)区間へのマッピング関数、またはNone。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>n_boot</code>: 信頼区間を計算するために使用されるブートストラップサンプルの数。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>orient</code>: プロットの向き（縦または横）。通常、入力変数の種類に基づいて推測されますが、両方の<code>x</code>と<code>y</code>が数値またはwide-formデータを描画する場合に曖昧さを解消するために使用されます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">追加パラメータ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>color</code>, <code>palette</code>: プロットの要素の色または、hue変数の異なるレベルの色。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>saturation</code>: 塗りつぶし色を描画する際の元の彩度の割合。<code>1</code>に設定すると、色が入力値と完全に一致します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>fill</code>: Trueの場合、固定パッチを使用。そうでなければ、線画として描画されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>width</code>: orient軸上で各要素に割り当てられた幅。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>dodge</code>: hueマッピングが使用される場合に、要素が狭くなり、orient軸に沿ってシフトして重なり合わないようにするかどうか。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>capsize</code>: エラーバーの「キャップ」の幅。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Seabornのbaplotで作る棒グラフの例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>このチュートリアルでは、Seabornを使用して様々なスタイルと設定でバーplotを作成する方法について説明します。具体的な例を通じて、Seabornの<code>barplot</code>機能の柔軟性と強力さを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 基本的なバーplotの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">カテゴリ変数によるグルーピングと集計値のプロット</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\nsns.set_theme()\n\n# データセットの読み込み\npenguins = sns.load_dataset(\"penguins\")\n\n# 基本的なバーplot\nsns.barplot(data=penguins, x=\"island\", y=\"body_mass_g\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードは、<code>penguins</code>データセットの各島（<code>island</code>）について、ペンギンの体重（<code>body_mass_g</code>）の平均値をプロットします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":184,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9df25b70c4bc41e7b6df32bfd8d39503/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.15.41.webp\" alt=\"seaborn barplot\" class=\"wp-image-184\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. hueパラメータを使用してグループ化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>グループ化変数を<code>hue</code>に割り当てる</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.barplot(data=penguins, x=\"body_mass_g\", y=\"island\", hue=\"island\", legend=False)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ここでは、<code>island</code>変数に基づいて色分けされたバーplotを作成し、それぞれの島を異なる色で表示しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":185,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/6f546b70710d40cc9473fa0d70ca05da/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.15.49.webp\" alt=\"seaborn barplot, hue\" class=\"wp-image-185\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. wide-formデータフレームのプロット</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>wide-formデータの各列を集約してバーplotを作成</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">flights = sns.load_dataset(\"flights\")\nflights_wide = flights.pivot(index=\"year\", columns=\"month\", values=\"passengers\")\n\n# wide-formデータフレームのプロット\nsns.barplot(data=flights_wide)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードでは、<code>flights_wide</code>データフレームの各列をバーplotで表現しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":186,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/0a6e66fc95bd4d5f805b2e87c24b4141/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.15.59.webp\" alt=\"seaborn barplot, wide-form\" class=\"wp-image-186\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. シリーズのプロット</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>シリーズ（または辞書）をプロットする</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 特定の月のデータをプロット\nsns.barplot(data=flights_wide[\"Jun\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":187,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d858c13dd4ec4abda69ae292d5aeb3b5/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.16.06.webp\" alt=\"seaborn barplot, series\" class=\"wp-image-187\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. hueでの2層グループ化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.barplot(data=penguins, x=\"island\", y=\"body_mass_g\", hue=\"sex\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":188,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/ee6e6b494cf1410aaeca0c36ea21d9f9/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.16.14.webp\" alt=\"seaborn barplot, ２層グループ化\" class=\"wp-image-188\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. 標準偏差でエラーバー表示</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.barplot(data=penguins, x=\"island\", y=\"body_mass_g\", errorbar=\"sd\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":189,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/6fa15e15d3f04c62b1546fd779c16913/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.16.21.webp\" alt=\"seaborn barplot, error bar\" class=\"wp-image-189\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. 異なる集約関数の使用とエラーバーの無効化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.barplot(data=flights, x=\"year\", y=\"passengers\", estimator=\"sum\", errorbar=None)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":190,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/7de5a8589a2346429b6eaef8664af746/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.16.31.webp\" alt=\"seaborn barplot, no error bar\" class=\"wp-image-190\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. バーの値にテキストラベルを追加</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">ax = sns.barplot(data=flights, x=\"year\", y=\"passengers\", estimator=\"sum\", errorbar=None)\nax.bar_label(ax.containers[0], fontsize=10)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":191,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/deca3d9d89c1495698450aeab045c571/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.16.39.webp\" alt=\"seaborn barplot, text label\" class=\"wp-image-191\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. 元のスケーリングの保存と数値座標による注釈の追加</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">ax = sns.barplot(data=flights, x=\"year\", y=\"passengers\", native_scale=True, estimator=\"sum\", errorbar=None)\nax.plot(1955, 3600, \"*\", markersize=10, color=\"r\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":192,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b75cc1e6a3cd45c2b9be81e9c3ab9c6f/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.16.47.webp\" alt=\"seaborn barplot, original scaling, annotation\" class=\"wp-image-192\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <code>orient</code>を使用して、どの変数がグループ化されるべきかの曖昧さを解決</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.barplot(data=flights, x=\"passengers\", y=\"year\", orient=\"y\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":193,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8b3de2dd517c4b1297327710ac482507/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.16.54.webp\" alt=\"seaborn barplot, orient\" class=\"wp-image-193\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. matplotlibのキーワード引数を使用してプロットの外観をカスタマイズ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.barplot(\n    data=penguins, x=\"body_mass_g\", y=\"island\",\n    errorbar=(\"pi\", 50), capsize=.4,\n    err_kws={\"color\": \".5\",\n\n \"linewidth\": 2.5},\n    linewidth=2.5, edgecolor=\".5\", facecolor=(0, 0, 0, 0),\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":194,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5fd269ceecf94107b9fd36eb7f3a1e98/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.17.03.webp\" alt=\"seaborn barplot, matplotlib\" class=\"wp-image-194\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <code>catplot()</code>を使用して面分割バーplotを描画</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.catplot(\n    data=penguins, kind=\"bar\",\n    x=\"sex\", y=\"body_mass_g\", col=\"species\",\n    height=4, aspect=.5,\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":195,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8aca79a7591f4c938502a4e1ba52bb0c/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-20.17.11.webp\" alt=\"seaborn barplot, catplot\" class=\"wp-image-195\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>seabornを用いてさまざまな散布図の作り方を見てきました。データの分析やプレゼンテーションに役立てていただけると幸いです。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/41480d93b8a54d6da576653504aa8dbf/narityan_barplot_graph_black_and_white_8c064555-0f79-4a62-a7d1-040f97100fde.webp","categories":["11a4a60b51"],"tags":["1b47ca735e","11a4a60b51","ee54b596e9"]},{"id":"27badc983d","publishedAt":"2024-03-30T02:59:03.000Z","title":"Pythonのif文における複数条件の攻略","contents":"<p>Pythonのif文で複数の条件を指定するには、<strong><code>and</code>、<code>or</code>、<code>not</code>の論理演算子を使用</strong>します。本記事ではそれぞれの使用方法と例を示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <code>and</code>演算子</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>目的</strong>: 2つ以上の条件が<strong>すべて真</strong>である場合に、特定のブロックを実行します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>形式</strong>: <code>if 条件1 and 条件2:</code></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>例えば、<code>age</code>が18より大きく、かつ<code>income</code>が30000より大きい場合にのみ、メッセージが表示されるコードは次のように書きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">age = 25\nincome = 40000\nif age &gt; 18 and income &gt; 30000:\n    print(\"条件に合致します。\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <code>or</code>演算子</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>目的</strong>: <strong>2つ以上の条件のうち、少なくとも1つが真</strong>である場合に、特定のブロックを実行します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>形式</strong>: <code>if 条件1 or 条件2:</code></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>例えば、次のコードでは、<code>day</code>が\"Saturday\"であるか、<code>weather</code>が\"Sunny\"である場合に、メッセージが表示されます。つまり、土曜日であれば天気に関係なく、または晴れていれば曜日に関係なくピクニックに行くことが示されています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">day = \"Saturday\"\nweather = \"Rainy\"\nif day == \"Saturday\" or weather == \"Sunny\":\n    print(\"ピクニックに行きましょう！\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <code>not</code>演算子</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>目的</strong>: 条件が<strong>偽</strong>である場合に、特定のブロックを実行します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>形式</strong>: <code>if not 条件:</code></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>例えば、<code>ticket</code>が<code>False</code>の場合にのみ、メッセージが表示されるコードは次のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">ticket = False\nif not ticket:\n    print(\"チケットを購入する必要があります。\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">複合例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数の論理演算子を組み合わせることで、より複雑な条件を作成することもできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>例えば次のコードにおいて、年齢が18を超えておりかつ収入が30000を超えている、またはステータスが\"student\"の場合に、割引が適用されるという条件を設定しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">age = 20\nincome = 50000\nstatus = \"student\"\nif (age &gt; 18 and income &gt; 30000) or status == \"student\":\n    print(\"割引が適用されます。\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これらの論理演算子を使いこなすことで、Pythonにおける条件分岐を柔軟に制御できるようになります。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e752f3437cc34b32bb68209e0bc72c35/narityan_programming_code_beautiful_girl_is_writing_the_code_us_0c400f35-2358-4d45-86c5-fc069118fdca.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"4621c1d55f","publishedAt":"2024-03-30T03:30:43.000Z","title":"Seabornを用いた線グラフ（lineplot）の作り方","contents":"<p>Seabornの<code>lineplot</code>は、線グラフを作るためのツールです。二つのデータ点を線でつなぐ線グラフは、データの変化や傾向を見るのに役立ちます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>この機能の特徴は、データを色々な基準（セマンティクス）で分けて、それぞれ異なる見た目（色、線の太さ、点や線のスタイルなど）でグラフに表示できる点です。例えば、「色」を使って異なるカテゴリーを示したり、「線の太さ」で数値の大きさを表したりすることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">主要なパラメータ:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>data</strong>: pandas.DataFrame, numpy.ndarray, mapping, sequenceなどの入力データが使用可能です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>x</strong>, <strong>y</strong>: データ内のキーまたはベクトル。x軸およびy軸上の位置を指定する変数です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>hue</strong>: 異なる色の線を生成するためのグループ化変数です。カテゴリカルまたは数値のいずれかであり、後者の場合、色のマッピングは異なる挙動をします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>size</strong>: 異なる幅の線を生成するためのグループ化変数です。カテゴリカルまたは数値のいずれかであり、後者の場合、サイズのマッピングは異なる挙動をします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>style</strong>: 異なるダッシュやマーカーで線を生成するためのグループ化変数です。数値型を持つことができますが、常にカテゴリカルとして扱われます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">その他のパラメータ:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>estimator</strong>: 中心傾向を推定する方法です。<code>'mean'</code>（平均）がデフォルト。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>errorbar</strong>: 信頼区間やエラーバーをどのように表示するかを指定します。デフォルトは<code>('ci', 95)</code>で、95%の信頼区間を示します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>palette</strong>: 色の選択方法を指定します。hueセマンティックをマッピングする際に使用されます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Seabornによる線グラフ(lineplot)の作成例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからはチュートリアルを通して、さまざまな線グラフの作成例を見ていきましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">基本的な線グラフの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずはデータセットの読み込みす。 Seabornには<code>flights</code>データセットが含まれており、これを使用して線グラフを作成します。このデータセットには、1949年から1959年までの10年間にわたる月間航空会社乗客数のデータが含まれています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">   import seaborn as sns\n   sns.set_theme()\n\n   flights = sns.load_dataset(\"flights\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>次に線グラフを描画します。 特定の月（例: 5月）のデータをフィルタリングし、年ごとの乗客数の変化を示す線グラフを描画します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">   may_flights = flights.query(\"month == 'May'\")\n   sns.lineplot(data=may_flights, x=\"year\", y=\"passengers\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":204,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/2127c1699d8c4ea497f9db7b3e8f53c2/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-21.24.54.webp\" alt=\"seaborn lineplot\" class=\"wp-image-204\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">データセットの形式変更</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>広形式のデータフレームに変換:</strong> 複数のデータを同時に表示できるよう、<code>pivot</code>メソッドを使用して、データセットを広形式に変換し、各年と月に対する乗客数を表示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  flights_wide = flights.pivot(index=\"year\", columns=\"month\", values=\"passengers\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>全ての列をプロット:</strong> 広形式データセット全体を指定して、各列（月）に対する線グラフを描画します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  sns.lineplot(data=flights_wide)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":205,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/686fd709ce154ff9b5ca341f5ca3c15b/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-21.25.00.webp\" alt=\"seaborn lineplot, all data\" class=\"wp-image-205\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">セマンティックなグループ化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>hue</code>パラメータの使用:</strong> <code>hue</code>を使用して、異なる月を異なる色でプロットします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  sns.lineplot(data=flights, x=\"year\", y=\"passengers\", hue=\"month\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":206,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c7ce180ced2f4f929d09f428b6a93290/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-21.25.07.webp\" alt=\"seaborn lineplot, semantic plot\" class=\"wp-image-206\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">さらなるカスタマイズ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>異なるセマンティック変数の使用:</strong> <code>fmri</code>データセットを用いて、異なるセマンティック変数（<code>hue</code>と<code>style</code>）を異なる列に割り当てます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  fmri = sns.load_dataset(\"fmri\")\n  sns.lineplot(data=fmri, x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":207,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/dfdf216e4c07435c884a7353d57f9119/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-21.25.13.webp\" alt=\"seaborn lineplot, customize\" class=\"wp-image-207\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>エラーバーのカスタマイズ:</strong> <code>err_style</code>と<code>errorbar</code>パラメータを使用して、エラーバーの表示をカスタマイズします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  sns.lineplot(\n      data=fmri, x=\"timepoint\", y=\"signal\", hue=\"event\", err_style=\"bars\", errorbar=(\"se\", 2)\n  )</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":208,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/7c816de9aeb04f27a555d619bdd427c4/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-03-30-21.25.19.webp\" alt=\"seaborn lineplot, errror bar\" class=\"wp-image-208\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>seabornを用いてさまざまな線グラフ（lineplot）の作り方を見てきました。データの分析やプレゼンテーションに役立てていただけると幸いです。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f468e733f1f242d5a8469f7312b63e05/narityan_lineplot_graph_black_and_white_line_art_76d0c106-c214-4c42-a9c7-27da56507b5d.webp","categories":["11a4a60b51"],"tags":["4a73d6f045","11a4a60b51","ee54b596e9"]},{"id":"d48ff4b2f6","publishedAt":"2024-04-01T21:46:02.000Z","title":"Seabornを用いたヒストグラム（histplot）の作り方","contents":"<p>Seabornの<code>histplot</code>は、ヒストグラムを作成するための関数です。ヒストグラムでは、データが区切られた範囲（ビン）にどの程度分布しているかを棒グラフで示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">histplotの使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>histplotでは次のような簡単なコードの記述により、洗練されたヒストグラムを作ることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\nimport numpy as np\n\nsns.set_theme()\n\n# ランダムなデータセットを生成\ndata = np.random.normal(size=1000)\n\n# ヒストグラムを描画\nsns.histplot(data, bins=30, kde=True, color='blue')</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":214,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a8e1832611f148b48fe25d94242c9fcc/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.53.03.webp\" alt=\"seaborn histplot, example\" class=\"wp-image-214\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>histplotに渡す引数により、カスタマイズされたヒストグラムの生成ができます。例えば以下のようなものです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>データの指定</strong>: <code>data</code>でデータセットを、<code>x</code>や<code>y</code>で軸上の変数を選びます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>色分け</strong>: <code>hue</code>で異なるデータ群を色分けして表示できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ビンの調整</strong>: <code>bins</code>、<code>binwidth</code>、<code>binrange</code>でビンの数や幅、範囲をカスタマイズ可能です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>統計の表示</strong>: <code>stat</code>でビン内のデータを数、頻度、確率など様々な統計量で表示できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>カーネル密度推定</strong>: <code>kde</code>をTrueにすると、滑らかな曲線で分布を示すことができます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">histplotによるさまざまなヒストグラムの作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからは、Seabornが用意しているペンギンの羽の長さに関するデータセットを用いて、さまざまなヒストグラムのカスタマイズを行なってみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">基本的なヒストグラムの描画</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>最初に、ペンギンのフリッパーの長さ(<code>flipper_length_mm</code>)の分布を描画してみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme()\n\n# データセットの読み込み\npenguins = sns.load_dataset(\"penguins\")\n\n# フリッパーの長さの分布を描画\nsns.histplot(data=penguins, x=\"flipper_length_mm\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":215,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/eb679ae425c4475987b54b082c9f9456/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.50.44.webp\" alt=\"seaborn histplot, penguins data set\" class=\"wp-image-215\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ヒストグラムの向きを変更</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データ変数を<code>y</code>軸に割り当てることで、ヒストグラムの向きを変更できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.histplot(data=penguins, y=\"flipper_length_mm\")\nplt.show()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":216,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/2a335533712b428f981514b13b84408d/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.50.51.webp\" alt=\"seaborn histplot_横向き\" class=\"wp-image-216\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ビンの幅を変更</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ビンの幅(<code>binwidth</code>)を指定することで、横軸の範囲を細かくしてヒストグラムを描画することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.histplot(data=penguins, x=\"flipper_length_mm\", binwidth=3)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":217,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/78c793434d164cb7893aa33f55217184/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.50.56.webp\" alt=\"seaborn histplot_ビンの幅\" class=\"wp-image-217\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ビンの数を指定</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>全体のビンの数(<code>bins</code>)を指定することもできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.histplot(data=penguins, x=\"flipper_length_mm\", bins=30)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":218,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a4017c5945af42af9241e6729884c8e9/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.51.05.webp\" alt=\"seaborn histplot bin number\" class=\"wp-image-218\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カーネル密度推定の追加</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ヒストグラムにカーネル密度推定(<code>kde=True</code>)を追加して、分布の形状について補助的な情報を提供します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.histplot(data=penguins, x=\"flipper_length_mm\", kde=True)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":219,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/268f11100e964cc7b275f3f636c510e5/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.51.12.webp\" alt=\"seaborn histplot kde\" class=\"wp-image-219\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">種別ごとの分布の比較</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>hue</code>パラメータを使用して、ペンギンの種別(<code>species</code>)ごとに色分けしたヒストグラムを描画します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.histplot(data=penguins, x=\"flipper_length_mm\", hue=\"species\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":220,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a6c210b8a3774b768dfbed5385deaca1/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.51.20.webp\" alt=\"seaborn histplot hue\" class=\"wp-image-220\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">分布の積み重ね</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数の分布を積み重ね(<code>multiple=\"stack\"</code>)て表示することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.histplot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", multiple=\"stack\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":221,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e6c2a8c8c82a444ea3a4456cef85a982/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.51.25.webp\" alt=\"seaborn histplot multiple=stack\" class=\"wp-image-221\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ステップ関数の描画</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>棒グラフではなく、ステップ関数(<code>element=\"step\"</code>)を描画して分布を比較します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.histplot(penguins, x=\"flipper_length_mm\", hue=\"species\", element=\"step\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":222,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3d06363c797c4d4eb354f7cc9bb4aec3/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.51.34.webp\" alt=\"seaborn histplot step\" class=\"wp-image-222\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">対数スケールでの描画</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>実際のデータはしばしば歪んでいます。歪んだ分布に対しては、ビンを対数スケール(<code>log_scale=True</code>)で定義すると良いでしょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># データセットの読み込み\nplanets = sns.load_dataset(\"planets\")\n\n# 対数スケールでのヒストグラム描画\nsns.histplot(data=planets, x=\"distance\", log_scale=True)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":223,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/eb08c0c304d3468c81102b7ae00e878e/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-02-12.51.43.webp\" alt=\"seaborn histplot log\" class=\"wp-image-223\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>seabornを用いてさまざまなヒストグラム（histplot）の作り方を見てきました。データの分析やプレゼンテーションに役立てていただけると幸いです。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/89f997d4191d4163a3134aef63ecfc3b/narityan_histogram_black_and_white_line_art_77000c9e-6a05-4cfe-a688-d8c8ac2b39d2.webp","categories":["11a4a60b51"],"tags":["40bc6564ae","11a4a60b51","ee54b596e9"]},{"id":"dfe62e836a","publishedAt":"2024-04-05T03:59:37.000Z","title":"Seabornを用いたペアプロット（paiaplot）の作り方","contents":"<p>Seabornの<code>pairplot</code>関数は、データセット内のペアワイズ（二変量間）の関係をプロットするためのものです。この関数は、数値変数間の相関を視覚的に表現するグリッド形式の図を作成します。本記事では、Seaborn.paiaplotを用いてペアワイズプロットを作成する方法とさまざまなカスタマイズ方法についてご紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">基本的な使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\n\n# データフレームをロード\ndata = sns.load_dataset(\"iris\")\n\n# pairplotを作成\nsns.pairplot(data)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このシンプルなコードで、<code>iris</code>データセット（seabornが用意しているデモ用データセットの一つでアヤメの花弁に関するデータが格納）の全ての数値変数のペアワイズ関係が次の図のように描画されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":228,\"width\":\"791px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/4e8959e7a07041f9b0635237e822e73d/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.36.36-1024x913.webp\" alt=\"Seaborn pairplot, 基本的な使い方\" class=\"wp-image-228\" style=\"width:791px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">主なパラメータ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>data</code>: pandasのDataFrame。各列が変数で、各行が観測値です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>hue</code>: プロットのアスペクト（例えば、色）を異なる色にマッピングするための変数名。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>hue_order</code>: <code>hue</code>変数のパレット内のレベルの順序。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>palette</code>: <code>hue</code>変数のマッピングに使う色セット。辞書かseabornのカラーパレット。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>vars</code>: プロットに使用する変数のリスト。指定しない場合は、数値データ型の全ての列が使用されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>kind</code>: プロットの種類（'scatter', 'kde', 'hist', 'reg'）。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>diag_kind</code>: 対角線上のサブプロットの種類。<code>hue</code>が使用されるかどうかに基づいて自動的に選択されることもあります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>height</code> &amp; <code>aspect</code>: 各ファセットの高さ（インチ）とアスペクト比（アスペクト * 高さ = 各ファセットの幅（インチ））。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">返り値</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>grid</code>: さらなるカスタマイズのための<code>PairGrid</code>インスタンスを返します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>この関数はデータの探索的分析に非常に便利で、データセット内の変数間の関係を素早く把握することができます。また、<code>PairGrid</code>を直接使用することで、さらに柔軟なカスタマイズが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seabornの<code>pairplot</code>関数を使って、データセットのペアワイズ関係を視覚化する方法についてのチュートリアルを作成します。このチュートリアルでは、ペンギンのデータセットを例に、さまざまなカスタマイズオプションを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">pairplotのさまざまなカスタマイズ方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは最もシンプルな<code>pairplot</code>の使い方から始めましょう。ここからはペンギンに関するデータセットを用いてチュートリアルを作成します。以下のコードは、各ペアの変数に対して散布図を、対角線上にはヒストグラムを描画します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\n\n# データセットをロード\npenguins = sns.load_dataset(\"penguins\")\n\n# pairplotを描画\nsns.pairplot(penguins)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":229,\"width\":\"817px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b8dc7464f4a3486f8c958953c03c8313/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.36.23-1024x913.webp\" alt=\"seaborn pairplot, 出力結果\" class=\"wp-image-229\" style=\"width:817px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">色分け</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>hue</code>パラメータを指定することで、特定のカテゴリ変数に基づいてデータポイントを色分けすることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.pairplot(penguins, hue=\"species\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":230,\"width\":\"777px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/4fedd217df374e75a582f8dbca813522/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.36.08-1024x913.webp\" alt=\"Seaborn pairplot, color, hue\" class=\"wp-image-230\" style=\"width:777px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">対角線プロットのカスタマイズ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>diag_kind</code>パラメータを使用して、対角線上のプロットの種類をカスタマイズできます。例えば、上図と異なり、ヒストグラムを強制的に描画することが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.pairplot(penguins, hue=\"species\", diag_kind=\"hist\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":231,\"width\":\"828px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c84e800ad26040fb8d53b081aee59bad/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.36.00-1024x913.webp\" alt=\"Seaborn pairplot, diag_kind\" class=\"wp-image-231\" style=\"width:828px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">プロットの種類</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>kind</code>パラメータによって、対角線上だけでなく、非対角線上のプロットのスタイルも変更できます。例として、<code>\"kde\"</code>や<code>\"hist\"</code>を使用する方法があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># KDEプロット\nsns.pairplot(penguins, kind=\"kde\")\n\n# ヒストグラムプロット\nsns.pairplot(penguins, kind=\"hist\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":232,\"width\":\"809px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/cf5f3a4cf706483b8a6652c33b5a21a3/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.35.48-1024x913.webp\" alt=\"Seaborn pairplot, KDE\" class=\"wp-image-232\" style=\"width:809px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":233,\"width\":\"810px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/34eec6df1c144c68baf3613f027b7d4e/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.35.41-1024x913.webp\" alt=\"Seaborn pairplot, hist\" class=\"wp-image-233\" style=\"width:810px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">マーカースタイル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>markers</code>パラメータを使用して、非対角線プロットのマーカースタイルをカスタマイズできます。これは、<code>hue</code>変数と組み合わせて使用すると便利です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.pairplot(penguins, hue=\"species\", markers=[\"o\", \"s\", \"D\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":234,\"width\":\"825px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d5d871f964434739a76476725180639c/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.35.25-1024x913.webp\" alt=\"Seaborn pairplot, marker\" class=\"wp-image-234\" style=\"width:825px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">プロットのサイズ調整</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>個々のサブプロットのサイズは、<code>height</code>パラメータで制御できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.pairplot(penguins, height=1.5)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":235,\"width\":\"734px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d6d0e09745ac4364ae6eef9fe4f43620/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.35.11-1024x614.webp\" alt=\"Seaborn pairplot, size\" class=\"wp-image-235\" style=\"width:734px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">変数の選択</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>特定の変数だけをプロットしたい場合は、<code>vars</code>、<code>x_vars</code>、<code>y_vars</code>パラメータを使って指定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.pairplot(\n    penguins,\n    x_vars=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\"],\n    y_vars=[\"bill_length_mm\", \"bill_depth_mm\"],\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":236,\"width\":\"944px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c9757cc28ecb4e7f8e4aa697b7df2031/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.35.02-1024x515.webp\" alt=\"Seaborn pairplot, プロット数\" class=\"wp-image-236\" style=\"width:944px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">下三角行列のプロット</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>corner=True</code>を設定することで、グリッドの下三角部分のみをプロットし、余分な情報を省略できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.pairplot(penguins, corner=True)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":237,\"width\":\"863px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b7056c6a7a46485dad21107348c9fcca/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.34.46-1024x993.webp\" alt=\"seaborn pairplot, corner\" class=\"wp-image-237\" style=\"width:863px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カスタマイズオプション</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>plot_kws</code>と<code>diag_kws</code>パラメータを使用して、非対角線および対角線プロットをさらにカスタマイズできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sns.pairplot(\n    penguins,\n    plot_kws=dict(marker=\"+\", linewidth=1),\n    diag_kws=dict(fill=False),\n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":238,\"width\":\"877px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/1f4fc6f37af14e97af0569dce1cfe4d8/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.34.33-1024x993.webp\" alt=\"seaborn pairplot, カスタマイズ\" class=\"wp-image-238\" style=\"width:877px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">PairGridのカスタマイズ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>pairplot</code>関数は<code>PairGrid</code>オブジェクトを返します。これを使って、プロットをさらに微調整することが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">g = sns.pairplot(penguins, diag_kind=\"kde\")\ng.map_lower(sns.kdeplot, levels=4, color=\".2\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":239,\"width\":\"905px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/32de0241dc044281a12097f76a18e9fd/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.34.15-1024x993.webp\" alt=\"seaborn pairplot, pairgrid\" class=\"wp-image-239\" style=\"width:905px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>seabornを用いてさまざまなペアワイズプロット（pairplot）の作り方を見てきました。データの分析やプレゼンテーションに役立てていただけると幸いです。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/48957a73828a40fd814cd8c7d6ad6247/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.36.00.webp","categories":["11a4a60b51"],"tags":["11a4a60b51","ee54b596e9"]},{"id":"749fc650ca","publishedAt":"2024-04-05T04:45:02.000Z","title":"【GAS】さまざまなトリガーを設定するScriptApp.newTrigger()について","contents":"<p>Google Apps Script (GAS) の <code>ScriptApp.newTrigger()</code> メソッドは、Google Apps Script でトリガーを設定するために使用される関数です。トリガーは、指定された条件やアクションが発生した時に特定のスクリプト関数を自動的に実行するものです。<code>ScriptApp.newTrigger()</code> メソッドは、時間ベースのトリガー、Googleフォームの送信時トリガー、スプレッドシートのイベントトリガーなど、さまざまなタイプのトリガーを作成することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">newTrigger()の基本的な使用方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>例えば、毎朝6時にmyFunctionという名前の関数が実行されるように設定したい場合、以下のようにコードを書くことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">function createTimeDrivenTriggers() {\n  // 毎日AM 6時に実行されるトリガーを作成\n  ScriptApp.newTrigger('myFunction')\n      .timeBased()\n      .everyDays(1)\n      .atHour(6)\n      .create();\n}\n\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">トリガーのタイプ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>上記の例以外でも、さまざまな条件をトリガーに設定することができます。f</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>時間ベースのトリガー</strong>: <code>.timeBased()</code> メソッドを使用して設定。定期的にまたは特定の日時に関数を実行するために使用。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>イベントベースのトリガー</strong>: 特定のGoogleサービス（例: スプレッドシート、ドキュメント、フォーム）のイベントに基づいて関数を実行。例えば、<code>.forSpreadsheet(spreadsheet)</code> メソッドを使用してスプレッドシート関連のトリガーを設定できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>カスタムイベントトリガー</strong>: Googleカレンダーイベントの変更やGmailの新規メール受信など、Google Apps Scriptがサポートするその他のGoogleサービスに基づいたトリガー。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>以下は、主なトリガーの種類とその概要です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">時間ベースのトリガー</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>時間主導型（時間ベースの）トリガー</strong>: 一定の時間間隔（分、時間、日または週）ごとや、特定の日時にスクリプトを実行するために設定されます。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">イベントベースのトリガー</h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>スプレッドシートトリガー</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>onEdit</strong>: スプレッドシートのセルが編集されたときに実行されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>onChange</strong>: スプレッドシートに変更が加えられたとき（例: 行の追加や削除、シートの名前変更など）に実行されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>onOpen</strong>: スプレッドシートが開かれたときに実行されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>onFormSubmit</strong>: スプレッドシートに紐づいたフォームが送信されたときに実行されます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>例えば、スプレッドシートに変更が加えられた時に、「muFunction関数」が動作するようにする場合は、次のように記述します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function createOnChangeTrigger() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();　//シートを取得\n  ScriptApp.newTrigger('myFunction')\n    .forSpreadsheet(ss)\n    .onChange()\n    .create();\n}\n\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>.forSpreadsheet(ss)</code> メソッドは、このトリガーがどのスプレッドシートに対して作用するかを指定します。ここでは、変数 <code>ss</code> に格納された現在アクティブなスプレッドシートが対象です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>.onChange()</code> メソッドは、トリガーのタイプを「変更時」に設定します。つまり、スプレッドシートに何らかの変更が加えられたとき（例: セルの編集、行や列の追加・削除など）に、指定した関数を実行するようにします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>.create()</code> メソッドで、これらの設定に基づいてトリガーを実際に作成します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>ドキュメントトリガー</strong>:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>onOpen</strong>: ドキュメントが開かれたときに実行されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>onEdit</strong>: ドキュメントが編集された時に実行されます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>例えば、ドキュメントが開かれた時にmyFunction()が動作するスクリプトは次のように書きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function createOnOpenTrigger() {\n  var doc = DocumentApp.getActiveDocument(); // ドキュメントを取得\n  ScriptApp.newTrigger('myFunction')\n    .forDocument(doc)\n    .onOpen()\n    .create();\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>フォームトリガー</strong>:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>onFormSubmit</strong>: フォームが送信されたときに実行されます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>例えば、フォームが送信された時にmyFunction()が動作するスクリプトは次のように書きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function createOnFormSubmitTrigger() {\n  var form = FormApp.getActiveForm(); // フォームを取得\n  ScriptApp.newTrigger('myFunction')\n    .forForm(form)\n    .onFormSubmit()\n    .create();\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>カレンダートリガー</strong>:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>カレンダーイベントの作成、更新、削除などのカレンダーイベントに基づいて実行されます。（GASでは直接的なカレンダートリガーを設定する機能は提供されていませんが、カレンダーAPIを利用してイベントの変更を検知し、それに基づいてスクリプトを実行することは可能です。）</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/77710e652e2c47b385e9f662e0e4b97d/narityan_programming_code_with_beautiful_girl_black_and_white_l_d55e7625-9b32-411e-b21a-e95074f6e9e6.webp","categories":["2fe840e132"],"tags":["2fe840e132"]},{"id":"011af72a91","publishedAt":"2024-04-08T01:33:38.000Z","title":"【2024年】プログラミング言語ランキング｜TIOBE indexとGoogle検索数","contents":"<p>プログラミング言語の人気度ランキングの算出方法はいくつかあります。ここでは、google、amazon、wikipediaなど様々なサーチエンジンの検索結果を反映しているTIOBEインデックスによるランキングと、単純にgoogle検索を元にしたランキングを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">TIOBE indexによるランキング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://www.tiobe.com/tiobe-index/\">TIOBEインデックス</a>は、世界中のプログラミング言語の人気度を測る指標です。「〈言語〉プログラミング」という検索クエリを用いて、インターネット上での検索結果のヒット数を数えることによって算出されます。例えば、Google.comやWikipedia.orgなど、様々な言語と地域に対応する25個の検索エンジンがTIOBEインデックスの計算に採用されています。それぞれの検索エンジンは、TIOBEインデックスに対して異なる割合で影響を与え、例えば、Google.comは7.69％、Wikipedia.orgは7.38％の影響を持ちます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>このインデックスによるプログラミング言語の人気度ランキングは次のとおりになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":250,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b2684afe57c24dc4a3e34b2bde268f0a/a-1.webp\" alt=\"プログラミング言語　人気ランキング\" class=\"wp-image-250\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>データサイエンスが熱い昨今では、やはりPythonが堂々の一位です。また、根強いC言語の人気も見て取れます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>前年比を含めたランキングを表にすると、次のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><thead><tr><th>2024年4月</th><th>2023年4月</th><th>プログラミング言語</th><th>レート</th><th>前年度からの変化率</th></tr></thead><tbody><tr><td><strong>1</strong></td><td>1</td><td>Python</td><td>16.41%</td><td>1.90%</td></tr><tr><td><strong>2</strong></td><td>2</td><td>C</td><td>10.21%</td><td>-4.20%</td></tr><tr><td><strong>3</strong></td><td>4</td><td>C++</td><td>9.76%</td><td>-3.20%</td></tr><tr><td><strong>4</strong></td><td>3</td><td>Java</td><td>8.94%</td><td>-4.29%</td></tr><tr><td><strong>5</strong></td><td>5</td><td>C#</td><td>6.77%</td><td>-1.44%</td></tr><tr><td><strong>6</strong></td><td>7</td><td>JavaScript </td><td>2.89%</td><td>0.79%</td></tr><tr><td><strong>7</strong></td><td>10</td><td>Go</td><td>1.85%</td><td>0.57%</td></tr><tr><td><strong>8</strong></td><td>6</td><td>Visual Basic</td><td>1.70%</td><td>-2.70%</td></tr><tr><td><strong>9</strong></td><td>8</td><td>SQL</td><td>1.61%</td><td>-0.06%</td></tr><tr><td><strong>10</strong></td><td>20</td><td>Fortran</td><td>1.47%</td><td>0.88%</td></tr><tr><td><strong>11</strong></td><td>11</td><td>Delphi/Object Pascal</td><td>1.47%</td><td>0.24%</td></tr><tr><td><strong>12</strong></td><td>12</td><td>Assembly language</td><td>1.30%</td><td>0.26%</td></tr><tr><td><strong>13</strong></td><td>18</td><td>Ruby</td><td>1.24%</td><td>0.58%</td></tr><tr><td><strong>14</strong></td><td>17</td><td>Swift</td><td>1.23%</td><td>0.51%</td></tr><tr><td><strong>15</strong></td><td>15</td><td>Scratch</td><td>1.14%</td><td>0.35%</td></tr><tr><td><strong>16</strong></td><td>14</td><td>MATLAB</td><td>1.11%</td><td>0.25%</td></tr><tr><td><strong>17</strong></td><td>9</td><td>PHP</td><td>1.09%</td><td>-0.26%</td></tr><tr><td><strong>18</strong></td><td>38</td><td>Kotlin</td><td>1.05%</td><td>0.80%</td></tr><tr><td><strong>19</strong></td><td>19</td><td>Rust</td><td>1.03%</td><td>0.41%</td></tr><tr><td><strong>20</strong></td><td>16</td><td>R</td><td>0.84%</td><td>0.09%</td></tr></tbody></table><figcaption class=\"wp-element-caption\">プログラミング言語ランキング</figcaption></figure>\n<!-- /wp:table -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Googleで最も検索されたプログラミング言語ランキング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>最も多く使用されている検索エンジン「Google」で検索された回数をランキングにしてみましょう（<a href=\"https://pypl.github.io/PYPL.html\">データの引用元</a>、2024年4月現在）。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":251,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/4700391b236e41ac8f5548241953e9f6/b.png\" alt=\"プログラミング　人気ランキング　Google検索\" class=\"wp-image-251\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>こちらの指標でもPythonが圧倒的1位を獲得しています。C言語などの順位は異なりますが、全体的な傾向はTIOBEインデックスと似た傾向となっています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>また、前年比を含めたランキングを表にすると、次のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><thead><tr><th>ランキング</th><th>プログラミング言語</th><th>割合</th><th>前年比</th></tr></thead><tbody><tr><td><strong>1</strong></td><td>Python</td><td>28.43%</td><td>0.7%</td></tr><tr><td><strong>2</strong></td><td>Java</td><td>16.04%</td><td>-0.1%</td></tr><tr><td><strong>3</strong></td><td>JavaScript</td><td>8.72%</td><td>-0.8%</td></tr><tr><td><strong>4</strong></td><td>C/C++</td><td>6.65%</td><td>0.2%</td></tr><tr><td><strong>5</strong></td><td>C#</td><td>6.63%</td><td>-0.2%</td></tr><tr><td><strong>6</strong></td><td>R</td><td>4.63%</td><td>0.2%</td></tr><tr><td><strong>7</strong></td><td>PHP</td><td>4.45%</td><td>-0.7%</td></tr><tr><td><strong>8</strong></td><td>TypeScript</td><td>2.96%</td><td>0.0%</td></tr><tr><td><strong>9</strong></td><td>Swift</td><td>2.71%</td><td>0.4%</td></tr><tr><td><strong>10</strong></td><td>Rust</td><td>2.53%</td><td>0.4%</td></tr><tr><td><strong>11</strong></td><td>Objective-C</td><td>2.43%</td><td>0.3%</td></tr><tr><td><strong>12</strong></td><td>Go</td><td>2.16%</td><td>0.2%</td></tr><tr><td><strong>13</strong></td><td>Kotlin</td><td>1.93%</td><td>0.0%</td></tr><tr><td><strong>14</strong></td><td>Matlab</td><td>1.54%</td><td>-0.1%</td></tr><tr><td><strong>15</strong></td><td>Dart</td><td>1.01%</td><td>0.2%</td></tr><tr><td><strong>16</strong></td><td>Ada</td><td>0.99%</td><td>0.0%</td></tr><tr><td><strong>17</strong></td><td>Ruby</td><td>0.97%</td><td>-0.1%</td></tr><tr><td><strong>18</strong></td><td>VBA</td><td>0.91%</td><td>0.0%</td></tr><tr><td><strong>19</strong></td><td>Powershell</td><td>0.76%</td><td>-0.2%</td></tr><tr><td><strong>20</strong></td><td>Lua</td><td>0.61%</td><td>0.0%</td></tr><tr><td><strong>21</strong></td><td>Abap</td><td>0.6%</td><td>0.1%</td></tr><tr><td><strong>22</strong></td><td>Scala</td><td>0.58%</td><td>-0.1%</td></tr><tr><td><strong>23</strong></td><td>Visual Basic</td><td>0.42%</td><td>-0.2%</td></tr><tr><td><strong>24</strong></td><td>Groovy</td><td>0.35%</td><td>0.0%</td></tr><tr><td><strong>25</strong></td><td>Julia</td><td>0.33%</td><td>-0.1%</td></tr><tr><td><strong>26</strong></td><td>Perl</td><td>0.22%</td><td>-0.1%</td></tr><tr><td><strong>27</strong></td><td>Haskell</td><td>0.17%</td><td>-0.1%</td></tr><tr><td><strong>28</strong></td><td>Cobol</td><td>0.14%</td><td>-0.2%</td></tr><tr><td><strong>29</strong></td><td>Delphi/Pascal</td><td>0.13%</td><td>0.0%</td></tr></tbody></table><figcaption class=\"wp-element-caption\">プログラミング言語ランキング</figcaption></figure>\n<!-- /wp:table -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/cd80631654ea4279831960d9e02123cc/narityan_a_podium_black_and_white_line_art_72f9935b-2f27-4c4f-b601-018168216797.webp","categories":["ab2620f9b7"],"tags":["e0674de40d"]},{"id":"9512d95d00","publishedAt":"2024-04-08T02:11:38.000Z","title":"なぜHTMLはプログラミング言語ではないのか","contents":"<p>HTMLはマークアップ言語であり、プログラミング言語ではありません。その理由について本記事では解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>「HTMLがプログラミング言語ではない」と聞くと、プログラミング学習の最初のステップでHTMLを習得しようとされる方はがっかりくるのではないでしょうか。しかし、HTMLの習得はプログラミング学習に必須の知識です。そこで、HTMLとプログラミング言語の関係についても解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">HTMLがプログラミング言語でない理由</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":255,\"width\":\"561px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/2e240003e1a84a76a89e961698c9d3f1/DALL%C2%B7E-2024-04-08-20.06.28-Create-a-simple-and-clean-image-representing-HTML-featuring-the-iconic-angled-brackets-surrounding-the-letters-HTML.-The-color-scheme-should-be-bas.webp\" alt=\"HTML\" class=\"wp-image-255\" style=\"width:561px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>HTMLは「HyperText Markup Language」の略で、ウェブページを作成するためのマークアップ言語です。HTMLがプログラミング言語ではない理由は、条件分岐や繰り返しといったプログラミングに必要な機能を持たないためです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>プログラミング言語であるためには次のような機能を持っている必要があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>文法（シンタックス）</strong>: 言語固有の規則セットがあり、コードが書かれる方法を定義します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>制御構造</strong>: 条件分岐やループなど、プログラムの流れを制御する機能があります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>データ構造</strong>: データを格納、参照、操作するための様々な構造を提供します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>HTMLは、ブラウザなどに文字列の持っている役割を知らせるものです。例えば、&lt;h1&gt;タグで囲った文字列は、ブラウザによって「見出し」と解釈されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;h1&gt;タイトル&lt;/h1&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">HTMLとプログラミング言語の関係</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":256,\"width\":\"724px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f3d3c3172853475c981fa595bc6c8d1b/DALL%C2%B7E-2024-04-08-20.09.29-Create-a-simple-image-that-visually-represents-the-relationship-between-HTML-and-programming-languages.-The-image-should-depict-HTML-as-the-foundation.webp\" alt=\"HTMLとプログラミング言語\" class=\"wp-image-256\" style=\"width:724px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>とはいえ、HTMLの学習はプログラミングを習得する上での第一歩と言えるでしょう。その理由をいくつか挙げます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>基礎知識の構築</strong>: HTMLは、ウェブページの基本的な構造を作るために使われます。ウェブページ上でテキスト、画像、リンクなどのコンテンツをどのように表示するかを学び、ウェブの基礎的な仕組みを理解するのに役立ちます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>学習が容易</strong>: HTMLは視覚的結果をすぐに確認できるため、初心者にとって理解しやすく、プログラミングの基本的な概念に親しみやすい言語です。文法が簡単で、マークアップという形式を通じてウェブコンテンツの構造を学べるため、プログラミングの論理的思考を育む良い出発点になります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ウェブ開発の出発点</strong>: 現代のほとんどのアプリケーションはウェブベースであり、HTMLはその土台となる言語です。HTMLを理解することは、フロントエンド開発だけでなく、バックエンドやフルスタック開発の基礎知識を構築する上でも役立ちます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>他の言語への橋渡し</strong>: HTML自体はプログラミング言語ではありませんが、CSSやJavaScriptなどの他のウェブ技術と組み合わせることで、動的なウェブサイトを作成するための基盤を築くことができます。これらの技術はウェブ開発において重要な役割を果たし、HTMLはその統合点となります。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>以上のように、HTMLはプログラミング学習における出発点と言えるでしょう。サクッと学んで次のステップへ進んでください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b71bc5a1f83743ca8745b70a4d20d22e/narityan_beautiful_woman_is_denying_something_black_and_white_l_85a2d8c5-97ce-47a0-b177-e3688ed49705.webp","categories":["ab2620f9b7"],"tags":["e0674de40d"]},{"id":"7c252ab334","publishedAt":"2024-04-08T03:32:28.000Z","title":"Pythonのバージョンを確認をする方法","contents":"<p>Pythonのバージョンを確認する方法は、Windows、Linux、およびMacOSの各OSにおいて基本的に同じです。本記事ではPythonのバージョン確認方法を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">バージョン確認のコマンド</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>すべてのオペレーティングシステムにおいて、Pythonのバージョンを確認する基本的なコマンドは以下の通りです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">python --version</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>または</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">python -V</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これにより、例えば「<code>Python 3.8.5</code>」といった形式でバージョンを確認できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ただし、Python 2とPython 3の両方がインストールされているシステムでは、<code>python</code>コマンドがPython 2を指す場合があります。Python 3のバージョンを確認するには、以下のコマンドを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">python3 --version</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">異なるOSで確認するには</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Windows、Linux、およびMacOSの各OSにおいて、Pythonのバージョンを確認するコマンドは同じですが、コマンドを実行するプロンプトが異なります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Windowsの場合</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>コマンドプロンプト</strong>または<strong>PowerShell</strong>を開きます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>上記のコマンドのいずれかを入力して実行します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Linux</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>ほとんどのLinuxディストリビューションでは、ターミナルを開きます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>上記のコマンドのいずれかを入力して実行します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">MacOS</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>ターミナル</strong>を開きます。これは「アプリケーション」の中の「ユーティリティ」フォルダにあります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>上記のコマンドのいずれかを入力して実行します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>以上の手順で、ほとんどの場合においてPythonのバージョンを確認することができます。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/4b4e4b3508f84935ae9e4d9b6cc73dc0/narityan_version_confirmation_black_and_white_line_art_15285840-a4cf-42d6-9892-8813c8f14837.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"9e6a72557a","publishedAt":"2024-04-09T03:34:43.000Z","title":"Python コードのスタイルガイド【PEP8】とは？","contents":"<p>PEP 8はPython Enhancement Proposal（Python改善提案）の略で、Pythonコードを書く際のスタイルガイドです。（<a href=\"https://pep8-ja.readthedocs.io/ja/latest/\">日本語版公式ドキュメント</a>）この文書はPythonのコア開発チームによって作成され、Pythonコミュニティ全体で広く受け入れられています。PEP 8の主な目的は、Pythonコードの読みやすさと一貫性を向上させることです。PEP 8スタイルガイドに従うことで、開発者間の理解を深まりコードの可読性が高くなります。ここでは、PEP 8の主要な規則をサンプルコードと共に紹介し、それぞれの重要性について詳しく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">インデント：スペース4つ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>PEP 8では、スペース4つを使ってインデントすることが推奨されます。これにより、コードの階層構造が明確になり、読みやすくなります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>誤った例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def some_function():\n  print(\"Hello, World!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>正しい例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def some_function():\n    print(\"Hello, World!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">行の長さ：79文字</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>行の長さを79文字以内に保つことで、コードは読みやすくなり、横スクロールの必要性が減ります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>誤った例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def some_function(): print(\"This is a very long line of code that is definitely going to exceed the recommended limit of 79 characters\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>正しい例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def some_function():\n    print(\"This is a very long line of code that is definitely going to \"\n          \"exceed the recommended limit of 79 characters\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">インポート：分離して書く</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>インポートはファイルの先頭に記述し、標準ライブラリ、サードパーティライブラリ、ローカルライブラリごとにグループを分けて、それぞれのグループを空行で区切ります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>誤った例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import sys, os</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>正しい例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import os\nimport sys</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">空白の使用</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>不要な空白は避け、コードを簡潔に保ちます。括弧の内側、カンマの後、演算子の前後に適切な空白を使用することが重要です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>誤った例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">spam( ham[ 1 ], { eggs: 2 } )</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>正しい例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">spam(ham[1], {eggs: 2})</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">コメント：有益であること</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>コメントはコードが何をするのかではなく、なぜそうするのかを説明すべきです。また、完全な文で記述し、読み手が理解しやすいようにすることが重要です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>誤った例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># This function prints a message.\ndef print_message():\n    print(\"Hello, World!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>正しい例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def print_message():\n    # This function demonstrates printing a simple message\n    print(\"Hello, World!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">命名規則</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>クラス名は<code>CapWords</code>規則に従い、関数名や変数名は<code>lowercase_with_underscores</code>を使用します。これにより、コード内での要素の種類を容易に区別できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>クラス名：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class MyClass:\n    pass</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>関数名と変数名：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def my_function():\n    my_variable = 0\n    return my_variable</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">式と文のスペース</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>演算子の前後に適切なスペースを使用し、コードをより読みやすくします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>誤った例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">x=1+2</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>正しい例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">x = 1 + 2</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここまで、PEP8の基本的なルールをまとめました。ただし、特定のプロジェクトのルールやチームの合意がある場合は、それらを優先することが重要です。PEP 8はガイドラインであり、絶対的なルールではありません。主な目的は、コードの品質とコラボレーションの容易さを高めることにあります。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/4930b5ecd1904ab1b32a5feda39a6769/narityan_woman_is_coding_programming_code_on_mac_book_pro_black_d787cbc5-72ad-497a-a67f-75cfe773aca8.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"768b84ef05","publishedAt":"2024-04-09T03:43:43.000Z","title":"Pythonで四捨五入する4つの方法","contents":"<p>Pythonで数値を四捨五入する方法はいくつかあります。最も一般的な方法は<code>round()</code>関数を使用することですが、他にも様々な方法があります。ここでは、4つの異なる四捨五入方法を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <code>round()</code>関数</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>round()</code>関数は、最も基本的な四捨五入の方法です。第一引数には四捨五入したい数値を、第二引数には小数点以下の桁数を指定します。第二引数を省略すると、最も近い整数に四捨五入されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 小数点第二位まで四捨五入\nnum = round(3.14159, 2)\nprint(num)  # 出力: 3.14\n\n# 最も近い整数に四捨五入\nnum = round(2.5)\nprint(num)  # 出力: 2</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. 数値フォーマットを使用</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>フォーマット指定子を使用して数値を四捨五入することもできます。これは、表示用に数値をフォーマットする場合に便利です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">num = 3.14159\nformatted_num = \"{:.2f}\".format(num)\nprint(formatted_num)  # 出力: 3.14</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Decimalモジュール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>decimal.Decimal</code>を使用すると、精度を高く保ちながら四捨五入することができます。特に金融計算など、正確な小数点以下の計算が必要な場合に便利です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from decimal import Decimal, ROUND_HALF_UP\n\nnum = Decimal('2.5')\nrounded_num = num.quantize(Decimal('1'), rounding=ROUND_HALF_UP)\nprint(rounded_num)  # 出力: 3</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. mathモジュール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>math.ceil()</code>（切り上げ）と<code>math.floor()</code>（切り捨て）関数を適切に使用することで、独自の四捨五入処理を実装することも可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import math\n\n# 切り上げ\nnum = math.ceil(2.1)\nprint(num)  # 出力: 3\n\n# 切り捨て\nnum = math.floor(2.9)\nprint(num)  # 出力: 2</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">四捨五入：まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>これらの方法を適切に選択することで、さまざまな状況に対応する四捨五入処理を実装することができます。使用する際には、それぞれの方法が提供する精度や挙動を理解しておくことが重要です。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3c0d581d07bf43e9ad239bc27e3bb8e5/image-7.jpg","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"8acc23987b","publishedAt":"2024-04-09T05:56:41.000Z","title":"Pythonのrequests | HTTPリクエストのライブラリ","contents":"<p>Pythonの<code>requests</code>ライブラリは、HTTPリクエストを簡単に扱うための人気のあるライブラリです。Web APIとのやりとりやWebページのスクレイピングなど、Web上のリソースと通信する際に広く使用されています。この記事では、<code>requests</code>ライブラリの概要から始め、その導入方法、基本的な使い方について解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">requestsとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>requests</code>は、PythonでHTTPリクエストを送るためのシンプルで使いやすいライブラリです。<code>urllib</code>などPythonの標準ライブラリもHTTPリクエストを扱うことができますが、<code>requests</code>はより直感的で簡単なAPIを提供しており、SSL認証、セッション保持、JSONコンテンツの自動デコードなどの機能をサポートしています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">requestsの導入方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>requests</code>ライブラリはpipを利用して簡単にインストールできます。ターミナルやコマンドプロンプトを開き、以下のコマンドを実行してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">pip install requests</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコマンドにより、<code>requests</code>ライブラリとその依存関係がシステムにインストールされます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">requestsの使い方</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>requests</code>を使って、様々なHTTPリクエストを送ることができます。以下に、基本的なGETリクエストとPOSTリクエストの例を示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">GETリクエスト</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Web APIからデータを取得するためのシンプルなGETリクエストの例を示します。この例では、ポケモンの情報を取得できる<a href=\"https://pokeapi.co/\">PokeAPI</a>を利用してピカチュウの情報を取得します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import requests\n\n# ピカチュウの情報を取得する例\nurl = 'https://pokeapi.co/api/v2/pokemon/pikachu'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print('名前:', data['name'])\n    print('ID:', data['id'])\n    print('重さ:', data['weight'])\n    print('高さ:', data['height'])\n    # ステータスやアビリティなど、さらに詳細な情報も取得可能です\nelse:\n    print('リクエストに失敗しました。ステータスコード:', response.status_code)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>出力は次のとおりです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">名前: pikachu\nID: 25\n重さ: 60\n高さ: 4</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">POSTリクエスト</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>また、データをWeb APIに送信するためのPOSTリクエストの例を示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import requests\n\ndata = {'key': 'value'}\nresponse = requests.post('https://api.example.com/submit', data=data)\nif response.status_code == 200:\n    print('データ送信成功')\nelse:\n    print('リクエストに失敗しました。ステータスコード:', response.status_code)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>requests</code>ライブラリは、PythonでHTTPリクエストを扱う際の強力なツールです。Web APIの利用、Webスクレイピング、データの収集と送信など、様々な場面で有効に活用してみてください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5686538f375d40f48bab0fca60d19251/image-20.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"f747870ae6","publishedAt":"2024-04-10T06:51:01.000Z","title":"【JavaScrip】forEach()メソッドの使い方","contents":"<p>JavaScriptの<code>forEach()</code>メソッドは、配列の各要素に対して何らかの処理をするために使用されます。配列を反復処理する際に非常に便利で、配列の各要素に対して同様の操作を行いたい場合に役立ちます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">forEach()の基本的な使用方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>forEach()</code>メソッドの基本的な構文は以下の通りです：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">array.forEach(function(currentValue, index, arr), thisValue)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>array</code>: 処理を適用したい配列。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>function(currentValue, index, arr)</code>: 配列の各要素に対して実行する関数。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>currentValue</code>: 配列の現在処理中の要素。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>index</code> (任意): 現在処理中の要素のインデックス。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>arr</code> (任意): <code>forEach()</code>が適用されている配列。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>thisValue</code> (任意): 関数実行時に<code>this</code>として使用する値。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">forEach()の使用例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>配列内の各数値に対して何らかの処理を行いたい場合、<code>forEach()</code>を使用して以下のように実装できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let numbers = [1, 2, 3, 4, 5];\n\nnumbers.forEach(function(number) {\n  console.log(number * 2);\n});</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードは配列<code>numbers</code>の各要素を2倍にしてコンソールに表示します。結果は以下のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">2\n4\n6\n8\n10</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">インデックスを使用する例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>配列の各要素とそのインデックスを表示するには、<code>forEach()</code>メソッドの第一引数の関数でインデックスも使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let fruits = ['Apple', 'Banana', 'Cherry'];\n\nfruits.forEach(function(fruit, index) {\n  console.log(`${index}: ${fruit}`);\n});</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードの出力は以下のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">0: Apple\n1: Banana\n2: Cherry</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>thisValue</code>を使用する例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>forEach()</code>メソッドで<code>thisValue</code>を使用すると、コールバック関数内での<code>this</code>の値を指定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function Counter() {\n  this.sum = 0;\n  this.count = 0;\n}\nCounter.prototype.add = function(array) {\n  array.forEach(function(entry) {\n    this.sum += entry;\n    ++this.count;\n  }, this);\n};\n\nconst obj = new Counter();\nobj.add([2, 5, 9]);\nconsole.log(obj.sum); // 16\nconsole.log(obj.count); // 3</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、<code>forEach()</code>メソッドの第二引数に<code>this</code>を渡すことで、コールバック関数内でCounterインスタンスにアクセスしています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">注意点</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>forEach()</code>メソッドは配列の各要素に対して関数を実行しますが、関数からの戻り値は無視されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>break</code>や<code>continue</code>文を<code>forEach()</code>ループの中で直接使用することはできません。全ての要素を反復処理したい場合に適しています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>既存の配列を変更したい場合以外では、<code>map()</code>や<code>filter()</code>のような他の配列メソッドの使用が推奨される場合があります。これらのメソッドは新しい配列を返します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/1d0f988a1cda42df8b1314a8b6c2c950/image-8.webp","categories":["eda71746c0"],"tags":["3c7b502254"]},{"id":"3635a91e3d","publishedAt":"2024-04-10T20:44:23.000Z","title":"TypeScriptとは？〜JavaScriptと異なる静的型付け言語〜","contents":"<p>TypeScriptはMicrosoftによって開発されたオープンソースのプログラミング言語です。JavaScriptに静的型付け機能を追加する形で設計されており、大規模なアプリケーションの開発に適しています。TypeScriptはJavaScriptと完全に互換性があり、JavaScriptプログラムはTypeScriptとしても機能します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">TypeScriptの主な特徴</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":272,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c76f08647ac041b7809430a092e31bc7/typescript-1024x538.webp\" alt=\"TypeScript\" class=\"wp-image-272\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>静的型付け</strong>: 変数、関数の引数、戻り値に型を定義できます。これにより、コンパイル時に型の不一致などの問題を検出しやすくなります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>クラスベースのオブジェクト指向</strong>: TypeScriptはクラス、インターフェース、継承など、オブジェクト指向プログラミングをサポートしています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ES6機能とその先のJavaScriptの機能</strong>: TypeScriptはES6の機能（アロー関数、プロミスなど）をサポートしており、さらにそれ以上の最新機能も利用できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>クロスプラットフォーム</strong>: どのJavaScriptエンジン上でも動作するため、ブラウザ、Node.js、または他の任意の場所で実行できます。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScriptとの違い〜静的型付け機能とは</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>静的型付け（Static Typing）機能とは、プログラムのコンパイル時（実行前）に変数や関数の引数、戻り値などのデータ型を決定し、チェックする機能のことです。ここにJavaScriptとの違いがあります。この機能により、型の不一致によるエラーを早期に発見し、修正することが可能になります。静的型付けは、大規模な開発やチームでの開発において特に有効です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>静的型付け言語では、変数や関数を定義する際にデータ型を明示的に指定する必要があります。例えば、整数型の変数を宣言する場合、その変数が整数値のみを受け取ることがコンパイラによって保証されます。このため、実行時に型関連のエラーが発生するリスクが減少します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":273,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5307742e7ace44f490ae3c8e78f89ac4/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-11-14.40.18-1024x225.webp\" alt=\"TypeScript 型の指定\" class=\"wp-image-273\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>例えば、データ型には以下のようなものがあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>boolean</strong>: 真偽値を表し、<code>true</code>または<code>false</code>の値を持ちます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>number</strong>: 数値を表し、浮動小数点数を含む全ての数を表現できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>string</strong>: 文字列を表し、テキストデータを格納するために使用されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Array</strong>: 同じ型の要素の集合を表します。<code>number[]</code>や<code>Array&lt;number&gt;</code>のように表記します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuple</strong>: 固定長の配列を表し、各要素の型が指定されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>enum</strong>: 列挙型で、一連の固定値の集合を定義するのに使います。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>any</strong>: 任意の型の値を許可します。型チェックを無効にしたい場合に使用します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>void</strong>: 何も返さない関数の戻り値の型として使用します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>null</strong>と<strong>undefined</strong>: TypeScriptでは、これらも型として扱います。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>never</strong>: 決して発生しない値の型です。例えば、常に例外を投げる関数の戻り値の型として使用します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>TypeScriptでデータ型を指定する際は、次のコードのように記述します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"typescript\" class=\"language-typescript\">let isDone: boolean = false;<br>let decimal: number = 6;<br>let color: string = \"blue\";<br>let list: number[] = [1, 2, 3];<br>let tuple: [string, number] = [\"hello\", 10]; // Tuple<br></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>静的型付けの特徴は以下のとおりです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>型安全性</strong>: コンパイル時に型の検査を行うため、実行時の型エラーを防ぐことができます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>早期エラー発見</strong>: コードの実行前にエラーを発見できるため、開発効率が向上します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>自己文書化</strong>: コードに型が明記されているため、変数や関数の使用方法が明確になり、コードの可読性が向上します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>最適化の向上</strong>: コンパイラが型情報を利用して最適化を行うことができるため、実行効率が向上する場合があります。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">静的型付け言語の例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>TypeScriptの他に、静的型付け言語には以下のようなものがあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>C/C++</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Swift</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Kotlin</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>対照的に、動的型付け（Dynamic Typing）言語では、変数や関数の型が実行時に決定されます。PythonやRubyなどが動的型付け言語の例です。動的型付け言語は柔軟性が高い一方で、型エラーが実行時まで発見されない可能性があります。それに対して、静的型付け言語は型の安全性とエラーの早期発見に優れていますが、型を厳密に管理する必要があるため、記述が煩雑になる可能性があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">TypeScriptを使ってみる</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからは、実際に簡単なコードを用いてTypeScriptを体験してみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 環境セットアップ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Node.jsのインストール</strong>: TypeScriptをコンパイルするためにはNode.jsが必要です。<a href=\"https://nodejs.org/\">Node.jsの公式サイト</a>からインストーラをダウンロードしてインストールしてください。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>TypeScriptのインストール</strong>: コマンドラインまたはターミナルで以下のコマンドを実行して、TypeScriptコンパイラをインストールします。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"typescript\" class=\"language-typescript\">   npm install -g typescript</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. 基本的なTypeScriptファイルの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>TypeScriptファイルの作成</strong>: <code>hello.ts</code> という名前のTypeScriptファイルを作成し、以下の内容を追加します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"typescript\" class=\"language-typescript\">   function sayHello(name: string) {\n       return `Hello, ${name}!`;\n   }\n\n   console.log(sayHello(\"World\"));</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ここで、<code>name</code>パラメータに<code>string</code>型を指定しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. TypeScriptのコンパイル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ターミナルで以下のコマンドを実行し、TypeScriptファイルをJavaScriptにコンパイルします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"typescript\" class=\"language-typescript\">   tsc hello.ts</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これにより、同じディレクトリに<code>hello.js</code>ファイルが生成されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>実行</strong>: </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Node.jsを使ってコンパイルされたJavaScriptファイルを実行します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"typescript\" class=\"language-typescript\">   node hello.js</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>出力されるメッセージ<code>Hello, World!</code>を確認できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>このチュートリアルは、TypeScriptの基本的な使用方法を紹介するためのものです。TypeScriptには多くの高度な機能がありますので、詳細については<a href=\"https://www.typescriptlang.org/docs/\">公式ドキュメント</a>を参照してください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b6e384df8d1d44c0aafb4c620114a9c4/image-32.webp","categories":["eda71746c0","969545dde1"],"tags":["969545dde1"]},{"id":"3a1dfb05d7","publishedAt":"2024-04-13T05:18:37.000Z","title":"【完全保存版】JavaScriptのalert完全ガイド：使い方と応用テクニック","contents":"<p>こんにちは！この記事では、<strong>JavaScriptの</strong>alert<strong>関数</strong>について、基本から応用まで徹底的に解説します。初心者の方から、既にJavaScriptを使い慣れている方まで、alertの使い方や注意点、実践的なテクニックを学ぶことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>目次</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1. <a href=\"#alert%E9%96%A2%E6%95%B0%E3%81%A8%E3%81%AF\">alert関数とは</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2. <a href=\"#alert%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9\">alertの基本的な使い方</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>3. <a href=\"#%E8%A4%87%E6%95%B0%E8%A1%8C%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">複数行のメッセージを表示する方法</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4. <a href=\"#%E5%A4%89%E6%95%B0%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E8%A1%A8%E7%A4%BA\">変数を使ったメッセージ表示</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>5. <a href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E3%82%92%E6%B4%BB%E7%94%A8%E3%81%99%E3%82%8B\">テンプレートリテラルを活用する</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>6. <a href=\"#alert%E3%81%AE%E4%BD%BF%E7%94%A8%E4%B8%8A%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9\">alertの使用上の注意点</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>7. <a href=\"#%E4%BB%96%E3%81%AE%E3%83%80%E3%82%A4%E3%82%A2%E3%83%AD%E3%82%B0%E9%96%A2%E6%95%B0%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\">他のダイアログ関数との比較</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>8. <a href=\"#%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E4%BE%8B\">実践的な使用例</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>9. <a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>10. <a href=\"#%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E8%B3%AA%E5%95%8Ffaq\">よくある質問（FAQ）</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>alert関数とは</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>alert<strong>関数</strong>は、ユーザーにメッセージを表示するためのJavaScriptの組み込み関数です。ブラウザのダイアログボックスを使用して、簡単に情報を伝えることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">alert('Hello World！');</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>alertの基本的な使い方</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>alert関数の使い方はとてもシンプルです。表示したいメッセージを文字列として関数に渡すだけです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">alert('こんにちは！これはJavaScriptのアラートです。');</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":277,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/bf4f6ffe6dbe4be0b6d1dc5410393681/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-13-23.12.33.webp\" alt=\"JavaScript_alert\" class=\"wp-image-277\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• メッセージはシングルクォート ' ' かダブルクォート \" \" で囲みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• 日本語もそのまま表示可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>複数行のメッセージを表示する方法</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数行にわたるメッセージを表示したい場合、**\\n（改行文字）**を使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">alert('こんにちは！\\n今日は良い天気ですね。');</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">こんにちは！\n今日は良い天気ですね。</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>変数を使ったメッセージ表示</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>変数を使って動的なメッセージを表示することもできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let userName = '太郎';\nalert('こんにちは、' + userName + 'さん！');</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• + 演算子で文字列と変数を連結します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• 変数内の値がメッセージに反映されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>テンプレートリテラルを活用する</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>テンプレートリテラル</strong>を使うと、より直感的に文字列と変数を組み合わせることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let userName = '花子';\nalert(`こんにちは、${userName}さん！`);</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• バッククォート ` で文字列を囲みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• ${} の中に変数や式を入れることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>alertの使用上の注意点</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>• <strong>ユーザー体験への影響：</strong> alertを使用すると、スクリプトの実行が一時停止し、ユーザーの操作が中断されます。頻繁な使用は避けましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <strong>モバイルデバイスでの表示：</strong> モバイルブラウザでは表示が不安定になる場合があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <strong>デバッグ用途には不向き：</strong> デバッグには console.log() の使用をおすすめします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>alert以外のダイアログ関数との比較</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>confirm関数</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ユーザーに <strong>「OK」</strong> と <strong>「キャンセル」</strong> の選択肢を提供します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">if (confirm('本当に削除しますか？')) {\n// OKが押された場合の処理\n} else {\n&nbsp; // キャンセルが押された場合の処理\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>prompt関数</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ユーザーから入力を受け取ります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let age = prompt('年齢を入力してください：');\nalert(`あなたの年齢は${age}歳です。`);</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">comfirm関数の<strong>実践的な使用例</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>フォーム送信時の確認</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&nbsp; &lt;title&gt;フォーム送信確認&lt;/title&gt;\n&nbsp; &lt;script&gt;\n&nbsp; &nbsp; function confirmSubmission() {\n&nbsp; &nbsp; &nbsp; return confirm('フォームを送信してもよろしいですか？');\n&nbsp; &nbsp; }\n&nbsp; &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&nbsp; &lt;form onsubmit=\"return confirmSubmission();\"&gt;\n&nbsp; &nbsp; &lt;label&gt;お名前：&lt;input type=\"text\" name=\"name\"&gt;&lt;/label&gt;\n&nbsp; &nbsp; &lt;input type=\"submit\" value=\"送信\"&gt;\n&nbsp; &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>実行結果：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":397,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e2ec66c0907343ebb6ab9098bd484bc4/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-20.01.34-1024x222.webp\" alt=\"JavaScript_ダイアログ\" class=\"wp-image-397\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>説明：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• フォームが送信される前に confirm ダイアログが表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• ユーザーが「OK」を選択した場合のみフォームが送信されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>まとめ</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>alert関数は簡単にメッセージを表示できる便利な機能ですが、ユーザー体験を考慮して使用には注意が必要です。他のダイアログ関数やモダルウィンドウの活用も検討しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>よくある質問（FAQ）</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Q1: alertとconsole.logの違いは何ですか？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> alertはユーザーにポップアップでメッセージを表示しますが、console.logは開発者ツールのコンソールにメッセージを出力します。ユーザーへの通知には alert、デバッグには console.log を使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Q2: alertでHTMLを表示できますか？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> いいえ、alert関数はプレーンテキストのみを表示します。HTMLを表示したい場合は、モーダルウィンドウや他のライブラリを使用する必要があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Q3: モバイルブラウザでのalertの挙動は？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> モバイルブラウザでも alertは動作しますが、ユーザー体験を損なう可能性があるため、使用は控えたほうが良いでしょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>この記事が役に立ったと思ったら、ぜひシェアしてください！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>関連記事</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-confirm/\">JavaScriptのconfirm関数の使い方</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-prompt/\">JavaScriptのprompt関数でユーザー入力を取得する方法</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-modal/\">モダンなモーダルウィンドウの実装方法</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>参考リンク</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://developer.mozilla.org/ja/docs/Web/API/Window/alert\">MDN Web Docs - window.alert()</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://developer.mozilla.org/ja/docs/Web/API/Window/prompt\">JavaScriptでユーザーとの対話を行う</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>著者について</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ウェブ開発者として長年の経験を持ち、JavaScriptを中心にフロントエンド技術の情報発信を行っています。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/19557d6d6a3240959c46d95c2a35a03b/narityan_the_computer_prompt_including_the_word_alert_black_and_5da029e0-bcb3-45a8-a3f8-d5f27fbb2410.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"7f0a22117f","publishedAt":"2024-04-13T06:43:03.000Z","title":"JavaScriptのmap()関数の使い方","contents":"<p>JavaScriptの<code>map</code>関数は、配列の各要素に対して関数を適用し、その結果から新しい配列を作成する非常に便利な高階関数です。この関数の利点は、元の配列を変更せずに、新しい配列を生成できることにあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">map関数の基本構文</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>map</code>関数の基本構文は以下の通りです：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const newArray = array.map(function(element, index, array) {\n    // ここに変換のロジックを記述\n    return newValue;\n});</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>element</code>は配列の現在処理している要素、<code>index</code>はその要素のインデックス、<code>array</code>は<code>map</code>が呼び出された元の配列です。この関数は各要素に対して呼び出され、その戻り値が新しい配列の対応する要素になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">map関数の使用例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからは具体的にmap関数を使っていきましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例1: 各要素を二乗する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここでは、すでにある「numbers」という配列から、各要素を二乗した新たな配列をmap関数を用いて生成します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const numbers = [1, 2, 3, 4];\nconst squares = numbers.map(function(number) {\n    return number * number;\n});\n\nconsole.log(squares); // 出力: [1, 4, 9, 16]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例2: オブジェクトの配列から特定のプロパティのみを抽出</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>さらに複雑な連想配列で特定のプロパティのみを抽出し、新たな配列を作成してみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const people = [\n    { name: 'Alice', age: 25 },\n    { name: 'Bob', age: 30 },\n    { name: 'Charlie', age: 35 }\n];\n\nconst names = people.map(function(person) {\n    return person.name;\n});\n\nconsole.log(names); // 出力: ['Alice', 'Bob', 'Charlie']</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例3: アロー関数を使用する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ES6では、アロー関数を使用してより簡潔に<code>map</code>を書くことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const numbers = [1, 2, 3, 4];\nconst doubles = numbers.map(number =&gt; number * 2);\n\nconsole.log(doubles); // 出力: [2, 4, 6, 8]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">注意点</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>map</code>は新しい配列を返しますが、元の配列は変更されません。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>元の配列の要素数と新しい配列の要素数は同じになります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>map</code>を使う場面は、配列の各要素に何らかの操作を施して新しい配列を作りたい場合に適しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>このように、<code>map</code>関数は配列のデータを加工する際に非常に強力なツールであり、関数型プログラミングのアプローチを取り入れる際に重宝します。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b4f72f31dd534733862b19d828555af8/narityan_the_computer_prompt_including_the_word_map_black_and_w_e81c342c-eff6-4ed5-8be1-e34db4d36968.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"1e68ed4e3d","publishedAt":"2024-04-13T06:59:33.000Z","title":"JavaScriptにおける連想配列の実装","contents":"<p>JavaScriptにおける連想配列（またはマップ）は、キーと値のペアを持つ配列です。JavaScriptでは、連想配列はJavaScriptオブジェクト、あるいは<code>Map</code>オブジェクトとして提供されています。ここでは、これらの概念について詳しく見ていきます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScriptオブジェクトとしての連想配列</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScriptのオブジェクトは、プロパティ名と値のペアを保持するデータ構造です。（具体的には{プロパティ名：値}）<br>プロパティ名は文字列（または<code>Symbol</code>）である必要があり、このプロパティ名に対応する値を格納します。オブジェクトを使った連想配列の利用例を見てみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let person = {\n    name: \"Alice\",\n    age: 25,\n    job: \"Engineer\"\n};\n\nconsole.log(person.name); // 出力: Alice\nconsole.log(person['age']); // 出力: 25\n\n// 新しいキーと値の追加\nperson['location'] = \"Tokyo\";\nconsole.log(person.location); // 出力: Tokyo</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">オブジェクトの利点と制限</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>利点</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>シンプルで直感的な構文。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>キーを動的に追加および削除可能。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>JSONとの互換性が良い。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>制限</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>キーとして文字列または<code>Symbol</code>のみ使用可能。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>オブジェクトのキーは順序を保持しない。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>Object</code>には既定のメソッドやプロパティが含まれており、予期せぬ挙動を引き起こす可能性がある。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>Map</code>オブジェクトとしての連想配列</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ES6以降、JavaScriptでは<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code>オブジェクト</a>が導入され、より柔軟でパワフルな連想配列の機能を提供しています。<code>Map</code>は任意の値（オブジェクトやプリミティブ値を含む）をキーとして使用できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let map = new Map();\nmap.set('name', 'Bob');\nmap.set('age', 30);\n\nconsole.log(map.get('name')); // 出力: Bob\nconsole.log(map.has('age')); // 出力: true\nmap.delete('age');\nconsole.log(map.has('age')); // 出力: false\n\n// キーとしてオブジェクトを使用\nconst keyObject = { id: 1 };\nmap.set(keyObject, 'Associated value');\nconsole.log(map.get(keyObject)); // 出力: Associated value</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>Map</code>の利点</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>キーとして任意の型の値を使用できる。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>キーの挿入順序が保持される。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>キーの存在を<code>.has()</code>メソッドで確認可能。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>サイズを<code>.size</code>プロパティで簡単に取得できる。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScriptにおける連想配列の実装は、用途に応じて<code>Object</code>または<code>Map</code>を選択することにより、データの管理と操作の柔軟性が向上します。単純な構造であればオブジェクトを、より複雑で多様なキーを必要とする場合は<code>Map</code>を利用すると良いでしょう。この選択は、アプリケーションのパフォーマンスとメンテナンスの観点からも重要です。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/6107f8f633cc47c0a4b4f9fd8c114322/narityan_the_computer_prompt_including_the_word__black_and__89a45dc3-5067-4d8b-8dc1-ed6ed46622eb.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"d7cdaa5ca0","publishedAt":"2024-04-13T15:51:13.000Z","title":"JavaScriptで配列に追加する３つの方法","contents":"<p>JavaScriptで配列に要素を追加する方法は、主に３つあります。本記事では、それぞれの方法と使用例を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <code>push()</code> メソッド</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>最もメジャーな配列への追加メソッドはpush()になります。<code>push()</code> メソッドは、<strong>配列の末尾</strong>に一つまたは複数の要素を追加し、新しい配列の長さを返します。使用例は以下のとおりです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let fruits = ['apple', 'banana'];\nlet newLength = fruits.push('orange');\nconsole.log(fruits);  // 出力: ['apple', 'banana', 'orange']\nconsole.log(newLength);  // 出力: 3</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <code>unshift()</code> メソッド</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>unshift()</code> メソッドは、<strong>配列の先頭</strong>に一つまたは複数の要素を追加します。追加後の配列の新しい長さを返します。<code>push()</code>とは異なり、要素を配列の先頭に追加するのが特徴です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let numbers = [2, 3, 4];\nlet newLength = numbers.unshift(1);\nconsole.log(numbers);  // 出力: [1, 2, 3, 4]\nconsole.log(newLength);  // 出力: 4</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. スプレッド演算子を使用する</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ES6から導入されたスプレッド演算子（<code>...</code>）を使用すると、配列内で既存の配列を展開して新しい要素を追加することができます。これにより、既存の配列を変更せずに新しい配列を作成することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let initialArray = ['a', 'b'];\nlet newArray = [...initialArray, 'c', 'd'];\nconsole.log(newArray);  // 出力: ['a', 'b', 'c', 'd']</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この方法は、元の配列を変更せずに新しい配列を作成する場合に特に便利です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>push()</code> と <code>unshift()</code> は元の配列を変更（ミューテート）しますが、スプレッド演算子を使用した方法は新しい配列を作成します。これらの方法を適切に使い分けることで、JavaScriptでの配列操作をより効率的に行うことができます。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/62d9e308638f427d8c01714adf4038b8/narityan_the_computer_prompt_including_the_word_push_black_and__4661e36c-e5a0-42e1-b595-4bdbb8211b43.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"09895de040","publishedAt":"2024-04-13T16:23:04.000Z","title":"【 JavaScript】アロー関数で簡単に関数を記述する","contents":"<p>JavaScriptのアロー関数（arrow function）は、ES6（ECMAScript 2015）で導入された、より簡潔で短い構文で関数を書くための機能です。従来の関数表現と比べてシンプルで、<code>this</code>の挙動も異なる特徴を持っています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">アロー関数の基本構文</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScriptのアロー関数で使用される <code>=&gt;</code> 記号は、いわゆる \"アロー\" または \"矢印\" であり、従来の関数キーワード <code>function</code> を置き換えるものです。この記号は、関数の引数と関数の本体を区切る役割を持っています。具体的には、左側に引数を配置し、右側に関数の実行文または返り値を記述します。アロー関数の特徴は、通常の関数と比較して次のような違いがあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>構文簡略化</strong>：<code>=&gt;</code> 記号は、JavaScriptにおいてより短くシンプルな関数を記述する方法を提供します。これにより、コードが読みやすくなり、特に小さな関数やコールバック関数においてその効果を発揮します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>this</code>の扱い</strong>：アロー関数の最も重要な特徴の一つは、<code>this</code>がレキシカルに束縛されることです。これは、アロー関数内の<code>this</code>が、アロー関数が定義された時の周囲のコンテキスト（親スコープ）を引き継ぐという意味です。これにより、従来の関数で頻繁に発生していた<code>this</code>の問題を解消し、特にイベントハンドラやタイマー処理で便利に使われます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>アロー関数は以下のように表されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const functionName = (parameter1, parameter2, ..., parameterN) =&gt; {<br>  // 関数の本体<br>  return expression;<br>};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">パラメータが一つの場合</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>パラメータが一つのみの場合、括弧すら省略することができ、次のようなシンプルなものとなります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const square = x =&gt; x * x;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">関数本体が一行の式だけの場合</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>関数の本体が一つの式のみで構成されている場合、中括弧（<code>{}</code>）と<code>return</code>を省略することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const add = (a, b) =&gt; a + b;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">アロー関数における<code>this</code>の挙動</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>アロー関数のもう一つの重要な特徴は、<code>this</code>キーワードの挙動です。従来の関数では、<code>this</code>は関数が呼び出される文脈によって異なる値を取ります（たとえば、メソッドとして呼び出される場合、そのオブジェクトを指す）。しかし、アロー関数では<code>this</code>は外側のスコープ（レキシカルスコープ）からその値を継承します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">例: オブジェクト内でのアロー関数</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const person = {\n  name: 'Alice',\n  greet: function() {\n    console.log(`Hello, ${this.name}`);\n    setTimeout(() =&gt; {\n      console.log(`Hello again, ${this.name}`); // ここでの `this` は person オブジェクトを指す\n    }, 1000);\n  }\n};\n\nperson.greet();</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">アロー関数を使うタイミング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>アロー関数は以下のような場面で便利です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>小さな関数や一時的な関数を簡潔に書く場合。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>コールバック関数やクロージャで外部スコープの<code>this</code>を使用する場合。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>一方で、アロー関数には以下のような制限があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>コンストラクタとして使用できない（<code>new</code>キーワードでの使用が不可能）。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>arguments</code>オブジェクトを持たない。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>メソッド関数としては使用する際に注意が必要（オブジェクトリテラル内で使う場合に<code>this</code>が期待通りに動作しないことがあります）。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>アロー関数はこれらの特性を理解した上で適切に使い分けることが重要です。より読みやすく、効率的なコードを書くための強力なツールとなり得ます。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/205de018e99a4d549db433a4d25dede0/image-3.jpg","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"6db6eb4af1","publishedAt":"2024-04-15T06:15:08.000Z","title":"JavaScriptのfind関数について","contents":"<p>JavaScriptの<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find</code>関数</a>は、配列内の要素を検索し、合格する最初の要素だけを返します。本記事ではfind関数の基本的な構文と利便性がわかる使用例を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>find</code>関数の構文</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>find</code>メソッドは、配列上(<code>array</code>)で呼び出され、次のような形式をとります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const found = array.find(function(element, index, array) {\n    // 条件を満たすロジックをここに記述\n    return true/false; // 条件に合致するかの真偽値を返す\n});</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>element</strong>：配列内の現在処理されている要素。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>index</strong>（オプション）：処理されている要素の配列内のインデックス。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>array</strong>（オプション）：メソッドが呼び出された配列。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">find関数の使用例：商品の検索</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>例えば、次のような商品のリストがあり、特定の条件（ここでは価格が特定の値以下であること）に一致する最初の商品を見つけたい場合に<code>find</code>を使用できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const products = [<br>    { id: 1, name: \"マグカップ\", price: 150 },<br>    { id: 2, name: \"ノートPC\", price: 80000 },<br>    { id: 3, name: \"ペン\", price: 100 },<br>    { id: 4, name: \"クッキー\", price: 80 }<br>];</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>価格が100円以下の最初の商品を見つけるためにfind関数を使うと、以下のようにコードを書くことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const cheapProduct = products.find(product =&gt; product.price &lt;= 100);\nconsole.log(cheapProduct);  // 出力: { id: 3, name: \"ペン\", price: 100 }</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、<code>find</code>関数が配列<code>products</code>を走査し、価格が100円以下の最初の商品を返します。この場合、<code>\"ペン\"</code>がその条件を満たす最初の商品です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">特徴とまとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>効率的な検索</strong>：<code>find</code>メソッドは条件に合致する最初の要素を見つけた時点で処理を停止します。これにより、条件に合致する要素が早期に見つかる場合、無駄な処理を省略できるため効率的です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>直感的な結果</strong>：条件に合致する要素が存在しない場合、<code>find</code>メソッドは<code>undefined</code>を返します。これにより、条件に合う要素の有無を簡単にチェックできます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">注意点</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>find</code>メソッドは、条件に合致する<strong>最初の</strong>要素のみを返すため、複数の要素が条件を満たす場合でもそれ以降の要素は無視されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>大きな配列を扱う場合や、条件に合致する要素が配列の後半にある場合は、パフォーマンスに影響を及ぼす可能性があります。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a88fdacb8d8b431a81aa4f8f451e99a0/narityan_the_computer_prompt_including_the_word_find_black_and__d72e1da5-02d6-4969-bef5-2aad185ca1a9.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"9cfd3c755b","publishedAt":"2024-04-15T07:01:15.000Z","title":"【JSON.stringify】JavaScriptオブジェクトをJSON文字列へ変換する強力なメソッド","contents":"<p><code>JSON.stringify()</code> は、JavaScript オブジェクトを JSON 文字列に変換するための非常に便利なメソッドです。 本記事ではWeb 開発で広く使われているこの関数について基本的な使い方を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong><code>JSON.stringify()</code> </strong>の基本的な使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>JSON.stringify()</code> メソッドは、変換したい JavaScript のオブジェクトを引数として受け取ります。例えば、次の例のように辞書型のデータを簡単にJSON文字列に変換することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const object = {name: \"Alice\", age: 25};\nconst jsonString = JSON.stringify(object);\nconsole.log(jsonString); // 出力: '{\"name\":\"Alice\",\"age\":25}'</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、JavaScript のオブジェクトを JSON 形式の文字列に変換しています。結果は、プロパティ名がダブルクォーテーションで囲まれた正規の JSON 文字列です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">オプションのパラメータ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>JSON.stringify()</code> は、オプションで追加の二つのパラメータを取ることができます：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>リプレーサー (replacer)</strong> - これは関数または値の配列であり、オブジェクトのどのプロパティを含めるかをコントロールできます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>スペース (space)</strong> - これは出力フォーマットを整形し、見やすくするために使用される文字列または数字です。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">リプレーサーの使用例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>JSON.stringify()</code> メソッドが提供するリプレーサー（replacer）機能は、オブジェクトのプロパティをどのように処理するかを細かくコントロールするためのものです。リプレーサーは関数（あるいは配列）の形として、オプションの第二引数として <code>JSON.stringify()</code> に渡すことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>リプレーサーが関数の場合、二つの引数を取ることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>key</strong>: 処理中のプロパティのキー。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>value</strong>: そのプロパティの値。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>この関数の戻り値は、JSON文字列に含める値を決定します。特定の値を除外したい場合は <code>undefined</code> を返し、その他の場合は新しい値を返します（プロパティを変更して返すことも可能です）。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const person = {\n    name: \"Alice\",\n    age: 25,\n    job: \"Engineer\"\n};\n\nconst replacerFunction = (key, value) =&gt; {\n    if (key === \"age\") {\n        return undefined; // \"age\" プロパティを無視\n    }\n    return value;\n};\n\nconst jsonString = JSON.stringify(person, replacerFunction);\nconsole.log(jsonString); // 出力: '{\"name\":\"Alice\",\"job\":\"Engineer\"}'</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">スペースパラメータの使用例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>スペースパラメータを使用して、出力される JSON 文字列の整形を行うことができます：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const jsonString = JSON.stringify(person, null, 4);\nconsole.log(jsonString);\n// 出力:\n// {\n//     \"name\": \"Alice\",\n//     \"age\": 25,\n//     \"job\": \"Engineer\"\n// }</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、<code>4</code> は各レベルのインデントに 4 スペースを使用することを意味します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">例外と特殊ケース</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>undefined</code>, 関数, シンボルは JSON で有効な値ではないため、<code>JSON.stringify()</code> では無視されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>循環参照を含むオブジェクトは、<code>JSON.stringify()</code> でエラーを引き起こします。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const object = {};\nobject.myself = object;\nJSON.stringify(object); // TypeError: Converting circular structure to JSON</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このように、<code>JSON.stringify()</code> はオブジェクトを JSON 形式の文字列に変換する強力なツールですが、使用する際には特定のデータ型や構造に注意する必要があります。これにより、データのシリアライゼーションと通信が容易になります。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9a324193d1984dbcadd52600f31cd78d/image-15.webp","categories":["eda71746c0"],"tags":["eda71746c0","02bd175f32"]},{"id":"983bd614bb","publishedAt":"2024-04-16T23:09:05.000Z","title":"機械学習ライブラリ【scikit-learn】のインストール方法","contents":"<p><code>scikit-learn</code> はPythonの機械学習ライブラリで、<code>pip/conda</code>を使って簡単にインストールできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">pipを使う場合</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>scikit-learnのインストール手順は次のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>まず、Pythonがインストールされていることを確認してください。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>コマンドプロンプト（Windowsの場合）やターミナル（macOSやLinuxの場合）を開きます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>以下のコマンドを入力して、<code>scikit-learn</code> をインストールします：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   pip install scikit-learn</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">condaを使う方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>AnacondaやMinicondaでPythonを動かしている場合、condaを使って <code>scikit-learn</code> をインストールできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Anaconda Prompt（Windowsの場合）やターミナル（macOSやLinuxの場合）を開きます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>以下のコマンドを入力して、<code>scikit-learn</code> をインストールします：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   conda install scikit-learn</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これで <code>scikit-learn</code> のインストールが完了します。ただし、Linuxのサードパーティーディストリビューションを使用している場合は<a href=\"https://scikit-learn.org/stable/install.html\">公式ページを参照</a>してください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/800a326a0af8445ba601fb3cdf2b7dde/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-17-17.08.14.png","categories":["11a4a60b51"],"tags":["11a4a60b51","197b0ff11c"]},{"id":"d874e4e4a5","publishedAt":"2024-04-18T21:50:30.000Z","title":"【JavaScript】値のない変数「undefined」について","contents":"<p>JavaScriptにおける<code>undefined</code>は、値が割り当てられていない変数を示す特殊なデータ型です。undefinedとは、変数が宣言されているもののまだ値が与えられていない状態を表します。また、関数が値を返さない場合においてもundefinedが戻り値となります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">undefinedの例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからはundefinedがどのような場合に返ってくるのかを見てみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>変数の宣言のみが行われた場合：</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">   let a;\n   console.log(a); // undefined</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ここでは<code>a</code>が宣言されていますが、値が割り当てられていないため、<code>undefined</code>が出力されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>オブジェクトの存在しないプロパティにアクセスした場合：</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">   const obj = { name: \"Alice\" };\n   console.log(obj.age); // undefined</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>obj</code>オブジェクトには<code>age</code>プロパティが存在しないため、<code>undefined</code>が返されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>関数が値を返さない場合：</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">   function test() {}\n   console.log(test()); // undefined</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>test</code>関数は何も返さないため、その戻り値は<code>undefined</code>になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">nullとundefinedの違い</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>undefined</code>とよく比較される<code>null</code>もJavaScriptには存在しますが、<code>null</code>は「何もない」状態を意図的に表現するために使われます。一方、<code>undefined</code>は変数に値がまだ割り当てられていないことを示すために自動的に設定されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>JavaScriptでの<code>null</code>と<code>undefined</code>は似て非なるものです。以下にその違いを説明します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>意味の違い</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>undefined</code></strong>: 変数が宣言されたが、まだ値が割り当てられていない状態を指します。この場合は自動的に設定されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>null</code></strong>: プログラマが意図的にに「値がない」ことを表すために設定する値です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>型</strong>の違い</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>undefined</code></strong>は自身の型を持っています（<code>undefined</code>）。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>null</code></strong>はオブジェクト型として扱われます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>比較と演算</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>null</code>と<code>undefined</code>は <code>==</code>（等価演算子）で比較すると等しいとみなされますが、<code>===</code>（厳密等価演算子）を使うと異なるとみなされます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">   console.log(null == undefined); // true\n   console.log(null === undefined); // false</code></pre>\n<!-- /wp:code -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b71bc5a1f83743ca8745b70a4d20d22e/narityan_beautiful_woman_is_denying_something_black_and_white_l_85a2d8c5-97ce-47a0-b177-e3688ed49705.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"38b83caefa","publishedAt":"2024-04-18T22:08:02.000Z","title":"【JavaScript】toLocaleString()で地域に適したデータに変換する","contents":"<p>JavaScriptの<code>toLocaleString()</code>メソッドは、データをその地域に適した形式で表現するためのツールです。このメソッドは、<code>Number</code>、<code>Date</code>、および<code>Array</code>オブジェクトに対して使用でき、地域設定に基づいた形式でデータを文字列に変換します。本記事では、<code>toLocaleSting()</code>の用途と使用例を解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. 数値のフォーマット（<code>Number.prototype.toLocaleString()</code>）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>数値を地域に合わせた形式にする場合を見てみましょう。例えば、各国の通貨に変換したいとき、<code>toLocaleString()</code>を使うことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let number = 123456.789;\n\n// アメリカ合衆国の通貨形式\nconsole.log(number.toLocaleString('en-US', { style: 'currency', currency: 'USD' }));\n// 出力: $123,456.79\n\n// ドイツの数値形式\nconsole.log(number.toLocaleString('de-DE'));\n// 出力: 123.456,789\n\n// 日本の通貨形式\nconsole.log(number.toLocaleString('ja-JP', { style: 'currency', currency: 'JPY' }));\n// 出力: ￥123,457</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. 日付のフォーマット（<code>Date.prototype.toLocaleString()</code>）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>日付オブジェクトを地域の日付および時刻の形式に変換する際に使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let date = new Date();\n\n// アメリカ合衆国の日付と時刻の形式\nconsole.log(date.toLocaleString('en-US'));\n// 出力: 4/19/2024, 12:00:00 PM\n\n// イタリアの日付形式\nconsole.log(date.toLocaleString('it-IT'));\n// 出力: 19/4/2024, 12:00:00\n\n// 日本の日付と時刻の形式\nconsole.log(date.toLocaleString('ja-JP'));\n// 出力: 2024/4/19 12:00:00</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. 配列のフォーマット（<code>Array.prototype.toLocaleString()</code>）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>配列内の各要素を地域設定に基づいて文字列に変換し、それらを結合して返します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let dates = [new Date(2024, 3, 19), new Date(2024, 11, 24)];\nconsole.log(dates.toLocaleString('ja-JP'));\n// 出力: 2024/4/19, 2024/12/24\n\nlet numbers = [123456, 7890];\nconsole.log(numbers.toLocaleString('de-DE'));\n// 出力: 123.456, 7.890</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">使い方のポイント</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>オプションの指定</strong>：<code>toLocaleString()</code>では第二引数にオプションオブジェクトを指定することで、変換のスタイル（通貨、パーセント、数値）、使用する通貨タイプ、最小・最大小数点以下の桁数などを細かく設定できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>パフォーマンス</strong>：<code>toLocaleString()</code>メソッドは内部的に地域情報を処理するため、特に大量のデータを処理する場合にはパフォーマンスに影響を与える可能性があります。使用する際は適切な場面を選ぶことが重要です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5686538f375d40f48bab0fca60d19251/image-20.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"48a1706eca","publishedAt":"2024-04-22T06:05:16.000Z","title":"【JavaScript】for文の構文","contents":"<p>プログラミングで最も使用頻度の高い構文の一つであるfor文。本記事ではJavaScriptにおけるfor文の基本的使い方について解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScriptにおけるfor文の書き方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>基本的なfor文においては、３つのパラメーターが指定されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">for (初期化式; 条件式; 増分式) {\n    // 繰り返したい処理\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>初期化式</strong>：ループの開始前に一度だけ実行される式です。ここでループカウンタの初期値を設定します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>条件式</strong>：この式が<code>true</code>を返す限り、ループは続行されます。<code>false</code>を返すとループは終了します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>増分式</strong>：ループの各反復の終わりに実行される式で、通常はカウンタの増減に使用されます。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例：1から10までの数を出力</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>上記の構文を用いて簡単なfor文を書いてみます。１〜１０までの数字が表示されるプログラムは次のように書くことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">for (let i = 1; i &lt;= 10; i++) {\n    console.log(i);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ここでは、<code>i</code>が1から始まり、10以下である限りループが続き、各ステップで<code>i</code>が1ずつ増えていきます。<code>i</code>が11になると条件式<code>i &lt;= 10</code>が<code>false</code>になるため、ループは終了します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">for文の応用</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ここからは、もう少し応用的なfor文の使い方を見ていきます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>配列の要素を処理する</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>for文を用いて配列配列の要素を効率的に処理することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">  let fruits = ['apple', 'banana', 'cherry'];\n  for (let i = 0; i &lt; fruits.length; i++) {\n      console.log(fruits[i]);\n  }</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードでは、配列<code>fruits</code>の各要素にアクセスしています。<code>i</code>は0（配列の最初のインデックス）から始まり、配列の長さ未満の間続きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>多重ループ</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>for文のなかにfor文を書くこともできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">  for (let i = 1; i &lt;= 3; i++) {\n      for (let j = 1; j &lt;= 3; j++) {\n          console.log(`i=${i}, j=${j}`);\n      }\n  }</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ここでは二重のfor文を使っています。外側のループが<code>i</code>を1から3まで変化させ、内側のループが<code>j</code>を1から3まで変化させます。このようにして、<code>i</code>と<code>j</code>の全ての組み合わせを出力します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">注意点</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ループ内で条件式がいつか<code>false</code>になるように設計することが重要です。そうしないと無限ループが発生し、プログラムがフリーズする可能性があります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>ループ変数を適切に管理し、予期せぬ範囲外アクセスや変更を避けるために<code>let</code>を使うことが推奨されます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/b6e384df8d1d44c0aafb4c620114a9c4/image-32.webp","categories":["eda71746c0"]},{"id":"226f76b55a","publishedAt":"2024-04-22T06:21:00.000Z","title":"JavaScriptでコメントアウトをする２つの方法","contents":"<p>JavaScriptでコメントアウトする方法は2つあります。コードの説明を書いたり、コードを無効にしたりするのにコメントを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">一行コメント</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>一行コメント</strong>においては、<code>//</code>を使用します。この記号以降の同じ行上のテキストはすべてコメントとして扱われます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">   // これはコメントです\n   console.log(\"Hello, world!\"); // この後ろもコメントです</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">複数行コメント</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>複数行コメント</strong>においては<code>/*</code> と <code>*/</code> で囲まれた範囲をコメントアウトします。これは複数行にわたるコメントを挿入するときに使えます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">   /*\n   これは複数行のコメントです\n   複数の行にわたって記述できます\n   */\n   console.log(\"Hello, world!\");</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これらの方法を使って、コード内で必要な場所に説明を加えたり、デバッグ時に特定のコード行を一時的に無効にしたりできます。コメントはプログラムの実行には影響しません。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/1d0f988a1cda42df8b1314a8b6c2c950/image-8.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"8efbbe9bc1","publishedAt":"2024-04-27T06:02:19.000Z","title":"アロー関数におけるThisの使い方","contents":"<p>JavaScriptのアロー関数における<code>this</code>は、通常の関数における<code>this</code>を違うものを指すことがあります。本記事では、便利なアロー関数におけるthisの使い方を見てみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">アロー関数とは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>そもそもアロー関数とはなんでしょうか。アロー関数はJavaScriptで関数を簡潔に書くための記述方法です。（詳しくは<a href=\"https://2jigenha.com/javascript-arrow/\">こちら</a>）通常の関数と比べて文法が短く、特に<code>this</code>の振る舞いが大きく異なります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">通常の関数における<code>this</code>の振る舞い</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScriptでは、<code>this</code>の値は関数がどのように呼び出されるかによって変わります。これが時として混乱を招くことがあります。例えば、オブジェクトのメソッド内でタイマーを設定する場合、以下のような問題が生じることがあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const myObject = {\n  value: 42,\n  showValue: function() {\n    setTimeout(function() {\n      console.log(this.value);  // ここで`this`は`myObject`ではなく、`window`を指すため、undefinedになる\n    }, 1000);\n  }\n};\nmyObject.showValue();</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ここでは、<code>this.value</code>で42という値を出力しようとしていますが、<code>this</code>は<code>window</code>を指すため、<code>this.value</code>も値が定義されていないことになってしまいます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">アロー関数での解決</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>アロー関数を使うと、<code>this</code>が自動的に外のスコープ（アロー関数を包んでいる関数やコンテキスト）の<code>this</code>と同じになります。つまり、アロー関数はその場所での<code>this</code>を「記憶」します。上の例をアロー関数を使って書き直すと、以下のようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const myObject = {\n  value: 42,\n  showValue: function() {\n    setTimeout(() =&gt; {\n      console.log(this.value);  // アロー関数により、`this`は`myObject`を指し続ける\n    }, 1000);\n  }\n};\nmyObject.showValue();</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この場合、<code>setTimeout</code>のコールバックで使われているアロー関数は、<code>showValue</code>が呼び出されたときの<code>this</code>（ここでは<code>myObject</code>）を使用します。そのため、期待通り<code>42</code>が出力されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>アロー関数は、<code>this</code>が周囲のコンテキストから自動的に引き継がれるため、予期せぬ<code>this</code>の値に悩まされることが少なくなります。これにより、特にイベント処理や非同期処理のコードが読みやすく、理解しやすくなります。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c4f9dd2a70884a80aad672fce4bdb6b0/narityan_function_line_art_5f3dcf2e-ef27-408d-b7f2-4a0d6c374120.webp","categories":["eda71746c0"],"tags":["eda71746c0","788a500fa3"]},{"id":"8d23cf6c86","publishedAt":"2024-04-30T06:53:57.000Z","title":"TynyDBでサクッとデータベースを使ってみた","contents":"<p>TinyDBは、Pythonで動作する手軽なドキュメント指向のデータベースです。JSON形式でデータを保存し、シンプルで使いやすいAPIを提供しています。本記事ではTinyDBの基本的な使い方をいくつか説明します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">TinyDBのインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>TinyDBはpipを通じて簡単にインストールできます。ターミナルで以下のコマンドを実行してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">pip install tinydb</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データベースの作成とデータの挿入</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>TynyDBでは以下のような簡単なコードでデータベースを作成し、データを挿入することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from tinydb import TinyDB, Query\n\n# データベースを作成する（ファイルベース）\ndb = TinyDB('db.json')\n\n# データを挿入する\ndb.insert({'type': 'fruit', 'name': 'apple'})\ndb.insert({'type': 'fruit', 'name': 'banana'})</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データの検索</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>TinyDBで<code>Query</code>オブジェクトを使ってデータを検索する方法は以下のとおりです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># クエリオブジェクトの作成\nFruit = Query()\n\n# 'name'が'apple'のドキュメントを検索\nresult = db.search(Fruit.name == 'apple')\nprint(result)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データの更新と削除</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データの更新や削除も簡単に行えます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 'name'が'apple'のドキュメントの'name'を'green apple'に更新\ndb.update({'name': 'green apple'}, Fruit.name == 'apple')\n\n# 'name'が'banana'のドキュメントを削除\ndb.remove(Fruit.name == 'banana')</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データベースの全データを取得</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>全てのデータを取得するには以下のようにします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 全データを取得\nall_items = db.all()\nprint(all_items)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これらの基本的な操作だけで、TinyDBを効果的に使いこなすことができます。小規模プロジェクトやプロトタイピングには特に適しています。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/bfec3c4e32344d7db0b3c920d52ac01a/narityan_dataset_devided_by_line_on_the_two_demension_graph_bla_1572ba30-faab-4e11-bb5e-6e53987d12ac.webp","categories":["11a4a60b51"],"tags":["11a4a60b51","869331496a"]},{"id":"a4e987d175","publishedAt":"2024-05-09T02:51:47.000Z","title":"matplotlibで日本語が文字化け！解決策を解説します","contents":"<p>pythonの可視化ライブラリmatplotlibを使用する際、日本語を含むグラフを作成しようとすると文字化けが発生することがあります。この記事では、その原因と、いくつかの解決策を解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">なぜ文字化けが起きるのか</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>matplotlibはデフォルトで日本語をサポートしていないフォントを使用しています。そのため、日本語を含むグラフを作成すると文字が正しく表示されず、代わりに以下の画像のように文字化けが発生します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":327,\"width\":\"549px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/9d492e8e966142b1afdb5b6081f427b8/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-05-09-20.16.10-1024x768.webp\" alt=\"matplotlib_日本語_文字化け\" class=\"wp-image-327\" style=\"width:549px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">解決策の詳細</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>matplotlibで日本語を表示できるようにするには、次の３つの方法があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>設定ファイルを編集する</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>コード内で日本語対応フォントを指定する</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>japanize-matplotlibを使う[→ラクです]</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 設定ファイル(matplotlibrc)を編集する方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>matplotlibの設定ファイル<code>matplotlibrc</code>を編集することで、デフォルトのフォントを変更できます。このファイルは通常、matplotlibのインストールディレクトリ内か、ユーザーのホームディレクトリの<code>.config/matplotlib</code>フォルダ内にあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>font.family</code> と <code>font.sans-serif</code> オプションを編集して、好みのフォントに設定します。例えば次のように設定してみてください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">font.family : sans-serif\nfont.sans-serif : Arial, Liberation Sans, DejaVu Sans, Bitstream Vera Sans, sans-serif</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. コード内で日本語フォントを指定する方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>コード内でrcParamsを設定するれば、日本語で表示できるようになります。<code>plt.rcParams['font.family']</code>を日本語対応のフォントにすれば、文字化けしなくなります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"> import matplotlib.pyplot as plt\n\n# フォントの設定\nplt.rcParams['font.family'] = 'Hiragino Sans'\n\n# グラフを描画してみる\nplt.plot([1, 2, 3, 4, 5])\nplt.title('お試しプロット')\nplt.xlabel('エックス軸')\nplt.ylabel('ワイ軸')\nplt.show()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":328,\"width\":\"637px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/0c816bfa9dc74f78b0a2b7ab35ad4924/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-05-09-20.45.54.webp\" alt=\"matplotlib_日本語表示\" class=\"wp-image-328\" style=\"width:637px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>japanize-matplotlibを使う方法</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>個人的にはこの方法が最も簡単だと思います。japanize-matplotlibをインストールして、読み込むだけです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install japanize-matplotlib \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>上のコマンドでjapanize-matplotlibをインストールしてください。次に、matplotlibをインポートするときに、同時にこれもインポートするだけで日本語表示に対応できるようになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import matplotlib.pyplot as plt\nimport japanize_matplotlib\n\n\n# グラフを描画してみる\nplt.plot([1, 2, 3, 4, 5])\nplt.title('お試しプロット')\nplt.xlabel('エックス軸')\nplt.ylabel('ワイ軸')\nplt.show()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":329,\"width\":\"450px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/6a5a2f7837414d8dbc9585fdcc57a733/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-05-09-20.49.47.webp\" alt=\"matplotlib_japanize_matplotlib\" class=\"wp-image-329\" style=\"width:450px;height:auto\"></figure>\n<!-- /wp:image -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d012f3551b524cd19886a27fea402382/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-05-09-20.16.10.webp","categories":["11a4a60b51"],"tags":["2b15fcd19d","11a4a60b51"]},{"id":"0bba869d7f","publishedAt":"2024-05-11T06:38:53.000Z","title":"【savefig】matplotlibでグラフを保存する方法のバリエーション","contents":"<p>Pythonのデータ可視化ライブラリ<strong>matplotlib</strong>は、データの可視化を簡単に実現できます。もちろんグラフを保存することもできます。そして、その保存方法のバリエーションは思っている以上に多くあります。本記事では、<strong>matplotlibでグラフの保存方法をカスタマイズする方法</strong>について、具体的な例を交えて詳しく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">matplotlibでの基本的なグラフ保存方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは、基本的なグラフの保存方法を確認しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import matplotlib.pyplot as plt\n\n# データの準備\nx = [1, 2, 3, 4, 5]\ny = [10, 8, 6, 4, 2]\n\n# グラフの描画\nplt.plot(x, y)\n\n# グラフの保存\nplt.savefig('graph.png')\n\n# グラフの表示\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":449,\"width\":\"413px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/983a1d283fea458db39b65efa7968a6b/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-27-10.10.01-1024x491.webp\" alt=\"matplotlib_savefig_実行結果\" class=\"wp-image-449\" style=\"width:413px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>上記のコードでは、<code>plt.savefig('graph.png')</code>を使用してグラフをPNG形式で保存しています。しかし、このままではデフォルトの設定で保存されるため、品質やサイズなどが適切でない場合があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">保存形式の種類と選択</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>matplotlibでは、以下のようなさまざまな形式でグラフを保存できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>PNG</strong>: ラスター画像形式。ウェブ表示に適しています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>JPEG</strong>: 写真などの保存に適したラスター画像形式。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>PDF</strong>: ベクター形式。印刷物や高品質な保存に適しています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>SVG</strong>: スケーラブルなベクター形式。ウェブや印刷物に適しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: PDF形式での保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.savefig('graph.pdf')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: SVG形式での保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.savefig('graph.svg')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">画像の解像度と品質の設定</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>デフォルトでは、matplotlibは解像度72dpiで画像を保存します。高品質な画像が必要な場合は、<code>dpi</code>パラメータを使用して解像度を変更できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: 高解像度での保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.savefig('high_res_graph.png', dpi=300)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">画像サイズのカスタマイズ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>画像のサイズは、<code>figure</code>オブジェクトの<code>figsize</code>パラメータで設定できます。単位はインチです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: 画像サイズを8インチ×6インチに設定</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.figure(figsize=(8, 6))\nplt.plot(x, y)\nplt.savefig('large_graph.png')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":450,\"width\":\"623px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/cdfd596b8d19432a97a45b6c268c47aa/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-27-10.14.13.webp\" alt=\"savefig_画像サイズ変更_実行結果\" class=\"wp-image-450\" style=\"width:623px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">余白の調整</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>保存した画像に不要な余白が含まれる場合、<code>bbox_inches='tight'</code>を使用して余白を自動調整できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: 余白を削除して保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.savefig('tight_graph.png', bbox_inches='tight')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":451,\"width\":\"372px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/900eb58e94a047d0a9db32a996cdb742/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-27-10.19.37.webp\" alt=\"savefig_余白を消す\" class=\"wp-image-451\" style=\"width:372px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">背景色と透明度の設定</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>デフォルトでは、保存される画像の背景は白色です。<code>facecolor</code>や<code>transparent</code>パラメータを使用して、背景色や透明度を変更できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: 背景を透明にして保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.savefig('transparent_graph.png', transparent=True)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: 背景色を変更して保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.savefig('colored_background_graph.png', facecolor='lightgray')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":452,\"width\":\"369px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/30debbfbf6bd4a67a70cadb0524063de/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-27-10.21.00-1024x753.webp\" alt=\"savefig_背景色の変更\" class=\"wp-image-452\" style=\"width:369px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ファイル名に変数を使用</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ファイル名に変数を組み込むことで、複数の画像を自動的に保存できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: ループで複数の画像を保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">for i in range(5):\n    plt.plot(x, [yi * (i+1) for yi in y])\n    filename = f'graph_{i+1}.png'\n    plt.savefig(filename)\n    plt.clf()  # 現在の図をクリア\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">圧縮と最適化</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>画像ファイルのサイズを小さくするために、圧縮や最適化を行うことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例: JPEG形式で圧縮率を設定して保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.savefig('compressed_graph.jpg', quality=85)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">実践例: 保存設定をカスタマイズしたグラフの保存</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下は、さまざまな保存オプションを組み合わせた実践的な例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import matplotlib.pyplot as plt\n\n# データの準備\nx = range(0, 10)\ny = [xi**2 for xi in x]\n\n# グラフの描画\nplt.plot(x, y)\n\n# 図のサイズ設定\nplt.figure(figsize=(10, 8))\n\n# 高解像度、透明背景、余白なしで保存\nplt.savefig('customized_save_graph.png', dpi=300, transparent=True, bbox_inches='tight')\n\n# グラフの表示\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードでは、以下の設定を行っています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>図のサイズ</strong>: 10インチ×8インチ</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>解像度</strong>: 300dpi</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>背景</strong>: 透明</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>余白</strong>: 自動調整で削除</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>matplotlibを使用すると、グラフの保存方法を細かくカスタマイズできます。保存形式、解像度、画像サイズ、背景色、透明度などを適切に設定することで、用途に合わせた最適なグラフを保存できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイントのまとめ</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>保存形式の選択</strong>: 用途に応じて適切なファイル形式を選ぶ</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>解像度の設定</strong>: <code>dpi</code>パラメータで高品質な画像を得る</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>画像サイズの調整</strong>: <code>figsize</code>で画像の大きさを指定</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>余白と背景の調整</strong>: <code>bbox_inches</code>や<code>facecolor</code>、<code>transparent</code>でカスタマイズ</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>これらの方法を活用して、プロジェクトやプレゼンテーションに最適なグラフを作成しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>キーワード</strong>: matplotlib, グラフ保存, カスタマイズ, 画像解像度, 背景色, Python</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/7462df065b034d9ba2a34e7817c226db/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-27-10.28.05.webp","categories":["11a4a60b51"],"tags":["2b15fcd19d","11a4a60b51"]},{"id":"7acc684a84","publishedAt":"2024-05-12T06:28:22.000Z","title":"Matplotlibで目盛間隔を自在に設定【簡潔＆多彩な実用例】","contents":"<p>「Matplotlibの目盛間隔をサクッと調整したい」「複雑な解説よりも、すぐ使える例が欲しい」という方に向けて、シンプルなコード例を集めました。定期的な数値刻みはもちろん、日付軸・対数軸・特定位置だけに目盛を表示するなど、バラエティ豊かなパターンを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">基本：<code>MultipleLocator</code>でシンプルに等間隔調整</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>下記のように<code>MultipleLocator</code>を使えば、等間隔な目盛を即設定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import matplotlib.pyplot as plt\nfrom matplotlib.ticker import MultipleLocator\n\nx = [0, 1, 2, 3, 4, 5]\ny = [v**2 for v in x]\n\nfig, ax = plt.subplots()\nax.plot(x, y, marker='o')\n\n# X軸を0.5刻みで表示\nax.xaxis.set_major_locator(MultipleLocator(0.5))\n\n# Y軸を1.0刻みで表示\nax.yaxis.set_major_locator(MultipleLocator(1.0))\n\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":476,\"width\":\"604px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/41840fae00e947cb9247c3f2837f5261/Screenshot-2024-12-06-at-22.52.17.webp\" alt=\"MultipleLocatorを使って目盛を設定\" class=\"wp-image-476\" style=\"width:604px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">固定値だけ表示したい場合：<code>FixedLocator</code></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>特定の値のみに目盛を振りたい時は<code>FixedLocator</code>が有効です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from matplotlib.ticker import FixedLocator\n\nfig, ax = plt.subplots()\nax.plot(x, y, marker='o')\n\n# X軸の目盛を特定位置に固定\nax.xaxis.set_major_locator(FixedLocator([0, 2, 3.5, 5]))\n\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これで指定リストの値にのみ目盛が表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":477,\"width\":\"634px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/466b93a9d3174b6992345f1c26d4ee01/Screenshot-2024-12-06-at-22.55.45.webp\" alt=\"\" class=\"wp-image-477\" style=\"width:634px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">補助目盛（マイナー目盛）の追加</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>主要目盛だけでなく、より細かい補助目盛（マイナー目盛）を表示することで、精度の高い読み取りが可能になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 主要目盛は1.0刻み、マイナー目盛は0.2刻み\nax.yaxis.set_major_locator(MultipleLocator(1.0))\nax.yaxis.set_minor_locator(MultipleLocator(0.2))\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これで補助的な細かい目盛が追加され、グラフの精緻さが向上します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":478,\"width\":\"623px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/4b534df2e2d047b68cc34bd138c55e1c/Screenshot-2024-12-06-at-22.57.16.webp\" alt=\"matplotlib_メモリの調整\" class=\"wp-image-478\" style=\"width:623px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">日付軸の目盛調整：<code>AutoDateLocator</code>など</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>日時データを表示する場合は日付専用のLocatorを使います。<code>AutoDateLocator</code>と<code>DateFormatter</code>を組み合わせると、日付ベースの目盛間隔も簡単にコントロールできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime, timedelta\n\ndates = [datetime(2021,1,1) + timedelta(days=i) for i in range(10)]\nvalues = [i for i in range(10)]\n\nfig, ax = plt.subplots()\nax.plot(dates, values, marker='o')\n\n# 日付軸に自動で適切な間隔を設定\nax.xaxis.set_major_locator(mdates.AutoDateLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n\nplt.gcf().autofmt_xdate()  # 日付表示を回転調整\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>自動調整されるので、グラフの拡大・縮小に応じて最適な日付間隔が保たれます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":479,\"width\":\"696px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/bbc42e1b5a3c4202bff9a6e8a6b311e1/Screenshot-2024-12-06-at-22.58.05.webp\" alt=\"matplotlib_目盛調整_日付\" class=\"wp-image-479\" style=\"width:696px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">対数軸や非線形スケールでも調整可能</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>対数軸を使う場合でも目盛調整が可能です。たとえば、対数軸で主要目盛を特定のパワーごとに表示したい場合は<code>LogLocator</code>を利用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import numpy as np\nfrom matplotlib.ticker import LogLocator\n\nx = np.logspace(0, 3, 100)\ny = x**2\n\nfig, ax = plt.subplots()\nax.plot(x, y)\n\nax.set_xscale('log')  # 対数スケール設定\nax.xaxis.set_major_locator(LogLocator(base=10.0, numticks=5))\n\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>これで対数スケールでも見やすい目盛間隔を用意できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>実行結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":481,\"width\":\"693px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/53646279b88d40fdabfbd309e4b27673/image.webp\" alt=\"Matplotlib_目盛調整_対数スケール\" class=\"wp-image-481\" style=\"width:693px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>等間隔表示</strong>：<code>MultipleLocator</code>で即設定</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>特定点表示</strong>：<code>FixedLocator</code>で思い通りの位置に</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>マイナー目盛追加</strong>：主要目盛＋補助目盛で細かく表示</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>日付軸</strong>：<code>AutoDateLocator</code>や<code>DateFormatter</code>で柔軟に対応</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>対数軸</strong>：<code>LogLocator</code>を活用</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>上記例をそのまま活用し、あなたのMatplotlib図表を思い通りの間隔に仕上げてみてください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f1ebda0ab341474395faf83007269d87/Screenshot-2024-12-06-at-23.02.46.webp","categories":["11a4a60b51"],"tags":["2b15fcd19d","11a4a60b51"]},{"id":"023849c389","publishedAt":"2024-08-18T05:34:27.000Z","title":"【完全解説】pandasで行・列を削除する様々な方法","contents":"<p>データ分析や機械学習で欠かせないPythonのライブラリ「pandas」は、データの操作や加工が非常に容易です。本記事では、<strong>pandasで行・列を削除する様々な方法</strong>を初心者にも分かりやすく解説します。データクリーニングや前処理で頻繁に使われるテクニックをマスターしましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. 行・列を削除する基本的な方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>pandasでは、<code>drop()</code>メソッドを使用して行や列を削除できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>基本構文：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">DataFrame.drop(labels=None, axis=0, index=None, columns=None, inplace=False)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>labels</code>：削除したい行や列のラベル</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>axis</code>：0は行、1は列を指定</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>inplace</code>：<code>True</code>にすると元のDataFrameを変更</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. 特定の行を削除する</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例：特定の行を削除</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# サンプルデータの作成\ndata = {'名前': ['太郎', '花子', '次郎', '三郎'],\n        '年齢': [25, 30, 22, 28]}\ndf = pd.DataFrame(data)\n\n# インデックス1の行を削除\ndf_dropped = df.drop(1)\n\nprint(df_dropped)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢\n0  太郎  25\n2  次郎  22\n3  三郎  28\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>df.drop(1)</code>でインデックスが1の行（花子の行）を削除しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. 特定の列を削除する</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例：特定の列を削除</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># '年齢'列を削除\ndf_dropped = df.drop('年齢', axis=1)\n\nprint(df_dropped)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前\n0  太郎\n1  花子\n2  次郎\n3  三郎\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>axis=1</code>を指定することで、列を削除しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. 条件に基づいて行を削除する</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例：年齢が25未満の行を削除</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 条件を満たす行を削除\ndf_dropped = df[df['年齢'] &gt;= 25]\n\nprint(df_dropped)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢\n0  太郎  25\n1  花子  30\n3  三郎  28\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>df['年齢'] &gt;= 25</code>で年齢が25以上の行を抽出しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. 欠損値を持つ行・列を削除する</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例：欠損値を含む行を削除</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 欠損値のあるデータフレームを作成\ndata = {'名前': ['太郎', '花子', None, '三郎'],\n        '年齢': [25, None, 22, 28]}\ndf = pd.DataFrame(data)\n\n# 欠損値を含む行を削除\ndf_dropped = df.dropna()\n\nprint(df_dropped)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前    年齢\n0  太郎  25.0\n3  三郎  28.0\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>dropna()</code>で欠損値を含む行を削除しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. 重複した行を削除する</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例：重複行を削除</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 重複を含むデータフレームを作成\ndata = {'名前': ['太郎', '花子', '太郎', '三郎'],\n        '年齢': [25, 30, 25, 28]}\ndf = pd.DataFrame(data)\n\n# 重複行を削除\ndf_dropped = df.drop_duplicates()\n\nprint(df_dropped)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢\n0  太郎  25\n1  花子  30\n3  三郎  28\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>drop_duplicates()</code>で完全に一致する重複行を削除しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>pandasで行・列を削除する方法は多岐にわたります。データの前処理やクリーニングで頻繁に使われるため、これらの方法をマスターすることでデータ操作がスムーズになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>特定の行・列の削除</strong>：<code>drop()</code>メソッドを使用</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>条件に基づく行の削除</strong>：ブールインデックスを使用</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>欠損値のある行・列の削除</strong>：<code>dropna()</code>メソッドを使用</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>重複行の削除</strong>：<code>drop_duplicates()</code>メソッドを使用</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. 関連キーワード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>pandas 行削除</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 列削除</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas drop</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas dropna</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 重複削除</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ前処理</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データクリーニング</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Python データ分析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 使い方</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 基本操作</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">さらに学ぶ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/pandas-filterling/\">pandasでデータをフィルタリングする方法</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/basic-python-pandas/\">pandasの基本的なデータ操作まとめ</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/python-datascience-for-biginner/\">Pythonで始めるデータ分析入門</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>ご注意</strong>：本記事は情報提供を目的としており、特定の行動を推奨するものではありません。実際のデータ分析においては、データの性質や目的に応じて適切な方法を選択してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://chatgpt.com/c/67456da9-b348-8009-8d9e-2fcfae840dd1#\">トップに戻る</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/ffaabf9d568b4608bd1117a228bb012e/pandas.webp","categories":["11a4a60b51"],"tags":["ae4863bdae","11a4a60b51"]},{"id":"2289b221b3","publishedAt":"2024-08-22T06:25:21.000Z","title":"Pandas ilocで特定の行や列を抽出する方法を解説","contents":"<p>Pythonのデータ操作ライブラリであるPandasは、データ分析や処理に欠かせないツールとなっています。その中でも、<code>iloc</code>は特定の行や列を簡単に抽出するための非常に強力な機能です。本記事では、<code>iloc</code>の基本的な使い方から、複雑な操作までを実例を交えながら解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. pandas ilocとは？基本的な使い方を解説</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>iloc</code>は、Pandasでインデックスを基にデータを選択するためのメソッドです。これは、行番号や列番号を使って、データフレームやシリーズから特定のデータを抽出するために使用されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1-1: pandas ilocとlocの違い</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>iloc</code>は整数インデックスを使用するのに対し、<code>loc</code>はラベルベースのインデックスを使用します。例えば、次のように異なります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# データフレームを作成\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4],\n    'B': [10, 20, 30, 40],\n    'C': [100, 200, 300, 400]\n})\n\n# ilocを使用して2行目を取得\nprint(df.iloc[1])\n\n# locを使用して2行目を取得（ラベルベース）\nprint(df.loc[1])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1-2: pandasでのilocを用いた基本的なデータ抽出</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>iloc</code>は、次のようにシンプルに使用できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 3行目のデータを取得\nprint(df.iloc[2])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1-3: DataFrameとSeriesに対するilocの適用方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>DataFrameに対してもSeriesに対しても、<code>iloc</code>は同様に動作しますが、その結果はデータの構造に依存します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># データフレームの3行目のB列を取得\nprint(df.iloc[2, 1])\n\n# シリーズに対してilocを使用\nseries = df['A']\nprint(series.iloc[2])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Pythonでのpandas ilocの複数行・複数列の抽出</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数の行や列を同時に抽出することも可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2-1: 行番号を使った複数行の取得方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>連続する行を取得するには、スライスを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 1行目から3行目までを取得\nprint(df.iloc[0:3])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2-2: 列番号を使った複数列の取得方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>列の範囲を指定して抽出する例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 1列目から2列目までを取得\nprint(df.iloc[:, 0:2])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2-3: 行と列の組み合わせでのデータ抽出</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>行と列の組み合わせで特定の範囲を抽出することもできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 2行目と3行目の、A列とB列を取得\nprint(df.iloc[1:3, 0:2])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. pandas ilocによるデータの代入と編集</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>iloc</code>はデータの抽出だけでなく、データの更新や編集にも使用できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3-1: 特定の位置にデータを代入する方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>特定のセルに値を代入するには、以下のようにします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 2行目のB列に新しい値を代入\ndf.iloc[1, 1] = 25\nprint(df)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3-2: 範囲指定によるデータの一括編集</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数のセルに一括で値を代入することもできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 1行目から2行目のA列に値を代入\ndf.iloc[0:2, 0] = [100, 200]\nprint(df)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3-3: 複数インデックスを用いたデータの更新</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数のインデックスを使ってデータを一括で更新する例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 1行目と3行目のB列に値を代入\ndf.iloc[[0, 2], 1] = [15, 35]\nprint(df)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. ilocと共に使うスライスによるデータ操作</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>スライスと組み合わせることで、<code>iloc</code>の柔軟性がさらに増します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4-1: ilocでのスライスの基本的な書き方</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>基本的なスライスの書き方は次の通りです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 1行目から3行目のデータを抽出\nprint(df.iloc[0:3])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4-2: 範囲指定によるデータの部分的な抽出</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>特定の範囲のデータを抽出することで、必要な部分だけを取り出すことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 2列目から3列目のデータを取得\nprint(df.iloc[:, 1:3])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4-3: 条件式を用いたデータのフィルタリング</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>条件式を用いたデータの抽出も可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># B列が30以上の行を取得\nprint(df.iloc[:, 1][df['B'] &gt;= 30])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>iloc</code>を使えば、Pandasのデータフレームやシリーズから特定の行や列を簡単に抽出、編集することができます。この記事で紹介した基本的な使い方や応用テクニックを活用し、より効率的にデータ操作を行ってください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8f2e0a8239114118b7c49822221a9b12/DALL%C2%B7E-2024-08-23-00.25.12-A-modern-clean-and-minimalistic-image-representing-data-analysis-using-Pythons-Pandas-library.-The-image-features-an-open-laptop-with-Python-code-o.webp","categories":["11a4a60b51"],"tags":["ae4863bdae","11a4a60b51"]},{"id":"deeeb5df3f","publishedAt":"2024-08-22T06:36:09.000Z","title":"無料でできる！Google Apps Scriptで業務を自動化する","contents":"<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1: Google Apps Scriptとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>1-1: 無料で使えるGoogle Apps Scriptの概要</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Google Apps Script (GAS)は、Googleが提供するJavaScriptベースのスクリプト言語で、Googleの各種サービス（スプレッドシート、ドライブ、Gmailなど）を自動化するために使用されます。GASは完全に無料で利用でき、ウェブブラウザから直接コードを作成し、実行することができます。そのため、初めてプログラムに触れるユーザーにも扱いやすいツールです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>1-2: Googleスプレッドシートとの連携</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Google Apps Scriptは、特にGoogleスプレッドシートとの連携に優れています。例えば、定期的にデータを集計したり、他のユーザーと自動的に情報を共有したりすることが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>コード例: スプレッドシートのデータを自動集計</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function autoSum() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var range = sheet.getRange('A1:A10');\n  var values = range.getValues();\n  var total = 0;\n  for (var i = 0; i &lt; values.length; i++) {\n    total += values[i][0];\n  }\n  sheet.getRange('B1').setValue(total);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードは、A1からA10の範囲のセルを自動で集計し、その結果をB1セルに出力します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>1-3: Google Apps Scriptを使った業務自動化</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>GASを使用することで、業務プロセスを効率化し、自動化することができます。たとえば、特定の条件が満たされたときに自動的にメールを送信するスクリプトを作成することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2: Google Apps Scriptの始め方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>2-1: スクリプトエディタの基本操作</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Googleスプレッドシートを開き、「拡張機能」メニューから「Apps Script」を選択することで、スクリプトエディタが開きます。エディタ内では、コードを入力し、保存し、実行することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>2-2: 初心者向けのスタートガイド</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>初心者におすすめの方法は、まずGoogleの提供するチュートリアルを活用することです。これにより、基本的な操作から学習を開始し、徐々に高度なスクリプトへとステップアップしていくことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3: Google Apps Scriptの活用例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>3-1: スプレッドシートでのデータ処理</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>スプレッドシート上でのデータ処理を自動化する例を紹介します。データのフィルタリングや計算、別のシートへの転送など、日々の業務で発生する単純作業を自動化できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>コード例: データの自動フィルタリング</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function filterData() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var range = sheet.getRange('A1:B10');\n  var criteria = SpreadsheetApp.newFilterCriteria()\n                              .whenTextContains('特定のキーワード')\n                              .build();\n  range.createFilter().setColumnFilterCriteria(2, criteria);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードは、指定された範囲で特定のキーワードを含むデータをフィルタリングします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>3-2: Gmailと連携した自動メール送信</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>GASを利用して、Gmailと連携し、特定のトリガーに基づいて自動でメールを送信することが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>コード例: 自動メール送信</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function sendEmail() {\n  var emailAddress = \"example@example.com\";\n  var subject = \"自動メール\";\n  var message = \"このメールはGoogle Apps Scriptから送信されました。\";\n  MailApp.sendEmail(emailAddress, subject, message);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4: Google Apps ScriptでのWebアプリ開発</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>4-1: 基本的なウェブアプリの構築手順</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>GASを使って簡単なウェブアプリを作成する手順を紹介します。まず、HTMLとGASを組み合わせて、基本的なインターフェースと機能を持つアプリを構築します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>コード例: シンプルなウェブアプリ</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function doGet() {\n  return HtmlService.createHtmlOutput('&lt;h1&gt;Hello, world!&lt;/h1&gt;');\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードをデプロイすることで、\"Hello, world!\"というメッセージを表示するウェブページが作成されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>4-2: Googleスプレッドシートとの連携によるデータ管理</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>作成したウェブアプリからスプレッドシートのデータを取得し、表示したり、ユーザーが入力したデータをスプレッドシートに保存することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>コード例: フォームデータの保存</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function doPost(e) {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var data = e.parameter.inputData;\n  sheet.appendRow([data]);\n  return HtmlService.createHtmlOutput('Data saved successfully');\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Google Apps Scriptを使えば、日々の業務を簡単に自動化し、効率化することが可能です。無料で利用できる強力なツールであり、初めてプログラミングを学ぶ人にも最適です。この記事で紹介したコード例を参考に、自分の業務に合ったスクリプトを作成し、日々の作業をさらに効率化しましょう。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c21238b916e94273b5d3cbc63bff1581/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-08-23-0.35.43.webp","categories":["2fe840e132","eda71746c0"],"tags":["2fe840e132","eda71746c0"]},{"id":"03a3d955b8","publishedAt":"2024-08-28T16:56:25.000Z","title":"Pandasのgroupbyを使いこなすためのガイド","contents":"<h3 class=\"wp-block-heading\">1: Pandasの基本的なgroupbyの使い方</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pandasの<code>groupby</code>は、データを特定のキーでグループ化し、その後にさまざまな集計や計算を行うための強力なツールです。データの分析や集計処理において、多くのシチュエーションで使用されます。ここでは、基本的な使い方と簡単なサンプルコードを紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1-1: groupbyを用いたデータのグループ化</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>groupby</code>は、DataFrameを特定の列を基準にグループ化します。以下のサンプルデータを使って見ていきましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# サンプルデータ\ndata = {'名前': ['田中', '鈴木', '佐藤', '田中', '鈴木'],\n        '年齢': [23, 35, 25, 23, 40],\n        '得点': [80, 90, 70, 85, 78]}\ndf = pd.DataFrame(data)\n\n# 名前ごとにグループ化\ngrouped = df.groupby('名前')\nprint(grouped.mean())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードでは、名前ごとにデータがグループ化され、各グループの平均値が計算されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":357,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/2ada558e328744d6b31c44da458d5752/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-08-28-19.45.28.webp\" alt=\"pandas groupby &quot;grouped.mean()&quot;\" class=\"wp-image-357\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1-2: DataFrameでのgroupbyの基本メソッド</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>グループ化されたデータに対して、<code>mean</code>や<code>sum</code>といったメソッドを使って集計が可能です。以下の例では、グループごとの合計得点を計算します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 名前ごとの合計得点\nprint(grouped.sum())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":358,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d17391988a8845d8950ecae75157af47/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-08-28-19.46.40.webp\" alt=\"groupby grouped.sum\" class=\"wp-image-358\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2: groupbyでの集計と計算の方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>groupby</code>を使えば、複数の集計を一度に行うこともできます。<code>agg</code>メソッドを使えば、グループ化されたデータに対して複数の操作を同時に行うことが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">2-1: aggメソッドを使った複数条件の集計</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下のコードは、名前ごとに平均得点と得点の合計を一度に計算する例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 平均得点と合計得点を計算\nagg_results = grouped['得点'].agg(['mean', 'sum'])\nprint(agg_results)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":359,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3cbc8d3a5c5d4b63b909e10028c3a1f8/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-08-28-19.47.45.webp\" alt=\"groupby agg\" class=\"wp-image-359\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3: 複数キーや複数列でのグループ化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>groupby</code>では、複数の列をキーとして指定してデータをグループ化することも可能です。これにより、より細かい分析が可能になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">3-1: 複数列を使ったデータのグループ分け</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次の例では、名前と年齢をキーにしてデータをグループ化します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 名前と年齢をキーにグループ化\nmulti_grouped = df.groupby(['名前', '年齢'])\nprint(multi_grouped.sum())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":360,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/931f2f85cc56499db58c3c261aeb1495/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-08-29-10.51.00.webp\" alt=\"groupby multi_grouped\" class=\"wp-image-360\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4: applyメソッドによる柔軟な処理</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>apply</code>メソッドを使うと、カスタム関数をグループに適用することができます。これにより、標準的な集計メソッドでは対応できない複雑な処理が可能になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">4-1: applyでの関数適用とデータ処理</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下のコードでは、得点が80点以上の学生の名前をリスト化します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 80点以上の学生の名前をリスト化\nhigh_scores = grouped.apply(lambda x: x[x['得点'] &gt;= 80])\nprint(high_scores)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":361,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8fa976a335c04eef8129700c0b9aa221/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-08-29-10.51.35.webp\" alt=\"groupeby high_scores\" class=\"wp-image-361\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5: NaNや欠損値を含むデータの処理</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データ分析の現場では、欠損値が含まれることがよくあります。<code>groupby</code>は、欠損値を含むデータに対しても柔軟に対応できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">5-1: NaNデータを含む場合のgroupby挙動</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>欠損値が含まれる場合、<code>groupby</code>はどのように動作するのかを見てみましょう。以下のサンプルデータを使います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># サンプルデータに欠損値を追加\ndata = {'名前': ['田中', '鈴木', '佐藤', '田中', None],\n        '年齢': [23, 35, 25, 23, 40],\n        '得点': [80, 90, None, 85, 78]}\ndf = pd.DataFrame(data)\n\n# グループ化と集計\ngrouped = df.groupby('名前')\nprint(grouped.mean())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":362,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8ebef5e15e774526b44126933d307a62/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-08-29-10.52.11.webp\" alt=\"groupby NaN\" class=\"wp-image-362\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>このコードでは、欠損値を含むグループを除外せずに平均を計算します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>このように、<code>groupby</code>はデータのグループ化と集計において非常に強力なツールです。この記事では基本的な使い方から少し応用的なテクニックまでを紹介しましたが、実際のデータ分析ではさらに多様な方法で活用できます。ぜひ、あなたのプロジェクトに応じてこれらの方法を試してみてください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/6adeece776844b659e94d14a3cd0af27/groupby.webp","categories":["11a4a60b51"],"tags":["ae4863bdae","11a4a60b51"]},{"id":"600b4cdf20","publishedAt":"2024-09-28T06:03:53.000Z","title":"PyScriptの一般的な概念と使い方のチュートリアル","contents":"<p>近年、Pythonはウェブ開発やデータ分析、機械学習といった分野で広く使われていますが、最近ではウェブページ上で簡単にPythonコードを実行できるようになりました。つまり、今までJavaScriptでやっていたようなことをPythonで書けるようになったと言うことです。この記事では、PyScriptの基本的な概念と、その使い方について初心者向けにわかりやすく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PyScriptとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":367,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a4d675e934b542bbadf42d64b148ad00/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-09-28-23.56.46.webp\" alt=\"pyScriptの画像\" class=\"wp-image-367\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>PyScript</strong>は、Pythonコードをウェブブラウザ上で実行できるようにするフレームワークです。従来のJavaScriptの代わりにPythonを使うことができ、HTMLファイル内に直接Pythonコードを書いて、ブラウザ上で即座に実行できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PyScriptは、JavaScriptとの互換性が高く、Pythonの豊富なライブラリやツールをウェブ開発に応用できるのが大きなメリットです。例えば、科学計算用の<code>NumPy</code>やデータ分析用の<code>Pandas</code>など、通常はバックエンドで使用されるライブラリも、PyScriptを通じてクライアント側で動作させることが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">PyScriptの利点</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Pythonの簡単さと強力さ</strong>：Pythonはそのシンプルさと直感的な構文で知られており、PyScriptを使うことでその強力な機能をWebアプリケーションにも活用できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>JavaScriptとの連携</strong>：PyScriptはJavaScriptと共存可能で、既存のWebプロジェクトにも導入しやすいです。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>インタラクティブなUI開発</strong>：PyScriptを使えば、ユーザー入力に基づいたインタラクティブなWebアプリケーションを構築できます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PyScriptの基本的な使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>それでは、PyScriptを実際に使ってみましょう。まず、PyScriptを使用するために必要なファイルのセットアップ方法と、基本的なコード例を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. HTMLファイルのセットアップ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>PyScriptを使うには、まずHTMLファイルを作成し、その中に必要なスクリプトを読み込みます。以下のような基本的なHTMLテンプレートを用意します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;PyScriptのサンプル&lt;/title&gt;\n    &lt;!-- PyScriptのライブラリを読み込む --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://pyscript.net/latest/pyscript.css\" /&gt;\n    &lt;script defer src=\"https://pyscript.net/latest/pyscript.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;PyScriptの基本例&lt;/h1&gt;\n    &lt;!-- Pythonコードをここに記述 --&gt;\n    &lt;py-script&gt;\n        print(\"PyScriptでPythonを実行しています！\")\n    &lt;/py-script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このテンプレートでは、PyScriptのCSSとJavaScriptファイルを読み込み、<code>&lt;py-script&gt;</code>タグ内にPythonコードを記述しています。これだけで、ブラウザ上でPythonコードを実行する準備が整います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. PyScriptで簡単な計算をしてみる</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次に、簡単な計算を行ってみましょう。例えば、2つの数を足すコードを実装します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">&lt;py-script&gt;\n    a = 5\n    b = 3\n    result = a + b\n    print(f\"{a} + {b} = {result}\")\n&lt;/py-script&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードを実行すると、ブラウザのコンソールに「5 + 3 = 8」という結果が表示されます。Pythonの変数や算術演算子をそのまま使える点が、PyScriptの魅力の一つです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PyScriptで外部ライブラリを使う</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次に、Pythonの強力な外部ライブラリをPyScriptで使用する方法を見てみましょう。例えば、データ分析に広く使われる<code>Pandas</code>を使って簡単なデータ処理を行います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">&lt;py-script&gt;\n    import pandas as pd\n\n    # サンプルデータの作成\n    data = {'名前': ['太郎', '花子', '次郎'],\n            '年齢': [23, 25, 30]}\n\n    df = pd.DataFrame(data)\n\n    # データフレームの表示\n    print(df)\n&lt;/py-script&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、<code>Pandas</code>を使ってサンプルデータを作成し、それをデータフレーム形式で表示しています。通常はサーバーサイドで行う処理を、PyScriptを使うことでクライアントサイドで行えるようになる点が大きな利点です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">外部ライブラリの読み込み方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>Pandas</code>のようなライブラリを使用する場合、<code>&lt;py-env&gt;</code>タグを使ってライブラリを指定する必要があります。以下は、その例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;py-env&gt;\n    - pandas\n&lt;/py-env&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このタグ内にライブラリ名を記述することで、PyScriptが自動的にそのライブラリを読み込みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PyScriptを使った簡単なWebアプリケーションの作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次に、PyScriptを使ってユーザーインタラクションを含む簡単なWebアプリケーションを作成してみましょう。例えば、ユーザーからの入力を受け取って、その結果を計算して表示するアプリケーションです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;h2&gt;数の足し算&lt;/h2&gt;\n\n&lt;!-- ユーザーからの入力フォーム --&gt;\n&lt;input type=\"number\" id=\"num1\" placeholder=\"数1\"&gt;\n&lt;input type=\"number\" id=\"num2\" placeholder=\"数2\"&gt;\n&lt;button id=\"calculate\"&gt;計算する&lt;/button&gt;\n\n&lt;!-- 計算結果を表示する場所 --&gt;\n&lt;p id=\"result\"&gt;&lt;/p&gt;\n\n&lt;py-script&gt;\n    def calculate():\n        num1 = int(Element(\"num1\").element.value)\n        num2 = int(Element(\"num2\").element.value)\n        result = num1 + num2\n        Element(\"result\").element.innerText = f\"結果: {result}\"\n\n    # ボタンがクリックされたら計算を実行\n    Element(\"calculate\").element.onclick = calculate\n&lt;/py-script&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードは、2つの数を入力してボタンを押すと、その合計を計算して結果を表示する簡単なアプリケーションです。<code>Element()</code>を使ってHTML要素にアクセスし、ユーザーの入力値を取得したり、結果を表示したりします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>PyScriptを使えば、Pythonの簡潔さと強力さをウェブ開発に活用することができます。特に、データ処理や科学計算をクライアントサイドで行いたい場合に非常に有用です。また、JavaScriptとの互換性も高く、既存のウェブアプリケーションに容易に統合できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>この記事では、PyScriptの基本的な概念と、その使い方について解説しましたが、PyScriptは日々進化しており、さらに多くの機能が追加されています。是非、実際に試してみて、その可能性を感じてみてください！</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/058eefc7e0ff4e02bb58a897a4e18b0a/DALL%C2%B7E-2024-09-29-00.02.33-A-clean-modern-web-page-interface-with-a-Python-logo-subtly-incorporated.-The-page-features-code-snippets-in-Python-alongside-graphical-elements-like.webp","categories":["e5e239560b","11a4a60b51"],"tags":["e5e239560b","eda71746c0","11a4a60b51"]},{"id":"9b15fed64e","publishedAt":"2024-09-28T23:47:00.000Z","title":"Openpyxlのインストール方法：開発環境別ガイド","contents":"<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Openpyxlは、Excelファイルの読み書きや編集をPythonで行うために便利なライブラリです。このガイドでは、主要な開発環境ごとのインストール方法を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">MacやWindowsにインストールする最も一般的な方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonをすでに使っている場合は、お馴染みの<a href=\"https://2jigenha.com/pip-install/\">pipでインストール</a>できます。以下のコマンドを実行しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">これで十分ですが、開発環境ごとに若干異なる場合があるので、それらの方法について以下で解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Anacondaでのインストール方法</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Anacondaは、データサイエンスや機械学習のためのパッケージを管理するPythonディストリビューションです。Anaconda環境でのOpenpyxlのインストール方法は以下の手順で行います。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">手順：</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Anacondaを開き、ターミナルまたはAnaconda Promptを起動します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>以下のコマンドを実行してOpenpyxlをインストールします：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   conda install openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li>インストールが完了したら、以下のコマンドで正常にインストールされたか確認できます：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   conda list openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Anaconda環境では<code>conda</code>コマンドで依存関係を管理できるため、安心してOpenpyxlをインストールできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>pipでのインストール方法（仮想環境を使用）</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonの標準的なパッケージ管理ツールである<code>pip</code>を使ったOpenpyxlのインストール方法は、最も一般的です。特に、仮想環境を使用することで、プロジェクトごとに依存関係を管理するのが推奨されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">手順：</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>仮想環境を作成します（仮想環境がない場合）：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   python -m venv myenv</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>※ <code>myenv</code>は任意の環境名です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><!-- wp:list-item -->\n<li>仮想環境を有効化します：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Windows</strong>:<br><code>bash myenv\\Scripts\\activate</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>macOS/Linux</strong>:<br><code>bash source myenv/bin/activate</code></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><!-- wp:list-item -->\n<li>仮想環境がアクティブになったら、<code>pip</code>を使ってOpenpyxlをインストールします：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   pip install openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\"><!-- wp:list-item -->\n<li>インストール後、以下のコマンドでインストール確認ができます：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   pip show openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Jupyter Notebookでのインストール方法</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Jupyter Notebookは、データ分析や可視化に便利なインタラクティブな開発環境です。Notebook上で直接Openpyxlをインストールすることも可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">手順：</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Jupyter Notebookのセルに以下のコマンドを入力し、実行します：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   !pip install openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><!-- wp:list-item -->\n<li>インストールが完了したら、Notebook内でOpenpyxlをインポートし、使用可能です：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   import openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Jupyter環境でも手軽にインストールと使用ができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Docker環境でのインストール方法</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dockerを使ってPython環境をコンテナ化している場合、DockerfileにOpenpyxlのインストールを追加することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">手順：</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Dockerfileに以下の内容を追加します：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   RUN pip install openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><!-- wp:list-item -->\n<li>コンテナの再ビルド時にOpenpyxlが自動的にインストールされます：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   docker build -t my-python-app .</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Dockerコンテナ内でPython環境を管理する場合も、Openpyxlのインストールは非常に簡単です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>PyCharmでのインストール方法</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>PyCharmは、Python開発用の統合開発環境（IDE）です。PyCharm内で直接Openpyxlをインストールすることが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">手順：</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>PyCharmを開き、プロジェクト設定（<code>File &gt; Settings &gt; Project: &lt;your_project_name&gt; &gt; Python Interpreter</code>）に移動します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>+</code>ボタンをクリックし、<code>openpyxl</code>を検索してインストールします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>インストールが完了したら、プロジェクト内でOpenpyxlをインポートして使用できます：</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">   import openpyxl</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>PyCharmのインターフェースを使うことで、コマンドライン操作が苦手な方でも簡単にインストールが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Openpyxlはさまざまな開発環境で簡単にインストールできます。どの環境でも基本的な手順は似ていますが、環境によって使いやすい方法を選ぶことが大切です。この記事で紹介した方法を参考に、OpenpyxlをインストールしてPythonでのExcel操作を始めてみましょう！</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/20c8058ab2164b5aafe8fe5b98c89a44/openpyxl.webp","categories":["faba1e00af","ab2620f9b7","11a4a60b51"],"tags":["fab008f09c","11a4a60b51"]},{"id":"de5872c6bb","publishedAt":"2024-11-25T00:33:22.000Z","title":"OpenPyXLによるExcelファイルの読み込みと書き込みの基本操作","contents":"<p>PythonでExcelファイルを操作する時にお役立ちのライブラリが<strong>OpenPyXL</strong>です。このライブラリを使うことで、Excelファイルを簡単に読み書きすることができ、データ処理や自動化ができます。本記事では、OpenPyXLを使ったExcelファイルの基本的な読み込みと書き込みの方法を解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. OpenPyXLとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>OpenPyXL</strong>は、PythonでExcelファイル（<code>.xlsx</code>形式）を操作するためのライブラリです。以下のような操作が可能です：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Excelファイルの読み込み</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>セルの値の取得と更新</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>新しいExcelファイルの作成</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>グラフやフォーマットの操作</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. OpenPyXLのインストール</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは、ライブラリをインストールします。ターミナルまたはコマンドプロンプトで以下のコマンドを実行してください：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">pip install openpyxl\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>さらに詳しいインストール方法は<a href=\"https://2jigenha.com/python-openpyxl-install/\">こちらを参照</a>してください！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Excelファイルの読み込み</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Excelファイルを読み込むには、<code>load_workbook</code>関数を使用します。以下は基本的な読み込みの例です。Pythonコードとエクセルファイルは同じ階層に配置してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コード例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook\n\n# Excelファイルを読み込む\nworkbook = load_workbook('sample.xlsx')\n\n# シート名を確認\nprint(workbook.sheetnames)\n\n# 特定のシートを選択\nsheet = workbook['Sheet1']\n\n# セルの値を取得\nvalue = sheet['A1'].value\nprint(f\"A1の値: {value}\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":380,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/d2eff6173d6544efad72a7c7f85448aa/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-18.15.47.webp\" alt=\"OpenPyXlによるエクセルファイルの読み込み\" class=\"wp-image-380\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>上のようなエクセルファイルに対してコードを実行すると、次のような出力が得られます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":381,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e2ace678963d4d00bbd87148813e9cd4/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-18.17.35-1024x470.webp\" alt=\"OpenPyXLを使ったエクセルのセルの値の取得\" class=\"wp-image-381\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>load_workbook</code></strong>: 指定したExcelファイルを読み込みます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>sheetnames</code></strong>: ファイル内のシート名をリストで取得します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>セルの値の取得</strong>: セルを指定して値を取得できます（例：<code>sheet['A1'].value</code>）。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. Excelファイルへの書き込み</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Excelファイルへのデータの書き込みは簡単で、セルを指定して値を代入するだけです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コード例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import Workbook\n\n# 新しいExcelファイルを作成\nworkbook = Workbook()\n\n# デフォルトのシートを取得\nsheet = workbook.active\nsheet.title = 'NewSheet'\n\n# セルに値を書き込む\nsheet['A1'] = 'こんにちは'\nsheet['B1'] = 42\nsheet['C1'] = 3.14\n\n# ファイルを保存\nworkbook.save('new_file.xlsx')\nprint(\"Excelファイルが作成されました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>Workbook</code></strong>: 新しいExcelファイルを作成します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>active</code></strong>: デフォルトのシートを取得します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>セルへの書き込み</strong>: セルを指定して値を代入します（例：<code>sheet['A1'] = 'こんにちは'</code>）。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>save</code></strong>: ファイルを保存します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. 既存のExcelファイルにデータを追加</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>既存のExcelファイルにデータを追加するには、ファイルを読み込んだ後に値を更新します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コード例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook\n\n# 既存のExcelファイルを読み込む\nworkbook = load_workbook('sample.xlsx')\n\n# シートを選択\nsheet = workbook['Sheet1']\n\n# 新しいデータを追加\nsheet['D1'] = '追加データ'\nsheet['E1'] = 123\n\n# 変更を保存\nworkbook.save('sample_updated.xlsx')\nprint(\"ファイルが更新されました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. よくあるエラーと対処法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. ファイルが見つからない</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>エラー例：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">FileNotFoundError: [Errno 2] No such file or directory: 'sample.xlsx'\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>対処法：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ファイル名やパスが正しいことを確認してください。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>ファイルがスクリプトと同じディレクトリにあるか確認してください。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. 読み取り専用モードのエラー</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>エラー例：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">PermissionError: [Errno 13] Permission denied: 'sample.xlsx'\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>対処法：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ファイルが他のプログラムで開かれていないことを確認してください。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>OpenPyXLを使えば、Pythonで簡単にExcelファイルを操作することができます。本記事で紹介した基本操作を応用すれば、業務の効率化やデータ処理を自動化するスクリプトを作成できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>次回は、<strong>条件付き書式やグラフ作成</strong>などの応用編を解説します！ぜひ試してみてください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e1a68f39e44c49e1894cde8aab645e19/narityan_the_computer_displaying_the_letter_OpenPyXl_black_and__ab97b96b-c83b-4d9a-9f12-3d5ff129d7cd.webp","categories":["11a4a60b51"],"tags":["fab008f09c","11a4a60b51"]},{"id":"37b7351017","publishedAt":"2024-11-25T00:39:17.000Z","title":"OpenPyXLコマンド集：Excelファイルの読み込み・保存・書き換え・新規作成など","contents":"<p><strong>OpenPyXL</strong>は、PythonでExcelファイルを操作する非常に便利なライブラリです。本記事では、OpenPyXLの基本的なコマンドを網羅的に解説します。これを参考に、Excel操作効率化スクリプトを書いていただけましたら本望です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. ファイルの読み込み</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Excelファイルを操作する最初のステップが「読み込み」です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コマンド例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook\n\n# Excelファイルを読み込む\nworkbook = load_workbook('sample.xlsx')\n\n# シート名の確認\nprint(workbook.sheetnames)\n\n# 特定のシートを選択\nsheet = workbook['Sheet1']\n\n# セルの値を取得\nvalue = sheet['A1'].value\nprint(f\"A1の値: {value}\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>load_workbook</code></strong>: Excelファイルを読み込みます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>sheetnames</code></strong>: 全シート名をリストで取得します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>セルの値の取得</strong>: <code>sheet['A1'].value</code>でセルの値を取得可能です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. 新規ファイルの作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Excelファイルを一から作成したい場合は、<code>Workbook</code>を使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コマンド例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import Workbook\n\n# 新しいExcelファイルを作成\nworkbook = Workbook()\n\n# デフォルトのシートを取得\nsheet = workbook.active\n\n# セルにデータを入力\nsheet['A1'] = 'Hello, OpenPyXL'\nsheet['B1'] = 123\n\n# ファイルを保存\nworkbook.save('new_file.xlsx')\nprint(\"新しいExcelファイルを作成しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>Workbook</code></strong>: 新しいExcelファイルを作成します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>active</code></strong>: デフォルトのシートを取得します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>save</code></strong>: ファイルを保存します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. ファイルの保存（上書き・別名保存）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>既存のファイルを保存する際は、<code>save</code>メソッドを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コマンド例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook\n\n# ファイルを読み込む\nworkbook = load_workbook('sample.xlsx')\n\n# セルの値を変更\nsheet = workbook['Sheet1']\nsheet['A1'] = 'Updated Data'\n\n# 上書き保存\nworkbook.save('sample.xlsx')\n\n# 別名で保存\nworkbook.save('sample_copy.xlsx')\nprint(\"ファイルを保存しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>上書き保存</strong>: 読み込んだファイルと同じ名前で保存します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>別名保存</strong>: ファイル名を変更して保存できます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. シートの作成・削除・切り替え</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">新しいシートの作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 新しいシートを追加\nnew_sheet = workbook.create_sheet(title='NewSheet')\nnew_sheet['A1'] = 'This is a new sheet'\n\n# 保存\nworkbook.save('new_file_with_new_sheet.xlsx')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">シートの削除</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># シートを削除\ndel workbook['NewSheet']\n\n# 保存\nworkbook.save('file_after_deleting_sheet.xlsx')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">デフォルトシートの切り替え</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># デフォルトのアクティブシートを取得\ndefault_sheet = workbook.active\nprint(default_sheet.title)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. セルの読み書き</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>セル操作の基本を以下に示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">セルの値の取得</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># セルの値を取得\nvalue = sheet['B2'].value\nprint(value)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">セルに値を書き込む</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># セルにデータを書き込む\nsheet['C3'] = 'Pythonで書き込み'\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">行・列単位での操作</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 行単位でデータを取得\nfor row in sheet.iter_rows(min_row=1, max_row=5, values_only=True):\n    print(row)\n\n# 列単位でデータを取得\nfor col in sheet.iter_cols(min_col=1, max_col=3, values_only=True):\n    print(col)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. データの追記</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ファイルにデータを追加する例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># データを追記\nsheet.append(['新しいデータ', 456, 7.89])\n\n# 保存\nworkbook.save('file_with_new_data.xlsx')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. 条件付き書式の設定</h2>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl.styles import PatternFill\nfrom openpyxl.formatting.rule import CellIsRule\n\n# 条件付き書式を設定\nred_fill = PatternFill(start_color=\"FF0000\", end_color=\"FF0000\", fill_type=\"solid\")\nrule = CellIsRule(operator=\"greaterThan\", formula=[\"50\"], fill=red_fill)\nsheet.conditional_formatting.add(\"A1:A10\", rule)\n\n# 保存\nworkbook.save('conditional_formatting.xlsx')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. グラフの作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl.chart import LineChart, Reference\n\n# データ範囲を指定\ndata = Reference(sheet, min_col=2, min_row=1, max_col=2, max_row=10)\n\n# グラフを作成\nchart = LineChart()\nchart.add_data(data, titles_from_data=True)\n\n# グラフをシートに挿入\nsheet.add_chart(chart, \"E5\")\n\n# 保存\nworkbook.save('file_with_chart.xlsx')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. ファイルのコピーや移動</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>新しいファイルにシートをコピーする例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># シートのコピー\ncopied_sheet = workbook.copy_worksheet(sheet)\ncopied_sheet.title = 'CopiedSheet'\n\n# 保存\nworkbook.save('file_with_copied_sheet.xlsx')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>OpenPyXLを使えば、PythonでExcelファイルを簡単に操作できます。本記事では基本から応用までのコマンドを紹介しました。以下の用途に応用できます：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>データ入力の自動化</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データの加工と解析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>レポートの作成</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/20dadd6866074c96b3c64c712a360494/narityan_the_MacBook_computer_displaying_the_letter_OpenPyXl_bl_dc255f9c-a635-40af-9137-16b9454c7472.webp","categories":["faba1e00af","11a4a60b51"],"tags":["fab008f09c","11a4a60b51"]},{"id":"25dac95b8f","publishedAt":"2024-11-25T00:50:06.000Z","title":"OpenPyXL応用編：条件付き書式とグラフ作成","contents":"<p>今回は実用的な応用編として、<strong>条件付き書式</strong>と<strong>グラフ作成</strong>の方法を紹介します。これらを活用すれば、Excelファイルをより動的かつ視覚的に活用できるようになります！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. 条件付き書式の適用</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>条件付き書式は、セルの値に応じてフォーマットを動的に変更する機能です。OpenPyXLを使うと、Pythonでこれを簡単に設定できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">条件付き書式の基本例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下の例では、特定の範囲のセルで値が50以上のものを赤い背景色に変更します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import Workbook\nfrom openpyxl.styles import PatternFill\nfrom openpyxl.formatting.rule import CellIsRule\n\n# 新しいExcelファイルを作成\nworkbook = Workbook()\nsheet = workbook.active\n\n# サンプルデータを入力\ndata = [10, 20, 50, 75, 30]\nfor i, value in enumerate(data, start=1):\n    sheet[f\"A{i}\"] = value\n\n# 条件付き書式を設定\nred_fill = PatternFill(start_color=\"FF0000\", end_color=\"FF0000\", fill_type=\"solid\")\nrule = CellIsRule(operator=\"greaterThanOrEqual\", formula=[\"50\"], fill=red_fill)\n\n# 条件付き書式を適用する範囲を指定\nsheet.conditional_formatting.add(\"A1:A5\", rule)\n\n# ファイルを保存\nworkbook.save(\"conditional_formatting.xlsx\")\nprint(\"条件付き書式を適用したExcelファイルを保存しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":388,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/3acfb176fe054a2b8b604e9b6a226c3c/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-18.44.41.webp\" alt=\"OpenPyXlによる条件付き書式の適応\" class=\"wp-image-388\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>PatternFill</code></strong>: セルの背景色を設定します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>CellIsRule</code></strong>: 特定の条件（例：値が50以上）を指定します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>conditional_formatting.add</code></strong>: 条件付き書式を適用する範囲を指定します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. グラフの作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次に、OpenPyXLを使ってExcelファイルにグラフを追加する方法を解説します。以下は、棒グラフを作成する例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">グラフの基本例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import Workbook\nfrom openpyxl.chart import BarChart, Reference\n\n# 新しいExcelファイルを作成\nworkbook = Workbook()\nsheet = workbook.active\n\n# サンプルデータを入力\ndata = [\n    [\"Month\", \"Sales\"],\n    [\"January\", 100],\n    [\"February\", 120],\n    [\"March\", 150],\n    [\"April\", 130]\n]\nfor row in data:\n    sheet.append(row)\n\n# グラフを作成\nchart = BarChart()\nchart.title = \"Monthly Sales\"\nchart.x_axis.title = \"Month\"\nchart.y_axis.title = \"Sales\"\n\n# データ範囲を指定\ndata_ref = Reference(sheet, min_col=2, min_row=2, max_row=5, max_col=2)\ncategories_ref = Reference(sheet, min_col=1, min_row=2, max_row=5)\n\n# データとカテゴリをグラフに追加\nchart.add_data(data_ref, titles_from_data=True)\nchart.set_categories(categories_ref)\n\n# シートにグラフを挿入\nsheet.add_chart(chart, \"E5\")\n\n# ファイルを保存\nworkbook.save(\"bar_chart.xlsx\")\nprint(\"グラフを作成したExcelファイルを保存しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image {\"id\":389,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/180d6bda8c6540afb495cdec6236b1b4/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-18.46.12-1024x450.webp\" alt=\"OpenPyXl_棒グラフの作成\" class=\"wp-image-389\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>BarChart</code></strong>: 棒グラフを作成するクラスです。他にも<code>LineChart</code>（折れ線グラフ）や<code>PieChart</code>（円グラフ）などがあります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>Reference</code></strong>: グラフのデータ範囲やカテゴリ範囲を指定します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>add_chart</code></strong>: グラフをシートに挿入します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. 応用例：条件付き書式 + グラフ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下は、条件付き書式とグラフを組み合わせた実例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import Workbook\nfrom openpyxl.styles import PatternFill\nfrom openpyxl.formatting.rule import CellIsRule\nfrom openpyxl.chart import BarChart, Reference\n\n# 新しいExcelファイルを作成\nworkbook = Workbook()\nsheet = workbook.active\n\n# サンプルデータを入力\ndata = [\n    [\"Month\", \"Sales\"],\n    [\"January\", 100],\n    [\"February\", 120],\n    [\"March\", 150],\n    [\"April\", 130]\n]\nfor row in data:\n    sheet.append(row)\n\n# 条件付き書式を設定\nred_fill = PatternFill(start_color=\"FF9999\", end_color=\"FF9999\", fill_type=\"solid\")\nrule = CellIsRule(operator=\"greaterThanOrEqual\", formula=[\"130\"], fill=red_fill)\nsheet.conditional_formatting.add(\"B2:B5\", rule)\n\n# グラフを作成\nchart = BarChart()\nchart.title = \"Monthly Sales with Conditional Formatting\"\nchart.x_axis.title = \"Month\"\nchart.y_axis.title = \"Sales\"\n\ndata_ref = Reference(sheet, min_col=2, min_row=2, max_row=5, max_col=2)\ncategories_ref = Reference(sheet, min_col=1, min_row=2, max_row=5)\nchart.add_data(data_ref, titles_from_data=True)\nchart.set_categories(categories_ref)\n\nsheet.add_chart(chart, \"E5\")\n\n# ファイルを保存\nworkbook.save(\"conditional_formatting_with_chart.xlsx\")\nprint(\"条件付き書式とグラフを組み合わせたExcelファイルを保存しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:image {\"id\":390,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/bf496b303be6450dbe8f535e36025cf3/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-18.47.19-1024x450.webp\" alt=\"OpenPyXl_応用\" class=\"wp-image-390\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>条件付き書式やグラフ作成は、OpenPyXLの中でも特に強力な機能です。これらを組み合わせることで、データを視覚的に強調し、分析作業を効率化できます。ぜひ、自分のデータに応用してみてください！</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c61a38a8d3e84d9f8f258b7f03b5ac3b/narityan_the_computer_displaying_bar_charts_black_and_white_lin_59fc7148-a149-418b-b4be-86321a20101b.webp","categories":["faba1e00af","11a4a60b51"],"tags":["fab008f09c","11a4a60b51"]},{"id":"99a0b871c9","publishedAt":"2024-11-25T00:54:36.000Z","title":"OpenPyXLを使った実用的なスクリプト例＆効率的なデータ操作方法","contents":"<p><strong>OpenPyXL</strong>は、PythonでExcelファイルを操作するための非常に強力なライブラリです。本記事では、実際の業務や日常作業に役立つ<strong>実用的なスクリプト例</strong>と、効率的なデータ操作方法を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Excelファイルのデータを一括修正するスクリプト</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>例えば、売上データが記載されたExcelファイルで、特定の値を増減させる必要がある場合に役立つスクリプトです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">実例：価格データに10%の増加を適用</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook\n\n# ファイルを読み込む\nworkbook = load_workbook('sales_data.xlsx')\nsheet = workbook['Sheet1']\n\n# 特定の列に対して値を修正\nfor row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=3, max_col=3):\n    for cell in row:\n        cell.value = round(cell.value * 1.1, 2)  # 10%増加\n\n# 修正したデータを保存\nworkbook.save('sales_data_updated.xlsx')\nprint(\"データの更新が完了しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>iter_rows</code></strong>: 行単位でデータを効率よく処理します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>cell.value</code></strong>: 値を動的に変更可能です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. 条件に基づいて行を削除するスクリプト</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データクレンジングの一環として、特定の条件を満たす行を削除することがよくあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">実例：売上が0の行を削除</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook\n\n# ファイルを読み込む\nworkbook = load_workbook('sales_data.xlsx')\nsheet = workbook['Sheet1']\n\n# 条件に一致する行を削除\nrows_to_delete = []\nfor row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):\n    if row[2].value == 0:  # 3列目（売上）が0の場合\n        rows_to_delete.append(row[0].row)\n\nfor row_num in sorted(rows_to_delete, reverse=True):\n    sheet.delete_rows(row_num)\n\n# 保存\nworkbook.save('sales_data_cleaned.xlsx')\nprint(\"条件に一致する行を削除しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>delete_rows</code></strong>: 指定した行を削除します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>条件に一致する行番号をリストに格納し、逆順に削除することでエラーを防ぎます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. 複数のExcelファイルをマージするスクリプト</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数のExcelファイルを1つのファイルにまとめる作業は、手作業では時間がかかります。このスクリプトを使えば簡単に自動化できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">実例：複数ファイルのデータを1つのシートに統合</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import load_workbook, Workbook\n\n# 新しいExcelファイルを作成\ncombined_workbook = Workbook()\ncombined_sheet = combined_workbook.active\ncombined_sheet.title = \"Combined Data\"\n\n# ファイルリスト\nfiles = ['data1.xlsx', 'data2.xlsx', 'data3.xlsx']\n\n# データを統合\nfor file in files:\n    workbook = load_workbook(file)\n    sheet = workbook.active\n\n    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, values_only=True):\n        combined_sheet.append(row)\n\n# 保存\ncombined_workbook.save('combined_data.xlsx')\nprint(\"データを統合しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>複数ファイルのデータを1つのシートにまとめることで、分析が容易になります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>**<code>values_only=True</code>**を使用することで、セルオブジェクトではなく値のみを取得します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. 自動でレポートを作成するスクリプト</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>営業チーム向けに、月次売上レポートを自動生成する例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">実例：月次売上レポートを作成</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import Workbook\nfrom openpyxl.styles import Font\nfrom openpyxl.chart import BarChart, Reference\n\n# データ\nsales_data = [\n    [\"Month\", \"Sales\"],\n    [\"January\", 1000],\n    [\"February\", 1500],\n    [\"March\", 2000],\n    [\"April\", 1800]\n]\n\n# 新しいExcelファイルを作成\nworkbook = Workbook()\nsheet = workbook.active\nsheet.title = \"Monthly Sales Report\"\n\n# データを書き込む\nfor row in sales_data:\n    sheet.append(row)\n\n# 見出しを太字に設定\nheader_font = Font(bold=True)\nfor cell in sheet[1]:\n    cell.font = header_font\n\n# 棒グラフを作成\nchart = BarChart()\ndata_ref = Reference(sheet, min_col=2, min_row=1, max_row=5)\ncategories_ref = Reference(sheet, min_col=1, min_row=2, max_row=5)\nchart.add_data(data_ref, titles_from_data=True)\nchart.set_categories(categories_ref)\nchart.title = \"Monthly Sales\"\nchart.x_axis.title = \"Month\"\nchart.y_axis.title = \"Sales\"\n\n# シートにグラフを追加\nsheet.add_chart(chart, \"D2\")\n\n# 保存\nworkbook.save('monthly_sales_report.xlsx')\nprint(\"月次売上レポートを作成しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ポイント</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>**<code>Font</code>**を使ってセルのフォーマットを設定できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>グラフ作成に**<code>BarChart</code>**を使用して視覚的なレポートを生成します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. 複数のシートを持つExcelファイルを作成するスクリプト</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数のシートに分けてデータを保存することで、整理されたExcelファイルを作成できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">実例：月ごとの売上データをシートごとに保存</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from openpyxl import Workbook\n\n# 月ごとのデータ\nmonthly_data = {\n    \"January\": [100, 200, 300],\n    \"February\": [150, 250, 350],\n    \"March\": [200, 300, 400]\n}\n\n# 新しいExcelファイルを作成\nworkbook = Workbook()\n\nfor month, sales in monthly_data.items():\n    sheet = workbook.create_sheet(title=month)\n    for i, value in enumerate(sales, start=1):\n        sheet[f\"A{i}\"] = value\n\n# デフォルトシートを削除\ndel workbook[\"Sheet\"]\n\n# 保存\nworkbook.save(\"monthly_sales.xlsx\")\nprint(\"月ごとのデータを保存したファイルを作成しました\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>この記事では、OpenPyXLを使った以下の実用的なスクリプト例を紹介しました：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>データの一括修正</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>条件付き行の削除</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>複数ファイルの統合</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>自動レポート生成</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>複数シートの作成</strong></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>これらのスクリプトを活用すれば、日常業務や分析作業を大幅に効率化できます。ぜひ、自分のデータに応用してみてください！</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e1a68f39e44c49e1894cde8aab645e19/narityan_the_computer_displaying_the_letter_OpenPyXl_black_and__ab97b96b-c83b-4d9a-9f12-3d5ff129d7cd.webp","categories":["faba1e00af","11a4a60b51"],"tags":["fab008f09c","11a4a60b51"]},{"id":"26d228663f","publishedAt":"2024-11-25T02:37:45.000Z","title":"JavaScriptのconfirm関数の使い方を初心者向けに解説","contents":"<p>こんにちは！この記事では、<strong>JavaScriptの</strong>confirm<strong>関数</strong>について、初心者の方にもわかりやすく解説します。confirm関数を使うと、ユーザーに「OK」または「キャンセル」の選択肢を提示するダイアログボックスを表示できます。これにより、ユーザーの入力に応じた処理を実装することが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>confirm関数とは</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>confirm<strong>関数</strong>は、JavaScriptでユーザーに確認を求める際に使用する組み込み関数です。ブラウザ上で以下のようなダイアログボックスが表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>メッセージ</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>OK」ボタン</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>「キャンセル」ボタン</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>ユーザーが「OK」または「キャンセル」を選択すると、その結果を**真偽値（true または false）**として取得できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>基本的な使い方</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>confirm関数の基本的な使い方はとてもシンプルです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">confirm('メッセージをここに入力');</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">confirm('このページを離れますか？');</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このコードを実行すると、以下のようなダイアログが表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":401,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/911cd942d7124be4ae201b028c910952/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-20.34.05.webp\" alt=\"JavaScript_Confirm関数\" class=\"wp-image-401\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>実践的な例</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例1: ページの離脱確認</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ユーザーがページを離れる際に確認を取る例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&nbsp; &lt;title&gt;ページ離脱の確認&lt;/title&gt;\n&nbsp; &lt;script&gt;\n&nbsp; &nbsp; window.onbeforeunload = function() {\n&nbsp; &nbsp; &nbsp; return 'このページを離れますか？';\n&nbsp; &nbsp; };\n&nbsp; &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&nbsp; &lt;h1&gt;ページ離脱の確認&lt;/h1&gt;\n&nbsp; &lt;p&gt;このページから移動しようとすると、確認ダイアログが表示されます。&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>実行結果：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":402,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/aa44ce5f825a41c294fd1f40f03dcf49/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-20.35.09-1024x240.webp\" alt=\"confirm_実行結果\" class=\"wp-image-402\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例2: フォーム送信の確認</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>フォームを送信する前に、ユーザーに最終確認を求める例です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&nbsp; &lt;title&gt;フォーム送信確認&lt;/title&gt;\n&nbsp; &lt;script&gt;\n&nbsp; &nbsp; function confirmSubmission() {\n&nbsp; &nbsp; &nbsp; return confirm('フォームを送信してもよろしいですか？');\n&nbsp; &nbsp; }\n&nbsp; &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&nbsp; &lt;h1&gt;フォーム送信確認&lt;/h1&gt;\n&nbsp; &lt;form onsubmit=\"return confirmSubmission();\"&gt;\n&nbsp; &nbsp; &lt;label&gt;お名前：&lt;input type=\"text\" name=\"name\"&gt;&lt;/label&gt;&lt;br&gt;&lt;br&gt;\n&nbsp; &nbsp; &lt;input type=\"submit\" value=\"送信\"&gt;\n&nbsp; &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>実行結果：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":403,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e1f162821411499191bb15f654f8e931/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-20.36.16-1024x240.webp\" alt=\"JavaScript_confirm_実行結果\" class=\"wp-image-403\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>返り値の扱い方</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>confirm関数は、ユーザーが選択した結果を<strong>真偽値</strong>で返します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li> true：ユーザーが「OK」をクリックした場合</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>false：ユーザーが「キャンセル」をクリックした場合</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">if (confirm('本当に削除しますか？')) {\n// ユーザーが「OK」を選択した場合の処理\n&nbsp; alert('削除しました。');\n} else {\n&nbsp; // ユーザーが「キャンセル」を選択した場合の処理\n&nbsp; alert('キャンセルしました。');\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>注意点とベストプラクティス</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ユーザー体験への配慮</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>• <strong>過度な使用は避ける</strong>：頻繁にダイアログが表示されると、ユーザーの操作を妨げてしまいます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <strong>明確なメッセージ</strong>：ユーザーが何を選択すればよいか分かるように、具体的なメッセージを心がけましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ブラウザ依存性</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>• <strong>外観の違い</strong>：ブラウザやOSによってダイアログのデザインが異なる場合があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <strong>カスタマイズ不可</strong>：confirmダイアログのスタイルやボタンのテキストは基本的に変更できません。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>まとめ</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>confirm関数は、ユーザーからの確認を簡単に取得できる便利な関数です。返り値を適切に扱うことで、ユーザーの選択に応じた柔軟な処理が可能になります。ただし、ユーザー体験を損なわないよう、使用には注意が必要です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>よくある質問（FAQ）</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Q1: confirmダイアログのボタンのテキストを変更できますか？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> いいえ、confirmダイアログのボタンのテキストやスタイルを変更することはできません。カスタマイズされたダイアログを使用したい場合は、モーダルウィンドウや他のライブラリを使用する必要があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Q2: alertとconfirmの違いは何ですか？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> alert関数はメッセージを表示し、ユーザーが「OK」をクリックすると進行します。一方、confirm関数は「OK」と「キャンセル」の選択肢を提供し、その結果を真偽値で返します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>関連記事</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-alert/\">JavaScriptのalert関数の使い方</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-prompt/\">JavaScriptのprompt関数でユーザー入力を取得する方法</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-modal/\">モーダルウィンドウを使ったカスタムダイアログの実装</a></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a0c2491303d54e018fa9ed29de73e4b4/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-25-20.35.09-scaled.webp","categories":["e5e239560b","eda71746c0"],"tags":["eda71746c0"]},{"id":"a5abb1500b","publishedAt":"2024-11-25T03:15:04.000Z","title":"JavaScriptのprompt関数でユーザー入力を取得する方法","contents":"<p>こんにちは！この記事では、<strong>JavaScriptの</strong>prompt<strong>関数</strong>を使って、ユーザーからの入力を取得する方法を初心者の方にもわかりやすく解説します。ユーザーからデータを入力してもらうことで、よりインタラクティブなウェブページを作成することができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>prompt関数とは</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>prompt関数は、ユーザーに入力を求めるためのJavaScriptの組み込み関数です。ブラウザ上に以下のようなダイアログボックスが表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>メッセージ（入力を促すテキスト）</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>テキスト入力フィールド</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>「OK」ボタン</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>「キャンセル」ボタン</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>ユーザーが入力した値は、<strong>文字列として取得</strong>できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>基本的な使い方</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>prompt関数の基本的な使い方はとてもシンプルです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">prompt('ここにメッセージを入力');</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>例：ユーザーの名前を取得する</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>let userName = prompt('あなたの名前を入力してください：');</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>説明：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• prompt関数が実行されると、ユーザーに名前の入力を促すダイアログが表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• ユーザーが入力した名前は、変数 userName に保存されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>取得した入力の活用方法</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>取得したユーザーの入力を使って、メッセージを表示してみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>例：挨拶メッセージを表示する</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let userName = prompt('あなたの名前を入力してください：');\nalert(`こんにちは、${userName}さん！`);</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>説明：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• promptで取得した名前を、alert関数で表示しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• テンプレートリテラル（ ` で囲む）を使って、文字列中に変数を埋め込んでいます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>入力値の検証</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ユーザーが入力をせずに「OK」を押したり、「キャンセル」を押す場合もあります。入力値を検証して、安全な処理を行いましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>例：入力が空の場合の対処</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let userName = prompt('あなたの名前を入力してください：');\nif (userName === null || userName === '') {\n&nbsp; alert('名前が入力されていません。');\n} else {\n&nbsp; alert(`こんにちは、${userName}さん！`);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>説明：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• userName === null は、ユーザーが「キャンセル」を押した場合を意味します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• userName === '' は、入力が空文字（何も入力せずに「OK」を押した）場合を意味します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>数値の入力と計算</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>prompt関数で取得した入力は文字列ですが、数値に変換して計算に利用できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>例：二つの数値を足し合わせる</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let num1 = prompt('一つ目の数を入力してください：');\nlet num2 = prompt('二つ目の数を入力してください：');\nlet sum = Number(num1) + Number(num2);\nalert(`合計は${sum}です。`);</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>説明：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• Number() 関数を使って、文字列を数値に変換しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• 変換しないと文字列の連結になってしまい、期待通りの計算ができません。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>注意点とベストプラクティス</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>ユーザー体験への配慮</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>• <strong>過度な使用は避ける</strong>：promptダイアログは画面の操作を中断させるため、頻繁な使用はユーザーのストレスになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <strong>明確なメッセージ</strong>：ユーザーが何を入力すればよいか、具体的に指示しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>入力値の検証</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>• <strong>空入力やキャンセルの対応</strong>：入力が空やキャンセルされた場合の処理を必ず実装しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <strong>データ型の確認</strong>：数値が必要な場合は、入力値が数値であることを確認し、不正な入力に対処します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>ブラウザ依存性</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>• <strong>外観の違い</strong>：ブラウザやOSによってダイアログのデザインが異なります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <strong>カスタマイズ不可</strong>：promptダイアログのスタイルや配置は変更できません。デザインを統一したい場合は、カスタムの入力フォームを作成しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>まとめ</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>prompt関数を使うことで、簡単にユーザーからの入力を取得できます。基本的な使い方から、取得した値の活用方法、入力値の検証まで解説しました。ユーザー体験を考慮しつつ、適切にprompt関数を活用して、インタラクティブなウェブページを作成してみてください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>よくある質問（FAQ）</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Q1: promptダイアログのデザインを変更できますか？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> いいえ、promptダイアログのスタイルやデザインを変更することはできません。カスタムの入力フォームやモーダルウィンドウを使用して、デザインを統一する方法があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Q2: ユーザーが入力をキャンセルした場合、変数の値はどうなりますか？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> ユーザーが「キャンセル」をクリックした場合、prompt関数は null を返します。これを利用してキャンセル時の処理を行えます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Q3: promptで取得した入力を数値として扱いたい場合はどうすればいいですか？</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> Number() 関数や parseInt()、parseFloat() 関数を使って、文字列を数値に変換します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">let num = Number(prompt('数値を入力してください：'));</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>関連記事</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-alert/\">JavaScriptのalert関数の使い方</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-confirm/\">JavaScriptのconfirm関数でユーザーの選択を取得する方法</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>• <a href=\"https://2jigenha.com/javascript-modal/\">カスタムダイアログを作成する方法（モーダルウィンドウ）</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/c61a38a8d3e84d9f8f258b7f03b5ac3b/narityan_the_computer_displaying_bar_charts_black_and_white_lin_59fc7148-a149-418b-b4be-86321a20101b.webp","categories":["eda71746c0"],"tags":["eda71746c0"]},{"id":"612111a352","publishedAt":"2024-11-25T03:21:54.000Z","title":"JavaScriptでカスタムダイアログを作成する方法（モーダルウィンドウ）を初心者向けに解説","contents":"<p>こんにちは！この記事では、**JavaScriptでカスタムダイアログ（モーダルウィンドウ）**を作成する方法を初心者の方にもわかりやすく解説します。モーダルウィンドウを使うことで、ユーザーに重要な情報を伝えたり、入力を促すことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">モーダルウィンドウとは</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>モーダルウィンドウ</strong>とは、現在のページ上に重ねて表示されるダイアログボックスのことです。ユーザーの操作を一時的に制限し、特定のアクションを促す際に使用されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>メリット：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ユーザーの注意を引きやすい</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>ページ遷移なしで情報を表示・入力できる</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>カスタマイズ性が高い</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">基本的なモーダルの構造</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>モーダルウィンドウは以下の要素で構成されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>オーバーレイ（背景の暗い部分）</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>モーダルコンテンツ（ウィンドウ本体）</strong><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ヘッダー（タイトルや閉じるボタン）</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>ボディ（メッセージや入力フォーム）</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>フッター（ボタンなどの操作要素）</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">HTMLでモーダルの骨組みを作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは、HTMLでモーダルの基本構造を作成します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;!-- モーダルを開くボタン --&gt;\n&lt;button id=\"openModal\"&gt;モーダルを開く&lt;/button&gt;\n\n&lt;!-- オーバーレイとモーダルコンテンツ --&gt;\n&lt;div id=\"modalOverlay\" class=\"modal-overlay\"&gt;\n  &lt;div class=\"modal-content\"&gt;\n    &lt;span id=\"closeModal\" class=\"close-button\"&gt;&amp;times;&lt;/span&gt;\n    &lt;h2&gt;モーダルウィンドウのタイトル&lt;/h2&gt;\n    &lt;p&gt;これはモーダルウィンドウのコンテンツです。&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>#openModal</code>ボタンをクリックするとモーダルが表示されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>#modalOverlay</code>がオーバーレイ部分で、<code>display: none;</code>で非表示にします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>.modal-content</code>がモーダルの本体部分です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">CSSでモーダルのスタイルを設定</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次に、CSSでモーダルの見た目を整えます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"css\" class=\"language-css\">/* オーバーレイのスタイル */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: none; /* 初期状態では非表示 */\n  justify-content: center;\n  align-items: center;\n}\n\n/* モーダルコンテンツのスタイル */\n.modal-content {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 5px;\n  width: 80%;\n  max-width: 500px;\n  position: relative;\n}\n\n/* 閉じるボタンのスタイル */\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 30px;\n  cursor: pointer;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>.modal-overlay</code>に<code>display: flex;</code>を使って中央配置します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>背景を半透明の黒に設定して、オーバーレイ効果を出します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>.close-button</code>でモーダルを閉じるボタンを作成します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScriptでモーダルを制御</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>最後に、JavaScriptでモーダルの開閉機能を実装します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">// 要素の取得\nconst openModal = document.getElementById('openModal');\nconst closeModal = document.getElementById('closeModal');\nconst modalOverlay = document.getElementById('modalOverlay');\n\n// モーダルを開くイベント\nopenModal.addEventListener('click', () =&gt; {\n  modalOverlay.style.display = 'flex';\n});\n\n// モーダルを閉じるイベント（閉じるボタン）\ncloseModal.addEventListener('click', () =&gt; {\n  modalOverlay.style.display = 'none';\n});\n\n// モーダルを閉じるイベント（オーバーレイ部分のクリック）\nmodalOverlay.addEventListener('click', (e) =&gt; {\n  if (e.target === modalOverlay) {\n    modalOverlay.style.display = 'none';\n  }\n});\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>addEventListener</code>を使ってクリックイベントを設定します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>オーバーレイ部分をクリックしてモーダルを閉じる処理を追加しています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>e.target</code>と<code>modalOverlay</code>を比較して、コンテンツ部分のクリックを無視します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">実践的な例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">入力フォームを含むモーダル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>モーダル内にフォームを配置し、ユーザーからの入力を取得できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;!-- モーダルコンテンツ内のフォーム --&gt;\n&lt;div class=\"modal-content\"&gt;\n  &lt;span id=\"closeModal\" class=\"close-button\"&gt;&amp;times;&lt;/span&gt;\n  &lt;h2&gt;お問い合わせ&lt;/h2&gt;\n  &lt;form id=\"contactForm\"&gt;\n    &lt;label&gt;名前：&lt;input type=\"text\" name=\"name\"&gt;&lt;/label&gt;&lt;br&gt;&lt;br&gt;\n    &lt;label&gt;メール：&lt;input type=\"email\" name=\"email\"&gt;&lt;/label&gt;&lt;br&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"送信\"&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>JavaScriptでフォーム送信を処理</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const contactForm = document.getElementById('contactForm');\n\ncontactForm.addEventListener('submit', (e) =&gt; {\n  e.preventDefault(); // デフォルトの送信を防止\n  // フォームデータの取得と処理\n  const formData = new FormData(contactForm);\n  const name = formData.get('name');\n  const email = formData.get('email');\n  \n  alert(`お名前：${name}\\nメール：${email}`);\n  \n  // モーダルを閉じる\n  modalOverlay.style.display = 'none';\n});\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>フォームの送信イベントをキャプチャし、カスタム処理を行います。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>FormData</code>オブジェクトを使って、入力値を取得します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ライブラリを使ったモーダルの実装</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>自作のモーダル以外にも、既存のライブラリを使うことで、より高度なモーダルを簡単に実装できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例：Bootstrapのモーダル</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"markup\" class=\"language-markup\">&lt;!-- ボタン --&gt;\n&lt;button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\"&gt;\n  モーダルを開く\n&lt;/button&gt;\n\n&lt;!-- モーダル --&gt;\n&lt;div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"modalLabel\" aria-hidden=\"true\"&gt;\n  &lt;div class=\"modal-dialog\"&gt;\n    &lt;div class=\"modal-content\"&gt;\n      &lt;div class=\"modal-header\"&gt;\n        &lt;h1 class=\"modal-title fs-5\" id=\"modalLabel\"&gt;モーダルのタイトル&lt;/h1&gt;\n        &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"閉じる\"&gt;&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div class=\"modal-body\"&gt;\n        ここにコンテンツを入れます。\n      &lt;/div&gt;\n      &lt;div class=\"modal-footer\"&gt;\n        &lt;button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"&gt;閉じる&lt;/button&gt;\n        &lt;button type=\"button\" class=\"btn btn-primary\"&gt;保存する&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイント：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>BootstrapのCSSとJavaScriptを読み込む必要があります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ属性（<code>data-bs-toggle</code>など）を使って、簡単にモーダルを制御できます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>モーダルウィンドウを使うことで、ユーザーに重要な情報を効果的に伝えたり、入力を促すことができます。自作で実装する方法と、ライブラリを使う方法の両方を紹介しました。自分のプロジェクトに合わせて最適な方法を選択しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">よくある質問（FAQ）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Q1: モーダルウィンドウを複数同時に表示できますか？</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> 基本的には避けた方が良いです。ユーザーの混乱を招く可能性があるため、モーダルは一度に一つだけ表示することが推奨されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Q2: モーダルの背景をクリックしても閉じないようにできますか？</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> はい、JavaScriptでオーバーレイのクリックイベントを無効にするか、ライブラリの設定で変更できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">// オーバーレイクリックで閉じないようにする\nmodalOverlay.removeEventListener('click', /* 関数 */);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Q3: モーダル内にスクロール可能なコンテンツを入れられますか？</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>A:</strong> はい、CSSで<code>overflow</code>プロパティを設定することで、モーダル内のコンテンツをスクロール可能にできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"css\" class=\"language-css\">.modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>関連記事</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/javascript-alert/\">JavaScriptのalert関数の使い方</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/javascript-confirm/\">JavaScriptのconfirm関数でユーザーの選択を取得する方法</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/javascript-prompt/\">JavaScriptのprompt関数でユーザー入力を取得する方法</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>著者について</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ウェブ開発者として長年の経験を持ち、初心者にもわかりやすいプログラミング解説を心がけています。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/8f2e0a8239114118b7c49822221a9b12/DALL%C2%B7E-2024-08-23-00.25.12-A-modern-clean-and-minimalistic-image-representing-data-analysis-using-Pythons-Pandas-library.-The-image-features-an-open-laptop-with-Python-code-o.webp","categories":["e5e239560b","eda71746c0"]},{"id":"fabf5b7fed","publishedAt":"2024-11-25T21:51:07.000Z","title":"ウェブスクレイピングが禁止されているサイトを確認する方法と注意点","contents":"<p>ウェブスクレイピングは、ウェブサイトからデータを自動的に取得する技術で、データ分析や研究などで広く活用されています。しかし、すべてのウェブサイトがスクレイピングを許可しているわけではありません。本記事では、ウェブスクレイピングが禁止されているサイトを確認する方法と、その際の注意点について解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ウェブスクレイピングとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ウェブスクレイピングとは、プログラムやツールを使ってウェブサイトの情報を自動的に収集する手法です。主な用途としては：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>データ分析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>価格の比較</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>ニュースの収集</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>研究目的のデータ収集</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>などがあります。しかし、無断でのデータ収集は法律やウェブサイトの規約に違反する可能性があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ウェブスクレイピングが禁止されているサイトを確認する方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 利用規約（Terms of Service）を確認する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ウェブサイトのフッターや「利用規約」「Terms of Service」といったリンクをクリックし、サイトの規約を確認しましょう。ここには、ユーザーが守るべきルールや禁止事項が記載されています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>「当サイトのコンテンツを自動的に収集・再利用することを禁止します。」</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>「スクレイピングやボットによるアクセスを禁じます。」</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. プライバシーポリシーを読む</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>プライバシーポリシーには、データの取り扱いに関する詳細な情報が記載されています。他者によるデータの収集や利用についての規定がある場合もあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>「ユーザーのデータを無断で収集・使用することを禁止します。」</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>「第三者によるデータの取得は固く禁じられています。」</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. robots.txtファイルをチェックする</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>robots.txt</code>は、ウェブサイトがクローラー（検索エンジンなど）に対してアクセスの許可や禁止を示すファイルです。以下の手順で確認できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ウェブサイトのURLに<code>/robots.txt</code>を追加してアクセスします。 <strong>例：</strong> <code>https://www.example.com/robots.txt</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>ファイルの内容を確認します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>robots.txtの例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">User-agent: *\nDisallow: /private/\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この例では、すべてのクローラーに対して<code>/private/</code>ディレクトリへのアクセスを禁止しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>注意：</strong> <code>robots.txt</code>は法的拘束力はありませんが、ウェブマスターの意図を示すものです。倫理的な観点からも遵守することが望ましいです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. サイトの管理者に問い合わせる</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>明確な情報が得られない場合は、ウェブサイトの「お問い合わせ」ページから管理者に直接確認するのが最も確実です。スクレイピングの目的や方法を伝え、許可を得ることでトラブルを避けることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">具体的な例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例1: 利用規約でスクレイピングが禁止されている場合</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>あるニュースサイトの利用規約に以下のような記述があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>「当社の明示的な書面による許可なしに、自動化された手段によるデータの収集・使用を禁止します。」</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>この場合、スクレイピングは明確に禁止されていますので、行わないようにしましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">例2: robots.txtでアクセスが制限されている場合</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>eコマースサイトの<code>robots.txt</code>ファイルに以下のような記述があるとします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">User-agent: *\nDisallow: /cart/\nDisallow: /checkout/\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この場合、<code>/cart/</code>や<code>/checkout/</code>ディレクトリへのアクセスは避けるべきです。他の部分へのアクセスが許可されているかどうかは、利用規約も併せて確認しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ウェブスクレイピングを行う際の注意点</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">法的リスクの確認</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>著作権法や不正アクセス禁止法に違反する可能性</strong>があります。国や地域によって法律が異なるため、専門家に相談することも検討してください。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">サーバーへの負荷を考慮する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>過度なリクエストはサーバーに負荷をかけ</strong>、サービス妨害（DoS）となる可能性があります。適切な間隔を空けてリクエストを行いましょう。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">データの利用目的を明確にする</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>取得したデータを<strong>商用利用する場合、特に注意が必要</strong>です。再配布や販売が禁止されている場合があります。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">HTTPSとセキュリティ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>HTTPSで保護されたページのスクレイピングは、セキュリティ上の問題</strong>を引き起こす可能性があります。データの暗号化やプライバシーに配慮しましょう。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ウェブスクレイピングは強力なツールですが、使用方法を誤ると法的な問題や倫理的な問題を引き起こす可能性があります。以下のポイントを押さえて、安全にスクレイピングを行いましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>利用規約やプライバシーポリシーを必ず確認する</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>robots.txtをチェックしてウェブマスターの意図を理解する</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>必要に応じてサイト管理者に問い合わせる</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>法的リスクと倫理的な側面を常に考慮する</strong></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>これらの手順を踏むことで、ウェブスクレイピングを安心して行うことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>ご注意：</strong> 本記事は情報提供を目的としたものであり、法的助言を提供するものではありません。具体的な行動を起こす前に、専門家に相談することをおすすめします。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/2fb56f7e4ebf4b839ec7b4806465be3a/narityan_web_scraping_fbb6b2d8-29d3-4179-b0b0-cf4f8ac0f38f.webp","categories":["ab2620f9b7"],"tags":["e0674de40d"]},{"id":"fc72c98a6c","publishedAt":"2024-11-25T22:20:21.000Z","title":"ウェブスクレイピングにおすすめのプログラミング言語とその使い方","contents":"<h2 class=\"wp-block-heading\">はじめに</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ウェブスクレイピングは、ウェブサイトからデータを自動的に取得する技術で、データ分析やマーケティングなどで広く活用されています。しかし、初めて取り組む際に「どのプログラミング言語を使えばいいの？」と迷う方も多いでしょう。本記事では、ウェブスクレイピングにおすすめのプログラミング言語と、その特徴や具体的な例を交えてわかりやすく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ウェブスクレイピングに最適なプログラミング言語</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Python（パイソン）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">特徴</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>豊富なライブラリ</strong>：Beautiful Soup、Requests、Selenium、Scrapyなど、多彩なスクレイピング用ライブラリが揃っています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>シンプルな文法</strong>：初心者にも理解しやすく、コードが読みやすいです。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>活発なコミュニティ</strong>：情報が豊富で、困ったときに助けを得やすいです。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">例：基本的なスクレイピング</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import requests\nfrom bs4 import BeautifulSoup\n\n# 取得したいページのURL\nurl = 'https://www.example.com'\n\n# ページの内容を取得\nresponse = requests.get(url)\n\n# 取得したHTMLをパース\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# タイトルを取得\ntitle = soup.title.string\nprint(title)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>JavaScript（Node.js）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">特徴</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>ウェブとの親和性</strong>：ウェブ技術であるJavaScriptをそのまま使用できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>非同期処理に強い</strong>：大量のデータ取得でも高速に処理できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ヘッドレスブラウザ操作</strong>：Puppeteerなどでブラウザを自動操作可能。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">例：Puppeteerを使ったスクレイピング</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const puppeteer = require('puppeteer');\n\n(async () =&gt; {\n  // ブラウザを起動\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  // ページに移動\n  await page.goto('https://www.example.com');\n\n  // タイトルを取得\n  const title = await page.title();\n  console.log(title);\n\n  // ブラウザを閉じる\n  await browser.close();\n})();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Ruby（ルビー）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">特徴</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>簡潔で美しいコード</strong>：少ないコード量で多くのことができます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>強力なパーサー</strong>：Nokogiriライブラリで効率的にHTMLを解析。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Railsとの連携</strong>：ウェブアプリ開発者にとって扱いやすい。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">例：Nokogiriを使ったスクレイピング</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"ruby\" class=\"language-ruby\">require 'open-uri'\nrequire 'nokogiri'\n\n# 取得したいページのURL\nurl = 'https://www.example.com'\n\n# ページの内容を取得\nhtml = URI.open(url)\n\n# 取得したHTMLをパース\ndoc = Nokogiri::HTML(html)\n\n# タイトルを取得\ntitle = doc.at('title').text\nputs title\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>PHP</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">特徴</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>ウェブ開発者に馴染み深い</strong>：サーバーサイドで広く使われています。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>組み込み関数で十分</strong>：シンプルなスクレイピングなら追加ライブラリなしで可能。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>簡単な設定</strong>：サーバー環境でそのまま実行できます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">例：シンプルなスクレイピング</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">&lt;?php\n// 取得したいページのURL\n$url = 'https://www.example.com';\n\n// ページの内容を取得\n$html = file_get_contents($url);\n\n// DOM解析のためのオブジェクト作成\n$dom = new DOMDocument;\n@$dom-&gt;loadHTML($html);\n\n// タイトルを取得\n$title = $dom-&gt;getElementsByTagName('title')-&gt;item(0)-&gt;nodeValue;\necho $title;\n?&gt;\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">言語選択のポイント</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>学習コスト</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Python</strong>はシンプルな文法で、初心者にも習得しやすいです。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>JavaScript</strong>はウェブ開発経験があれば取り組みやすいでしょう。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>プロジェクトの要件</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>動的なウェブサイトをスクレイピングする場合は、**JavaScript（Node.js）**がおすすめです。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>既存のウェブアプリに組み込むなら、そのアプリの言語（例：Ruby on RailsならRuby）を使うと効率的です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>コミュニティとサポート</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Python</strong>と<strong>JavaScript</strong>はコミュニティが活発で、情報が豊富です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ウェブスクレイピングの注意点</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>法律と利用規約の遵守</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ウェブサイトの<strong>利用規約</strong>や<strong>法律</strong>を必ず確認し、無断でのデータ取得は避けましょう。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>サーバーへの負荷</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>適切な間隔を空けてリクエストを行い、<strong>サーバーに過度な負荷をかけない</strong>ようにします。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データの扱い</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>取得したデータの<strong>利用方法</strong>にも注意が必要です。プライバシーや著作権を侵害しないようにしましょう。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ウェブスクレイピングにおすすめのプログラミング言語は、主に<strong>Python</strong>、<strong>JavaScript（Node.js）</strong>、<strong>Ruby</strong>、<strong>PHP</strong>の4つです。それぞれに特徴があり、目的やスキルセットに合わせて選ぶと良いでしょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Python</strong>：初心者に最適。豊富なライブラリで強力なスクレイピングが可能。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>JavaScript（Node.js）</strong>：動的サイトに強い。非同期処理で高速。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ruby</strong>：簡潔なコード。Nokogiriで効率的にHTML解析。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>PHP</strong>：ウェブ開発者に馴染み深い。サーバー環境でそのまま動作。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>ご注意</strong>：ウェブスクレイピングを行う際は、対象サイトの利用規約や法律を遵守してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://chatgpt.com/c/67456da9-b348-8009-8d9e-2fcfae840dd1#\">トップに戻る</a></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/0a93ad025bf1448095375df3e40139a7/narityan_programming_web_scraping_e85d71c2-62a8-439d-82c1-79a277bde1ba.webp","categories":["ab2620f9b7"],"tags":["ba29ed493c"]},{"id":"db55da3fc3","publishedAt":"2024-11-25T23:00:32.000Z","title":"【完全解説】pandasでデータをフィルタリングする方法","contents":"<p>データ分析や機械学習で頻繁に使用されるPythonのライブラリ「pandas」は、データの操作や加工が非常に簡単に行えます。本記事では、<strong>pandasでデータをフィルタリングする方法</strong>を初心者にもわかりやすく解説します。データの抽出や条件による選択方法をマスターし、効率的なデータ分析を目指しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. フィルタリングの基本</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>pandasでデータをフィルタリングする基本は、<strong>ブールインデックス</strong>を使用することです。条件式を指定して、TrueまたはFalseの配列を作成し、それを元にデータを抽出します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>例：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# サンプルデータの作成\ndata = {'名前': ['太郎', '花子', '次郎', '三郎'],\n        '年齢': [25, 30, 22, 28],\n        '得点': [85, 90, 78, 88]}\ndf = pd.DataFrame(data)\n\n# 年齢が25以上のデータを抽出\ndf_filtered = df[df['年齢'] &gt;= 25]\n\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢  得点\n0  太郎  25  85\n1  花子  30  90\n3  三郎  28  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>df['年齢'] &gt;= 25</code>は、各行の年齢が25以上かどうかを判定し、ブール値のSeriesを返します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>df[ブール値のSeries]</code>で、Trueの行だけを抽出します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. 条件によるデータの抽出</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>単一条件でのフィルタリング</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>例：得点が80以上のデータを抽出</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filtered = df[df['得点'] &gt;= 80]\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢  得点\n0  太郎  25  85\n1  花子  30  90\n3  三郎  28  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>特定の値を持つデータを抽出</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>例：名前が「次郎」のデータを抽出</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filtered = df[df['名前'] == '次郎']\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢  得点\n2  次郎  22  78\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. 複数条件でのフィルタリング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>AND条件（かつ）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>例：年齢が25以上かつ得点が85以上のデータを抽出</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filtered = df[(df['年齢'] &gt;= 25) &amp; (df['得点'] &gt;= 85)]\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢  得点\n0  太郎  25  85\n1  花子  30  90\n3  三郎  28  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>OR条件（または）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>例：年齢が25以上または得点が85以上のデータを抽出</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filtered = df[(df['年齢'] &gt;= 25) | (df['得点'] &gt;= 85)]\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢  得点\n0  太郎  25  85\n1  花子  30  90\n3  三郎  28  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>AND条件には<code>&amp;</code>を使用します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>OR条件には<code>|</code>を使用します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>条件式は必ず括弧<code>()</code>で囲みます。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. 文字列によるフィルタリング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>部分一致でのフィルタリング</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>例：「郎」が名前に含まれるデータを抽出</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filtered = df[df['名前'].str.contains('郎')]\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢  得点\n0  太郎  25  85\n2  次郎  22  78\n3  三郎  28  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>str.contains('文字列')</code>で指定した文字列を含むか判定します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>指定の文字列で始まるデータを抽出</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>例：「三」で始まる名前のデータを抽出</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filtered = df[df['名前'].str.startswith('三')]\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢  得点\n3  三郎  28  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. 正規表現を使ったフィルタリング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>例：名前が一文字のデータを抽出</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filtered = df[df['名前'].str.match('^.{1}$')]\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">Empty DataFrame\nColumns: [名前, 年齢, 得点]\nIndex: []\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>str.match('正規表現')</code>で正規表現にマッチするか判定します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>上記の例では、一文字の名前を探しています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. 特定の列を選択する方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>単一の列を選択</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">得点列 = df['得点']\nprint(得点列)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">0    85\n1    90\n2    78\n3    88\nName: 得点, dtype: int64\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>複数の列を選択</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_selected = df[['名前', '得点']]\nprint(df_selected)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  得点\n0  太郎  85\n1  花子  90\n2  次郎  78\n3  三郎  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. locとilocの使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>loc（ラベルによる選択）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># インデックスが1から3までの行、'名前'と'得点'の列を選択\ndf_loc = df.loc[1:3, ['名前', '得点']]\nprint(df_loc)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  得点\n1  花子  90\n2  次郎  78\n3  三郎  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>iloc（位置による選択）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 1行目から3行目、0列目と2列目を選択\ndf_iloc = df.iloc[1:4, [0, 2]]\nprint(df_iloc)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  得点\n1  花子  90\n2  次郎  78\n3  三郎  88\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>解説：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>loc</code>は行・列の<strong>ラベル名</strong>で選択します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>iloc</code>は行・列の**位置（インデックス）**で選択します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>pandasでのデータフィルタリングは、データ分析における基本的な操作です。条件指定や列の選択、<code>loc</code>や<code>iloc</code>を活用することで、必要なデータを効率的に抽出できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>ブールインデックス</strong>で条件に合うデータを抽出</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>複数条件</strong>でより細かいフィルタリング</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>文字列操作</strong>や<strong>正規表現</strong>で高度な検索</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>locとiloc</strong>で行・列を柔軟に選択</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>これらの方法をマスターして、データ分析をスムーズに進めましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. 関連キーワード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>pandas フィルタリング</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 条件抽出</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 複数条件</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas loc iloc</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 文字列操作</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ分析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Python データ操作</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 入門</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 使い方</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas ブールインデックス</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">さらに学ぶ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/pandas-sorting/\">pandasでデータをソートする方法</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/pandas-defect-value/\">pandasで欠損値を処理するテクニック</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/python-datascience-for-biginner/\">Pythonで始めるデータ分析の基本</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>ご注意</strong>：本記事は情報提供を目的としており、特定の行動を推奨するものではありません。実際のデータ分析においては、データの性質や目的に応じて適切な方法を選択してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://chatgpt.com/c/67456da9-b348-8009-8d9e-2fcfae840dd1#\">トップに戻る</a></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f50eb8cf9167447ebbfa1f1bf15864bc/narityan_wide_PC_display_is_displaying_programming_code_the_cod_620c0722-8e5b-489f-a1ed-d2631fa18461.webp","categories":["11a4a60b51"],"tags":["ae4863bdae","11a4a60b51"]},{"id":"814fd2e8e4","publishedAt":"2024-11-25T23:06:58.000Z","title":"【完全保存版】pandasの基本的なデータ操作まとめ","contents":"<h2 class=\"wp-block-heading\">はじめに</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonのデータ分析ライブラリ「pandas」は、データの読み込みから加工、分析まで幅広く活用できます。本記事では、<strong>pandasの基本的なデータ操作</strong>について、わかりやすくまとめました。データ分析を始める上で知っておきたい操作方法を網羅していますので、ぜひ参考にしてください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. pandasとは</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>pandasは、Pythonでデータ分析を行うための強力なライブラリです。主な特徴は以下の通りです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>データフレーム（DataFrame）</strong>：行と列からなるデータ構造で、Excelのようなデータ操作が可能</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>データの読み込み・書き出し</strong>：CSVやExcel、SQLデータベースなど様々な形式に対応</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>高速なデータ操作</strong>：大規模なデータでも効率的に処理</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. データの読み込みと書き出し</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>CSVファイルの読み込み</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# CSVファイルを読み込む\ndf = pd.read_csv('data.csv')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Excelファイルの読み込み</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># Excelファイルを読み込む\ndf = pd.read_excel('data.xlsx')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データの書き出し</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># CSVファイルとして書き出す\ndf.to_csv('output.csv', index=False)\n\n# Excelファイルとして書き出す\ndf.to_excel('output.xlsx', index=False)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. データフレームの作成</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>リストや辞書からデータフレームを作成</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 辞書からデータフレームを作成\ndata = {'名前': ['太郎', '花子', '次郎'],\n        '年齢': [25, 30, 22]}\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    名前  年齢\n0  太郎  25\n1  花子  30\n2  次郎  22\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. データの確認方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データの先頭・末尾を表示</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 先頭5行を表示\nprint(df.head())\n\n# 末尾5行を表示\nprint(df.tail())\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データの基本情報を表示</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># データの情報を表示\nprint(df.info())\n\n# 統計量を表示\nprint(df.describe())\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. 列・行の選択と抽出</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>特定の列を選択</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># '名前'列を選択\nnames = df['名前']\nprint(names)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>複数の列を選択</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># '名前'と'年齢'列を選択\ndf_selected = df[['名前', '年齢']]\nprint(df_selected)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>行の選択（インデックス指定）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># インデックスが0の行を選択\nrow = df.loc[0]\nprint(row)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. データのフィルタリング</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>条件に基づくデータの抽出</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 年齢が25以上のデータを抽出\ndf_filtered = df[df['年齢'] &gt;= 25]\nprint(df_filtered)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. データの並べ替え（ソート）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>値に基づく並べ替え</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 年齢の昇順で並べ替え\ndf_sorted = df.sort_values('年齢')\nprint(df_sorted)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>複数の列で並べ替え</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># '年齢'の降順、'名前'の昇順で並べ替え\ndf_sorted = df.sort_values(['年齢', '名前'], ascending=[False, True])\nprint(df_sorted)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. 欠損値の処理</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>欠損値を持つデータフレームの作成</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import numpy as np\n\ndata = {'名前': ['太郎', '花子', '次郎'],\n        '年齢': [25, np.nan, 22]}\ndf = pd.DataFrame(data)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>欠損値の確認</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 欠損値の数を確認\nprint(df.isnull().sum())\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>欠損値の削除</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 欠損値を含む行を削除\ndf_dropped = df.dropna()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>欠損値の補完</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 欠損値を平均値で補完\ndf_filled = df.fillna(df['年齢'].mean())\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. 新しい列・行の追加</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>新しい列の追加</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># '得点'列を追加\ndf['得点'] = [85, 90, 78]\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>計算結果を新しい列として追加</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># '年齢'を2倍した値を'年齢×2'列として追加\ndf['年齢×2'] = df['年齢'] * 2\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>新しい行の追加</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 新しい行を追加\ndf = df.append({'名前': '四郎', '年齢': 24, '得点': 82}, ignore_index=True)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10. グループ化と集計</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>グループ化して集計</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># '名前'でグループ化して'得点'の平均を計算\ndf_grouped = df.groupby('名前')['得点'].mean()\nprint(df_grouped)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">11. データの結合・マージ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データの結合（縦方向）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># データフレームを縦に結合\ndf_combined = pd.concat([df1, df2])\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データのマージ（横方向）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 共通のキーでデータフレームをマージ\ndf_merged = pd.merge(df_left, df_right, on='キー列')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">12. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>pandasを使った基本的なデータ操作について解説しました。これらの操作を習得することで、データの読み込みから加工、分析まで一連の流れを効率的に進めることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>データの読み込みと書き出し</strong>：様々な形式に対応</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>データの確認と抽出</strong>：データの理解と必要な部分の抽出</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>データの加工</strong>：フィルタリング、並べ替え、欠損値処理など</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>データの統合と集計</strong>：グループ化やデータの結合で高度な分析</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">13. 関連キーワード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>pandas 使い方</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas データ操作</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas データフレーム</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Python データ分析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>pandas 入門</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ読み込み</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ前処理</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データフィルタリング</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>欠損値処理</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データマージ</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">さらに学ぶ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/pandas-filterling/\">pandasでデータをフィルタリングする方法</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/pandas_dataframe_delete/\">pandasで行・列を削除する様々な方法</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/python-datascience-for-biginner/\">Pythonで始めるデータ分析の基本</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>ご注意</strong>：本記事は情報提供を目的としており、特定の行動を推奨するものではありません。実際のデータ分析においては、データの性質や目的に応じて適切な方法を選択してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://chatgpt.com/c/67456da9-b348-8009-8d9e-2fcfae840dd1#\">トップに戻る</a></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f50eb8cf9167447ebbfa1f1bf15864bc/narityan_wide_PC_display_is_displaying_programming_code_the_cod_620c0722-8e5b-489f-a1ed-d2631fa18461.webp","categories":["11a4a60b51"],"tags":["ae4863bdae","11a4a60b51"]},{"id":"9be3da431e","publishedAt":"2024-11-25T23:38:06.000Z","title":"Pythonで始めるデータ分析入門：初心者でもわかるステップバイステップガイド","contents":"<h2 class=\"wp-block-heading\">はじめに</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データ分析は、現代のビジネスや研究で不可欠なスキルとなっています。その中でも、<strong>Python</strong>は使いやすさと強力なライブラリ群で人気の高いプログラミング言語です。本記事では、プログラミング初心者でも理解できるように、Pythonを使ったデータ分析の基本をステップバイステップで解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">なぜPythonでデータ分析を行うのか？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>1. 豊富なライブラリ</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonには、データ分析に特化したライブラリが数多く存在します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>NumPy</strong>：数値計算を効率的に行うためのライブラリ</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Pandas</strong>：データ操作や加工を容易にするデータフレームを提供</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Matplotlib</strong>：データの可視化に使用</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Scikit-learn</strong>：機械学習アルゴリズムが豊富</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>2. シンプルで読みやすい文法</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonのコードは英語に近い形で書かれており、初心者でも理解しやすいです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>3. 大規模なコミュニティ</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>困ったときに助けを得られるコミュニティが活発で、情報も豊富です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">必要な環境の準備</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Pythonのインストール</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずはPythonをインストールします。最新版のPython 3.x系を公式サイトからダウンロードしましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://www.python.org/downloads/\">Python公式サイト</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Anacondaの利用（おすすめ）</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データ分析に必要なライブラリが一括でインストールされている<strong>Anaconda</strong>を利用すると便利です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://www.anaconda.com/products/individual\">Anaconda公式サイト</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Jupyter Notebookのインストール</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>コードの実行と結果の確認が容易な<strong>Jupyter Notebook</strong>を使用します。Anacondaには既に含まれています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">実際に手を動かしてみよう</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ1：Jupyter Notebookの起動</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ターミナル（コマンドプロンプト）で以下のコマンドを入力します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">jupyter notebook\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>ブラウザが自動的に開きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ2：ライブラリのインポート</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下のコードを入力して、必要なライブラリをインポートします。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ3：データの読み込み</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>サンプルデータとして、CSVファイルを読み込みます。ここでは、<code>sample_data.csv</code>というファイルを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">data = pd.read_csv('sample_data.csv')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ4：データの確認</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データの先頭5行を表示します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">data.head()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ5：基本的なデータ分析</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>データの基本統計量を表示</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">data.describe()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>欠損値の確認</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">data.isnull().sum()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ6：データの可視化</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>ヒストグラムの作成</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">data['column_name'].hist()\nplt.xlabel('値')\nplt.ylabel('頻度')\nplt.title('ヒストグラム')\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>散布図の作成</strong></h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">plt.scatter(data['column_x'], data['column_y'])\nplt.xlabel('X軸のラベル')\nplt.ylabel('Y軸のラベル')\nplt.title('散布図')\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">具体的な例：売上データの分析</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>サンプルデータの作成</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# サンプルデータの作成\ndata = {\n    'Month': ['January', 'February', 'March', 'April', 'May'],\n    'Revenue': [1000, 1500, 2000, 2500, 3000]\n}\n\ndf = pd.DataFrame(data)\n\n# CSVファイルとして保存\ndf.to_csv('sales_data.csv', index=False)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データの読み込み</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">sales_data = pd.read_csv('sales_data.csv')\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>月別売上の集計</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">monthly_sales = sales_data.groupby('Month')['Revenue'].sum()\nprint(monthly_sales)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":430,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/cf18cbef18fa43f8a8f54a73438495ba/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-26-17.34.50-1024x368.webp\" alt=\"Pythonによるデータ分析の例\" class=\"wp-image-430\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>月別売上の折れ線グラフ</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import matplotlib.pyplot as plt\n\nmonthly_sales.plot(kind='line')\nplt.xlabel('Month')\nplt.ylabel('Revenue')\nplt.title('Monthly Sales Trend')\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":431,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/a829a90c514a41819d6f2f3680788983/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-26-17.35.56-1024x549.webp\" alt=\"Pythonによるデータ分析の例：グラフの描画\" class=\"wp-image-431\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">次のステップ：機械学習への応用</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データ分析の次のステップとして、機械学習を用いた予測モデルの構築があります。Pythonの<strong>Scikit-learn</strong>ライブラリを使うことで、以下のようなことが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>回帰分析による売上予測</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>クラスタリングによる顧客セグメンテーション</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>分類モデルによる顧客行動の予測</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>本記事では、Pythonを使ったデータ分析の基本的な流れを解説しました。Pythonはデータ分析に非常に適した言語であり、初心者でも取り組みやすい環境が整っています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>重要なポイント</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>PythonとAnacondaをインストールして環境を整える</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Jupyter Notebookでコードを実行しながら学ぶ</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>PandasやNumPyなどのライブラリを活用する</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データの読み込みから可視化までの基本的な流れを理解する</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">関連キーワード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Python</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ分析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pandas</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>NumPy</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Matplotlib</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Jupyter Notebook</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>機械学習</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ可視化</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>初心者向け</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>プログラミング入門</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">参考リンク</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://docs.python.org/ja/3/\">Python公式ドキュメント</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://pandas.pydata.org/docs/\">Pandas公式ドキュメント</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://matplotlib.org/\">Matplotlib公式サイト</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://scikit-learn.org/stable/\">Scikit-learn公式サイト</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">次に読むべき記事</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://chatgpt.com/c/67456da9-b348-8009-8d9e-2fcfae840dd1#\">実践！PythonでWebスクレイピングを行う方法</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>注意事項</strong>：データ分析を行う際は、データの取り扱いに関する法律や規約を遵守してください。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/df804c9fa80b4c8ea53db20b3d256b0d/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-04-05-21.34.33.webp","categories":["11a4a60b51"],"tags":["11a4a60b51"]},{"id":"aaf01d71b5","publishedAt":"2024-11-25T23:45:27.000Z","title":"Pandasで欠損値を処理するテクニック：データクレンジングの基本","contents":"<h2 class=\"wp-block-heading\">はじめに</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データ分析や機械学習の前処理において、<strong>欠損値（Missing Values）</strong> の処理は非常に重要です。欠損値を適切に処理しないと、分析結果が歪んだり、エラーが発生したりする可能性があります。本記事では、Pythonのデータ解析ライブラリである<strong>Pandas</strong>を使用して、欠損値を効果的に処理するためのテクニックを詳しく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">欠損値とは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>欠損値とは、データセット内で値が存在しない部分のことを指します。Pandasでは、欠損値は通常<code>NaN</code>（Not a Number）や<code>None</code>として表現されます。欠損値が存在する原因はさまざまで、データ収集時のエラーや回答の無記入などが挙げられます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データの準備</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは、サンプルデータを用意します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\nimport numpy as np\n\n# サンプルデータの作成\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    'Age': [24, np.nan, 22, 23, np.nan],\n    'City': ['New York', 'Los Angeles', np.nan, 'Chicago', 'Houston'],\n    'Score': [85, 90, np.nan, 88, 92]\n}\n\ndf = pd.DataFrame(data)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>データフレームの表示</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">print(df)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">      Name   Age         City  Score\n0    Alice  24.0     New York   85.0\n1      Bob   NaN  Los Angeles   90.0\n2  Charlie  22.0          NaN    NaN\n3    David  23.0      Chicago   88.0\n4      Eve   NaN      Houston   92.0\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">欠損値の検出</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4.1 欠損値の有無を確認する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df.isnull()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">     Name    Age   City  Score\n0  False  False  False  False\n1  False   True  False  False\n2  False  False   True   True\n3  False  False  False  False\n4  False   True  False  False\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4.2 列ごとの欠損値の合計を確認する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df.isnull().sum()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">Name     0\nAge      2\nCity     1\nScore    1\ndtype: int64\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">欠損値の削除</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5.1 欠損値を含む行の削除</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_dropped_rows = df.dropna()\nprint(df_dropped_rows)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">    Name   Age      City  Score\n0  Alice  24.0  New York   85.0\n3  David  23.0   Chicago   88.0\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5.2 欠損値を含む列の削除</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_dropped_columns = df.dropna(axis=1)\nprint(df_dropped_columns)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">      Name\n0    Alice\n1      Bob\n2  Charlie\n3    David\n4      Eve\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>注意点</strong>：重要な情報が失われる可能性があるため、欠損値の削除は慎重に行う必要があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">欠損値の置換（補完）</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6.1 特定の値で置換する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">6.1.1 固定値で置換</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filled = df.fillna(0)\nprint(df_filled)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">      Name   Age         City  Score\n0    Alice  24.0     New York   85.0\n1      Bob   0.0  Los Angeles   90.0\n2  Charlie  22.0            0    0.0\n3    David  23.0      Chicago   88.0\n4      Eve   0.0      Houston   92.0\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">6.1.2 列ごとに異なる値で置換</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_filled_cols = df.fillna({'Age': df['Age'].mean(), 'Score': df['Score'].median()})\nprint(df_filled_cols)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">      Name        Age         City  Score\n0    Alice  24.000000     New York   85.0\n1      Bob  23.000000  Los Angeles   90.0\n2  Charlie  22.000000          NaN   88.0\n3    David  23.000000      Chicago   88.0\n4      Eve  23.000000      Houston   92.0\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6.2 前後の値で置換する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">6.2.1 前の値で置換（前方埋め）</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_ffill = df.fillna(method='ffill')\nprint(df_ffill)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">      Name   Age         City  Score\n0    Alice  24.0     New York   85.0\n1      Bob  24.0  Los Angeles   90.0\n2  Charlie  22.0  Los Angeles   90.0\n3    David  23.0      Chicago   88.0\n4      Eve  23.0      Houston   92.0\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">6.2.2 後の値で置換（後方埋め）</h4>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">df_bfill = df.fillna(method='bfill')\nprint(df_bfill)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">      Name   Age         City  Score\n0    Alice  24.0     New York   85.0\n1      Bob  22.0  Los Angeles   90.0\n2  Charlie  22.0      Chicago   88.0\n3    David  23.0      Chicago   88.0\n4      Eve   NaN      Houston   92.0\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">欠損値の埋め方の選択</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7.1 データの性質を考慮する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>平均値で埋める</strong>：数値データで外れ値が少ない場合。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>中央値で埋める</strong>：外れ値の影響を抑えたい場合。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>最頻値で埋める</strong>：カテゴリーデータに適用。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7.2 モデルを使用した補完</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>機械学習モデル</strong>を使用して、欠損値を予測する高度な方法もあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from sklearn.impute import KNNImputer\n\nimputer = KNNImputer(n_neighbors=2)\ndf_numeric = df.select_dtypes(include=[np.number])\ndf_imputed = pd.DataFrame(imputer.fit_transform(df_numeric), columns=df_numeric.columns)\nprint(df_imputed)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">実践的なテクニック</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8.1 欠損値の可視化</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>欠損値の分布を視覚的に確認することで、より適切な処理方法を選択できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.heatmap(df.isnull(), cbar=False)\nplt.show()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8.2 条件付きで欠損値を処理する</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>特定の条件を満たす行のみ欠損値を埋めることができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 'Age'が欠損しているが、'Score'が高い人の'Age'を平均値で埋める\nmean_age = df['Age'].mean()\ndf.loc[(df['Age'].isnull()) &amp; (df['Score'] &gt; 90), 'Age'] = mean_age\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>欠損値の適切な処理は、データ分析の精度を大きく左右します。Pandasを使用することで、簡単かつ柔軟に欠損値を検出・処理することが可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>ポイントのまとめ</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>欠損値の検出</strong>：<code>isnull()</code>や<code>sum()</code>を使用して欠損値の状況を把握。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>欠損値の削除</strong>：<code>dropna()</code>で行や列を削除（ただし情報の損失に注意）。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>欠損値の置換</strong>：<code>fillna()</code>を使用して、平均値や前後の値で埋める。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>高度な補完</strong>：機械学習モデルを使用して欠損値を予測・補完。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">関連キーワード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Pandas</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>欠損値処理</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データクレンジング</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ前処理</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Python</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ分析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>fillna</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>dropna</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>欠損値の可視化</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>機械学習による補完</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">参考リンク</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html\">Pandas公式ドキュメント：欠損値の操作</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.impute.KNNImputer.html\">Scikit-learn公式ドキュメント：KNNImputer</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ご質問・ご意見</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>欠損値処理に関する疑問やご意見がありましたら、お気軽にコメントやお問い合わせください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">注意事項</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データの取り扱いに関する法律や規約を遵守してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/ad312683a8844ba281bd40e8b169a64c/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2024-11-26-17.44.07.webp","categories":["11a4a60b51"],"tags":["ae4863bdae","11a4a60b51"]},{"id":"18d37c950a","publishedAt":"2024-11-25T23:53:55.000Z","title":"Pandasでデータをソートする方法：ステップバイステップガイド","contents":"<h2 class=\"wp-block-heading\">はじめに</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データ分析において、データを特定の順序でソートすることは基本中の基本です。Pythonのデータ解析ライブラリである<strong>Pandas</strong>を使用すれば、データのソートを簡単かつ柔軟に行うことができます。本記事では、初心者の方でも理解できるように、Pandasを使ったデータのソート方法をステップバイステップで解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pandasとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pandas</strong>は、Pythonでデータ操作や分析を行うためのライブラリです。表形式のデータを扱うのに便利な<strong>DataFrame</strong>というデータ構造を提供しており、データの読み込み、操作、分析、可視化など、多彩な機能を備えています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データの準備</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは、サンプルデータを用意します。以下のコードを実行して、サンプルのデータフレームを作成しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import pandas as pd\n\n# サンプルデータの作成\ndata = {\n    'Product': ['A', 'B', 'C', 'D', 'E'],\n    'Price': [500, 1500, 800, 1200, 700],\n    'Quantity': [5, 2, 7, 3, 9]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  Product  Price  Quantity\n0       A    500         5\n1       B   1500         2\n2       C    800         7\n3       D   1200         3\n4       E    700         9\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">データをソートする基本的な方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pandasでデータをソートするには、<code>sort_values()</code> メソッドを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4.1 昇順でソートする</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>Price</code> 列を昇順（小さい順）でソートしてみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># Price列で昇順ソート\ndf_sorted_asc = df.sort_values(by='Price')\nprint(df_sorted_asc)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  Product  Price  Quantity\n0       A    500         5\n4       E    700         9\n2       C    800         7\n3       D   1200         3\n1       B   1500         2\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4.2 降順でソートする</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>Price</code> 列を降順（大きい順）でソートする場合は、<code>ascending=False</code> を指定します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># Price列で降順ソート\ndf_sorted_desc = df.sort_values(by='Price', ascending=False)\nprint(df_sorted_desc)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  Product  Price  Quantity\n1       B   1500         2\n3       D   1200         3\n2       C    800         7\n4       E    700         9\n0       A    500         5\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">複数の列でソートする</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数の列を基準にソートすることも可能です。<code>by</code> パラメータにリストで列名を渡します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># Priceを昇順、Quantityを降順でソート\ndf_sorted_multi = df.sort_values(by=['Price', 'Quantity'], ascending=[True, False])\nprint(df_sorted_multi)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  Product  Price  Quantity\n0       A    500         5\n4       E    700         9\n2       C    800         7\n3       D   1200         3\n1       B   1500         2\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">インデックスでソートする</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データフレームのインデックス自体をソートするには、<code>sort_index()</code> メソッドを使用します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># インデックスでソート（降順）\ndf_sorted_index = df.sort_index(ascending=False)\nprint(df_sorted_index)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  Product  Price  Quantity\n4       E    700         9\n3       D   1200         3\n2       C    800         7\n1       B   1500         2\n0       A    500         5\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ソート結果を保持する方法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>デフォルトでは、<code>sort_values()</code> や <code>sort_index()</code> はソート後の新しいデータフレームを返します。元のデータフレームを変更したい場合は、<code>inplace=True</code> を指定します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># 元のデータフレームを変更して昇順ソート\ndf.sort_values(by='Price', inplace=True)\nprint(df)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">  Product  Price  Quantity\n0       A    500         5\n4       E    700         9\n2       C    800         7\n3       D   1200         3\n1       B   1500         2\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">実践例：売上データのソート</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ1：データの読み込み</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>売上データを含む <code>sales_data.csv</code> ファイルを読み込みます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># sales_data.csv の読み込み\ndf_sales = pd.read_csv('sales_data.csv')\nprint(df_sales.head())\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>例のデータ</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">   OrderID Customer   Amount\n0        1     John    2500\n1        2     Mike    1500\n2        3     Sara    3200\n3        4     Mike    2800\n4        5     John    3000\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ2：特定の列でソート</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>Amount</code> 列で降順ソートして、売上金額の高い順に並べます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># Amount列で降順ソート\ndf_sales_sorted = df_sales.sort_values(by='Amount', ascending=False)\nprint(df_sales_sorted.head())\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">   OrderID Customer   Amount\n2        3     Sara    3200\n4        5     John    3000\n3        4     Mike    2800\n0        1     John    2500\n1        2     Mike    1500\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ステップ3：複数の列でソート</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>Customer</code> 列で昇順、<code>Amount</code> 列で降順にソートして、顧客ごとに売上金額の高い順に並べます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\"># Customerを昇順、Amountを降順でソート\ndf_sales_sorted_multi = df_sales.sort_values(by=['Customer', 'Amount'], ascending=[True, False])\nprint(df_sales_sorted_multi)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">   OrderID Customer   Amount\n4        5     John    3000\n0        1     John    2500\n3        4     Mike    2800\n1        2     Mike    1500\n2        3     Sara    3200\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pandasを使用すると、データを簡単にソートすることができます。<code>sort_values()</code> メソッドを活用して、さまざまな条件でデータを並び替えましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>重要なポイント</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>単一の列でソート</strong>：<code>sort_values(by='列名')</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>複数の列でソート</strong>：<code>sort_values(by=['列名1', '列名2'], ascending=[True, False])</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>インデックスでソート</strong>：<code>sort_index()</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>元のデータフレームを変更</strong>：<code>inplace=True</code> を指定</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">関連キーワード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Pandas</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データソート</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>sort_values</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ分析</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Python</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>DataFrame</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>昇順ソート</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>降順ソート</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>インデックスソート</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データ操作</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">参考リンク</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sort_values.html\">Pandas公式ドキュメント：sort_values</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sort_index.html\">Pandas公式ドキュメント：sort_index</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://2jigenha.com/python-datascience-for-biginner/\">Pythonでのデータ分析入門</a></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ご質問・ご意見</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データのソートに関する疑問やご意見がありましたら、お気軽にコメントやお問い合わせください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">注意事項</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>データの取り扱いに関する法律や規約を遵守してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f50eb8cf9167447ebbfa1f1bf15864bc/narityan_wide_PC_display_is_displaying_programming_code_the_cod_620c0722-8e5b-489f-a1ed-d2631fa18461.webp","categories":["11a4a60b51"],"tags":["ae4863bdae","11a4a60b51"]},{"id":"841a05fd37","publishedAt":"2024-11-28T07:36:25.000Z","title":"GASで簡単Webスクレイピング！コード例と注意点を解説","contents":"<p>Google Apps Script (GAS) を活用して、効率的にWebスクレイピングを行う方法をご存じですか？この記事では、GASでのWebスクレイピングの基本から応用まで、実際のコード例を交えて詳しく解説します。初心者の方でも簡単に始められる内容となっています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">GASでWebスクレイピングを行うメリットとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":461,\"width\":\"724px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/4027c336747a474287e36342aef4eb97/GAS_Logo.webp\" alt=\"GAS_ウェブスクレイピング\" class=\"wp-image-461\" style=\"width:724px;height:auto\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>無料で利用可能</strong>：Googleアカウントさえあれば、無料で利用できます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>クラウド上で実行可能</strong>：ローカル環境を構築する必要がありません。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Googleサービスとの連携</strong>：スプレッドシートやGoogle Driveとの連携が簡単。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">実際にGASでWebスクレイピングをしてみよう</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">必要な準備</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Googleアカウントの作成</strong>：すでにお持ちの方は不要です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Google Apps Scriptのプロジェクト作成</strong>：<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Google Driveにアクセスし、「+ 新規」 &gt; 「その他」 &gt; 「Google Apps Script」を選択。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">実際のコード例：簡単なWebページの情報取得</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下の例では、GASを使って指定したURLのタイトルを取得します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function scrapeWebPage() {\n  var url = \"https://example.com\"; // スクレイピング対象のURL\n  var response = UrlFetchApp.fetch(url); // URLの内容を取得\n  var html = response.getContentText(); // HTMLをテキストとして取得\n  var title = html.match(/&lt;title&gt;([\\s\\S]*?)&lt;\\/title&gt;/)[1]; // タイトルタグを抽出\n\n  Logger.log(\"ページのタイトルは: \" + title);\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コードの解説</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><code>UrlFetchApp.fetch(url)</code></strong>: 指定したURLのHTMLを取得します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>正規表現</strong>: <code>&lt;title&gt;</code>タグからタイトル部分を抽出します。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>Logger.log()</code></strong>: 実行結果をログに表示します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">GASでスクレイピング結果をGoogleスプレッドシートに保存</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次のコードは、取得したデータをGoogleスプレッドシートに自動的に保存する方法です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function scrapeAndSaveToSheet() {\n  var url = \"https://example.com\";\n  var response = UrlFetchApp.fetch(url);\n  var html = response.getContentText();\n  var title = html.match(/&lt;title&gt;([\\s\\S]*?)&lt;\\/title&gt;/)[1];\n\n  // スプレッドシートに保存\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  sheet.appendRow([url, title]); // URLとタイトルを1行に追加\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">注意点とベストプラクティス</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>利用規約の確認</strong>：Webスクレイピングを行う際は、対象サイトの利用規約を確認してください。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>アクセス頻度の制御</strong>：頻繁なリクエストは、サーバーに負荷をかける可能性があります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>GASの制限</strong>：リクエスト数や実行時間に制限があるため、大量のデータを取得する場合は工夫が必要です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">GASでのスクレイピングをさらに便利にするTips</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>スプレッドシートと連携</strong>：<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>スプレッドシートにスクレイピング対象のURLリストを記載し、1つずつ処理する方法。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>エラー処理の実装</strong>：<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>サイトがダウンしている場合やHTML構造が変更された場合でもエラーにならないように工夫します。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function scrapeWithErrorHandling() {\n  try {\n    var url = \"https://example.com\";\n    var response = UrlFetchApp.fetch(url);\n    var html = response.getContentText();\n    var title = html.match(/&lt;title&gt;([\\s\\S]*?)&lt;\\/title&gt;/)[1];\n    Logger.log(\"タイトル: \" + title);\n  } catch (e) {\n    Logger.log(\"エラーが発生しました: \" + e.message);\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>GASを使ったWebスクレイピングは、初心者から上級者まで活用できる便利なツールです。無料で始められるうえにGoogleサービスとの親和性が高い点が魅力です。この記事で紹介したコード例を活用し、自分だけのスクレイピングツールを作成してみましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>今すぐ試してみたい方</strong>は、この記事を参考にGASプロジェクトを作成し、ぜひ実践してみてください！</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/2fb56f7e4ebf4b839ec7b4806465be3a/narityan_web_scraping_fbb6b2d8-29d3-4179-b0b0-cf4f8ac0f38f.webp","categories":["2fe840e132","ab2620f9b7"],"tags":["2fe840e132","eda71746c0","ba29ed493c"]},{"id":"06de973bb4","publishedAt":"2024-11-30T03:58:22.000Z","title":"WebスクレイピングをJavaScriptで実現する方法【初心者向け】","contents":"<p>JavaScriptは、ブラウザ操作や動的ページのデータ取得に適した言語です。本記事では、Node.jsとPuppeteerを使ったWebスクレイピングの方法を詳しく解説します。必要な開発環境からサンプルコード、エラーの対処法までを網羅しています。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Webスクレイピングとは？</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Webスクレイピングとは、ウェブサイトからデータを自動的に取得する技術です。ニュースサイトの記事一覧や商品の価格データを収集するといった用途に利用されます。大量のデータを自動で集めたい時に非常に便利ですね。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. JavaScriptでWebスクレイピングを行うメリット</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonをはじめ色々な言語でウェブスクレイピングができますが、JavaScriptでももちろんできます。JavaScriptを使うメリットは以下の通りです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>ブラウザ環境で動作</strong><br>動的に生成されるページにも対応可能。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>学習コストが低い</strong><br>フロントエンド経験者にとって馴染みやすい。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>豊富なライブラリ</strong><br>PuppeteerやAxiosなど、強力なツールが揃っています。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. 必要な開発環境</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下の開発環境を用意します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Node.js</strong><br>JavaScriptをサーバーサイドで実行するためのランタイム。<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https://nodejs.org/\">Node.js公式サイト</a>から最新のLTS版をインストール。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Puppeteer</strong><br>ブラウザを操作するためのライブラリ。<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>以下のコマンドでインストール： <code>npm install puppeteer</code></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>コードエディタ</strong><br>Visual Studio Code（VS Code）など。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. Puppeteerを使ったスクレイピングの基本</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Puppeteerを使うことで、Google Chromeを操作してデータを収集できます。具体的には、以下の操作が可能です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ウェブページの自動操作</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>動的に生成されるデータの取得</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>PDFやスクリーンショットの生成</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. サンプルコード：ウェブページのタイトルを取得</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下は、指定したウェブサイトのタイトルを取得するサンプルコードです。以下のコード例では「<a href=\"https://www.yahoo.co.jp/\">https://www.yahoo.co.jp/</a>」のタイトルを取得します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コード例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const puppeteer = require('puppeteer');\n\n(async () =&gt; {\n  // ブラウザを起動\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  // ページにアクセス\n  await page.goto('https://www.yahoo.co.jp/');\n\n  // ページのタイトルを取得\n  const title = await page.title();\n  console.log('ページタイトル:', title);\n\n  // ブラウザを閉じる\n  await browser.close();\n})();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>出力結果：</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":464,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/cb594d53477c4d408d76e0d4880115c6/Screenshot-2024-11-30-at-21.53.59.webp\" alt=\"JavaScript_webスクレイピングの結果\" class=\"wp-image-464\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">実行方法</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>上記コードを <code>scraper.js</code> という名前で保存。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>ターミナルで以下を実行： <code>node scraper.js</code></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>実行すると、ページタイトルがコンソールに表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. よくあるエラーと対処法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">エラー1: <code>Could not find Chrome</code></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>原因</strong>: Puppeteerが使用するChromeが見つからない。<br><strong>対処方法</strong>: 以下のコマンドでChromeをインストール。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">npx puppeteer install\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">エラー2: <code>SyntaxError: Unexpected token '??='</code></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>原因</strong>: Node.jsのバージョンが古い。<br><strong>対処方法</strong>: Node.jsを最新バージョンに更新。以下を実行。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">nvm install node\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">エラー3: <code>EACCES: permission denied</code></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>原因</strong>: パーミッションの問題でキャッシュディレクトリが使用できない。<br><strong>対処方法</strong>: キャッシュディレクトリを手動で設定。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">export PUPPETEER_CACHE_DIR=~/.cache/puppeteer\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">エラー4: タイムアウト</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>原因</strong>: ページ読み込みが遅い。<br><strong>対処方法</strong>: タイムアウト時間を延長。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">await page.goto('https://example.com', { timeout: 60000 });\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScriptとPuppeteerを使えば、Webスクレイピングを効率的に実現できます。本記事で紹介した方法を活用して、ご自身のプロジェクトに役立ててください。さらに詳しい使い方は<a href=\"https://2jigenha.com/how-to-use-puppeteer/\">https://2jigenha.com/how-to-use-puppeteer/</a>を参照してください！</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e51ec638e07942cc8108cd0f8bf89c01/gpme2h882i6xab1cp3vt.webp","categories":["eda71746c0","ab2620f9b7"],"tags":["eda71746c0","ba29ed493c"]},{"id":"e078af3026","publishedAt":"2024-11-30T04:15:58.000Z","title":"Puppeteerの使い方完全マニュアル【スクレイピング・自動化・応用例】","contents":"<p>PuppeteerはGoogleが開発したNode.js用ライブラリで、ChromeやChromiumブラウザを操作できます。ウェブスクレイピングやE2Eテスト、タスクの自動化など、幅広い用途で活用されています。本記事では、基本的なセットアップ方法から、実践的なコード例、さらに応用例やエラー解決方法まで解説します！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Puppeteerとは？概要と特徴</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>PuppeteerはNode.jsを使ってChromeブラウザを操作できるオープンソースライブラリです。以下がPuppeteerの主な特徴です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>特徴</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>動的ページに対応</strong>: ReactやVue.jsで構築されたシングルページアプリケーション（SPA）のデータも取得可能。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ブラウザ自動化</strong>: ページ操作、スクロール、クリック、フォーム入力などを簡単に自動化。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>データ収集</strong>: 通常のHTTPリクエストでは取得できないコンテンツ（例: JavaScriptで生成される内容）を収集。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ファイル生成</strong>: PDFやスクリーンショットを簡単に作成。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Puppeteerのインストールとセットアップ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">必要な環境</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Node.js</strong>: 最新のLTSバージョン（推奨）をインストール。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>npm</strong>: Node.jsに付属しているパッケージ管理ツール。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">インストール手順</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Node.jsをインストール</strong><br><a href=\"https://nodejs.org/\">Node.js公式サイト</a>からダウンロードしてインストールします。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Puppeteerをインストール</strong><br>ターミナルで以下のコマンドを実行してください： <code>npm install puppeteer</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Puppeteerの動作確認</strong><br>以下のスクリプトを実行して、インストールが正しく行われたか確認します： <code>const puppeteer = require('puppeteer'); console.log('Puppeteer is ready!');</code></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Puppeteerの基本的な使い方</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Puppeteerを使用する際に覚えておきたい基本操作を紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ブラウザの起動</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const browser = await puppeteer.launch();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>ページの生成</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const page = await browser.newPage();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>指定URLにアクセス</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">await page.goto('https://example.com');\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>データの取得</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScriptで動的に生成されるコンテンツも取得可能：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const data = await page.evaluate(() =&gt; document.querySelector('h1').innerText);\nconsole.log(data);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>スクリーンショットの撮影</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">await page.screenshot({ path: 'screenshot.png', fullPage: true });\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>PDFの生成</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">await page.pdf({ path: 'output.pdf', format: 'A4' });\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. 実践的なスクレイピング例</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例1: ページタイトルの取得</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">(async () =&gt; {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  \n  const title = await page.title();\n  console.log('ページタイトル:', title);\n\n  await browser.close();\n})();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例2: 特定の要素の取得</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>指定したCSSセレクタの内容を取得します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const content = await page.evaluate(() =&gt; document.querySelector('.target-class').innerText);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>例3: リストデータの収集</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>複数の要素を取得し、配列で返します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">const items = await page.evaluate(() =&gt; {\n  return Array.from(document.querySelectorAll('.list-item')).map(item =&gt; item.textContent);\n});\nconsole.log(items);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. 応用例：Puppeteerを使った高度なブラウザ操作</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>1. フォームの自動入力と送信</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">await page.type('#username', 'testuser');\nawait page.type('#password', 'password123');\nawait page.click('#submit-button');\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>2. JavaScriptコードの実行</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ページ内で任意のJavaScriptコードを実行できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">await page.evaluate(() =&gt; {\n  document.body.style.backgroundColor = 'blue';\n});\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>3. ページのリクエストをインターセプト</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">page.on('request', request =&gt; {\n  if (request.resourceType() === 'image') {\n    request.abort(); // 画像リソースをブロック\n  } else {\n    request.continue();\n  }\n});\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Puppeteerを利用する際の注意点</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>利用規約の遵守</strong>: スクレイピング対象サイトの利用規約を必ず確認。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>リクエスト間隔の設定</strong>: サーバーへの負荷を避けるために適切な間隔を設ける。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>リソースの管理</strong>: ブラウザの終了処理を忘れない（<code>await browser.close()</code>）。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. よくあるエラーとその対処法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>エラー1: Could not find Chrome</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>原因</strong>: Puppeteerが使用するChromeが見つからない。<br><strong>対処法</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">npx puppeteer install\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>エラー2: TimeoutError</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>原因</strong>: ページの読み込みが遅い。<br><strong>対処法</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">await page.goto('https://example.com', { timeout: 60000 });\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>エラー3: SyntaxError: Unexpected token '??='</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>原因</strong>: Node.jsのバージョンが古い。<br><strong>対処法</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"bash\" class=\"language-bash\">nvm install node\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. Puppeteerと他のライブラリの比較</h2>\n<!-- /wp:heading -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table class=\"has-fixed-layout\"><thead><tr><th>ライブラリ</th><th>特徴</th><th>適用例</th></tr></thead><tbody><tr><td><strong>Puppeteer</strong></td><td>Chrome操作、自動化に特化</td><td>動的ページのスクレイピング</td></tr><tr><td><strong>Playwright</strong></td><td>複数ブラウザ対応（Firefox, WebKitなど）</td><td>クロスブラウザテスト</td></tr><tr><td><strong>Cheerio</strong></td><td>HTMLの解析に特化（ブラウザなし）</td><td>静的ページのスクレイピング</td></tr></tbody></table></figure>\n<!-- /wp:table -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Puppeteerは、ブラウザを自動化し、スクレイピングやテストに活用するための非常に強力なツールです。本記事で紹介した基本操作から応用例までを参考に、あなたのプロジェクトに役立ててください。また、エラーが発生した場合は本記事のトラブルシューティングを活用してください</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/e51ec638e07942cc8108cd0f8bf89c01/gpme2h882i6xab1cp3vt.webp","categories":["eda71746c0","ab2620f9b7"],"tags":["eda71746c0","c83c91fa43","ba29ed493c"]},{"id":"b6cb293891","publishedAt":"2024-12-04T06:13:41.000Z","title":"VBAで始めるWebスクレイピング：初心者向けガイド","contents":"<h2 class=\"wp-block-heading\">はじめに</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>VBAでWebスクレイピング</strong>を行いたいと考えている方へ。本記事では、VBA（Visual Basic for Applications）を使ってWebサイトからデータを取得する方法を解説します。ExcelとVBAを活用することで手動でのデータ収集を自動化し、作業効率を一気に向上させましょう！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Webスクレイピングとは</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Webスクレイピング</strong>は、ウェブサイトから特定の情報を自動的に抽出する技術です。これにより、大量のデータを手動でコピー＆ペーストする手間を省き、効率的に情報を収集できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. VBAでWebスクレイピングを行うメリット</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Excelとの連携</strong>：取得したデータをそのままExcelに保存・分析可能</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>手軽さ</strong>：追加のソフトウェアやライブラリを必要とせず、Excelだけで完結</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>自動化</strong>：定期的なデータ取得を自動化し、時間を節約</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. 必要な準備</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3.1. 開発者タブの表示</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Excelを開き、メニューの「ファイル」→「オプション」を選択</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>「リボンのユーザー設定」をクリック</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>右側の「開発者」にチェックを入れ、「OK」をクリック</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":473,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/83fffa3f7c0d43ee85002e6011be4930/837b481b6978c3bcd12ad23db76dbfb6-640x463-1.webp\" alt=\"開発者タブの表示方法\" class=\"wp-image-473\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3.2. 参照設定の追加</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>開発者タブの「Visual Basic」をクリック</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>「ツール」→「参照設定」を選択</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>以下のライブラリにチェックを入れる<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Microsoft HTML Object Library</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Microsoft Internet Controls</strong></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. 基本的なVBAコードの解説</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>以下は、VBAでWebページを取得するための基本的なコードです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"visual-basic\" class=\"language-visual-basic\">Sub WebScrapingSample()\n    Dim IE As New InternetExplorer\n    Dim HTMLDoc As HTMLDocument\n    \n    ' Webサイトを開く\n    IE.Visible = False\n    IE.navigate \"https://www.example.com\"\n    \n    ' ページの読み込み完了を待つ\n    Do While IE.readyState &lt;&gt; READYSTATE_COMPLETE\n        DoEvents\n    Loop\n    \n    ' HTMLドキュメントを取得\n    Set HTMLDoc = IE.document\n    \n    ' 必要な情報を抽出（例としてタイトルを取得）\n    Dim pageTitle As String\n    pageTitle = HTMLDoc.Title\n    MsgBox \"ページのタイトルは：\" &amp; pageTitle\n    \n    ' IEを閉じる\n    IE.Quit\n    Set IE = Nothing\n    Set HTMLDoc = Nothing\nEnd Sub\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. 実践：サンプルサイトからデータを取得</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5.1. 取得したいデータの確認</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>対象サイト</strong>：例として、為替レート情報を提供するサイト</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>取得項目</strong>：通貨名とレート</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5.2. コードの説明</h3>\n<!-- /wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"visual-basic\" class=\"language-visual-basic\">Sub GetExchangeRates()\n    Dim IE As New InternetExplorer\n    Dim HTMLDoc As HTMLDocument\n    Dim exchangeTable As Object\n    Dim row As Object\n    Dim i As Integer\n    \n    ' Webサイトを開く\n    IE.Visible = False\n    IE.navigate \"https://www.exchangeratesample.com\"\n    \n    ' ページの読み込み完了を待つ\n    Do While IE.readyState &lt;&gt; READYSTATE_COMPLETE\n        DoEvents\n    Loop\n    \n    Set HTMLDoc = IE.document\n    \n    ' 為替レートのテーブルを取得\n    Set exchangeTable = HTMLDoc.getElementById(\"exchange-rate-table\")\n    \n    ' テーブルの行をループ\n    i = 1\n    For Each row In exchangeTable.getElementsByTagName(\"tr\")\n        ' セルの値を取得\n        Cells(i, 1).Value = row.Cells(0).innerText ' 通貨名\n        Cells(i, 2).Value = row.Cells(1).innerText ' レート\n        i = i + 1\n    Next row\n    \n    ' IEを閉じる\n    IE.Quit\n    Set IE = Nothing\n    Set HTMLDoc = Nothing\nEnd Sub\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5.3. コードの実行</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ExcelのVBAエディタで上記のコードを貼り付け</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>カーソルをサブプロシージャ内に置き、F5キーで実行</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>データがシートに書き込まれることを確認</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. 注意点とベストプラクティス</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>サイトの利用規約を確認</strong>：Webスクレイピングを行う前に、対象サイトの利用規約でデータ取得が許可されているか確認しましょう。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>アクセス頻度の制御</strong>：過度なアクセスはサーバーに負荷をかけるため、適切な間隔を設けることが重要です。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>エラーハンドリング</strong>：ネットワークエラーや要素が見つからない場合の処理を追加すると、より堅牢なコードになります。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. まとめ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>VBAを使ったWebスクレイピングは、Excelユーザーにとって強力なツールとなります。初心者の方でも、基本的なコードと手順を理解することで、業務の効率化に大きく貢献できます。ぜひこの機会に挑戦してみてください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><strong>キーワード</strong>：VBA、Webスクレイピング、初心者、Excel、自動化、データ取得、プログラミング</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/7a8123dda7b64a99b65d4b32273b5420/download.webp","categories":["faba1e00af","dbbae1b99a"],"tags":["faba1e00af","dbbae1b99a","ba29ed493c"]},{"id":"9b19f9ab81","publishedAt":"2025-03-07T19:50:43.000Z","title":"VBAのIf文入門：基本から実践まで","contents":"<p>プログラミングでは、<strong>条件分岐</strong>によって「もし○○ならば◇◇する」というような条件分岐を実現できます。この記事では、VBA（Visual Basic for Applications）における<strong><code>If</code>文</strong>の基本文法から実務的な活用例まで紹介します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">基本文法の解説</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>VBAにおける<code>If</code>文は、条件式の真偽によって実行する処理を切り替えるための構文です。 (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=IF%E6%96%87%E3%81%AF%E3%80%81%E7%89%B9%E5%AE%9A%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%E7%9C%9F%E3%81%A7%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%20%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E6%96%87%E3%81%A7%E3%81%99%E3%80%82%E4%BB%A5%E4%B8%8B%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E6%9B%B8%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)まずは、<code>If</code>文の基本的な書き方と動作を確認しましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">If～Then の基本形</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>If</code>文の最もシンプルな形は「<strong>If 条件 Then</strong>」です。条件が満たされた場合に続く処理を実行し、満たされなければ何もせずに次の行へ進みます。 (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">If 条件 Then\n    ' 条件が真(True)の場合の処理\nEnd If\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>上記のように書きます。例えば、変数<code>x</code>が0より大きい場合にメッセージを表示する簡単な例は次の通りです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">Dim x As Integer\nx = 5\n\nIf x &gt; 0 Then\n    MsgBox \"xは0より大きいです\"\nEnd If\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>条件式<code>x &gt; 0</code>が<strong>True</strong>（真）であれば、<code>MsgBox</code>によるメッセージ表示が実行されます。条件式が<strong>False</strong>（偽）の場合は、<code>If～End If</code>ブロック内の処理はスキップされ、後続のコードへ進みます (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)。<strong>なお、<code>If</code>を使用するときは必ず対応する<code>End If</code>で閉じる必要があります</strong>（閉じ忘れるとエラーになります） (<a href=\"https://diamond.jp/articles/-/267834#:~:text=If%E6%A7%8B%E6%96%87%E3%81%AF%E3%80%8CEnd%20If%E3%80%8D%E3%81%A7%E9%96%89%E3%81%98%E3%81%AA%E3%81%84%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82%E5%BF%98%E3%82%8C%E3%81%9A%E3%81%AB%E6%9B%B8%E3%81%8D%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%80%82%E5%87%A6%E7%90%86%E5%86%85%E5%AE%B9%E3%81%AF%E8%A1%8C%E9%A0%AD%E3%81%8B%E3%82%891%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E5%88%86%E7%A9%BA%E3%81%91%E3%81%A6%E6%9B%B8%E3%81%8F%E3%81%93%E3%81%A8%E3%81%8C%E5%A4%9A%E3%81%84%E3%81%A7%E3%81%99%E3%80%82%E3%81%93%E3%82%8C%E3%81%AF%E3%83%9E%E3%82%AF%E3%83%AD%E3%82%92%E3%82%8F%E3%81%8B%E3%82%8A%20%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%A7%E3%81%99%EF%BC%88%E7%A9%BA%E3%81%91%E3%81%AA%E3%81%91%E3%82%8C%E3%81%B0%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%82%8B%E3%82%8F%E3%81%91%E3%81%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93%EF%BC%89%E3%80%82\">初心者でもわかるExcelマクロ入門！ Ifを使ったマクロの使い方をマスター | 4時間のエクセル仕事は20秒で終わる | ダイヤモンド・オンライン</a>)。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">If～Then～Else での条件分岐</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>If</code>文に**<code>Else</code>節**を加えると、条件が満たされなかった場合の処理を指定できます。 (<a href=\"https://diamond.jp/articles/-/267834#:~:text=If%E6%A7%8B%E6%96%87%E3%81%A7%E3%81%AF%E6%9D%A1%E4%BB%B6%E3%82%92%E5%88%A4%E5%AE%9A%E3%81%97%E3%80%81%E6%9D%A1%E4%BB%B6%E3%81%8C%E6%88%90%E7%AB%8B%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AFThen%E4%BB%A5%E9%99%8D%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99%E3%80%82%E6%9D%A1%E4%BB%B6%E3%81%8C%E6%88%90%E7%AB%8B%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AFElse%20%E4%BB%A5%E9%99%8D%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\">初心者でもわかるExcelマクロ入門！ Ifを使ったマクロの使い方をマスター | 4時間のエクセル仕事は20秒で終わる | ダイヤモンド・オンライン</a>)これにより、「条件がTrueなら～、Falseなら～」という二者択一の分岐処理が書けます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">If 条件 Then\n    ' 条件がTrueの場合の処理\nElse\n    ' 条件がFalseの場合の処理\nEnd If\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>例えば、変数<code>score</code>の値で合否を判定する場合を考えてみます。<code>score</code>が60以上なら合格メッセージを表示し、それ以外なら不合格メッセージを表示するには次のように書けます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">Dim score As Integer\nscore = 65\n\nIf score &gt;= 60 Then\n    MsgBox \"合格です！\"\nElse\n    MsgBox \"不合格です。\"\nEnd If\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>上記の例では、条件式<code>score &gt;= 60</code>が真であれば「合格です！」と表示し、偽であれば「不合格です。」と表示します。<code>Else</code>節を用いることで、条件を満たさない場合にも明示的に処理を指定できるため、<strong>どちらの場合でも必ず何らかの処理が実行</strong>される構造になります。 (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ElseIf を使った複数条件の分岐</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>さらに、<strong><code>ElseIf</code>句</strong>を使うと条件を追加して複数パターンに応じた処理分岐が可能です (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=If%20%E6%9D%A1%E4%BB%B61%20Then%20%27%20%E6%9D%A1%E4%BB%B61%E3%81%8C%E7%9C%9F%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AE%E5%87%A6%E7%90%86,Else%20%27%20%E3%81%A9%E3%81%A1%E3%82%89%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%82%82%E5%81%BD%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AE%E5%87%A6%E7%90%86%20End%20If\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)。<code>ElseIf</code>は「もし最初の条件がFalseだったら、別の条件を評価し・・・」という形で順に条件をチェックしていきます (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)。構文は次のとおりです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">If 条件1 Then\n    ' 条件1がTrueの場合の処理\nElseIf 条件2 Then\n    ' 条件1がFalseで条件2がTrueの場合の処理\nElse\n    ' 上記いずれの条件もFalseの場合の処理\nEnd If\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>ElseIf</code>は必要なだけ複数回使用でき、上から順に条件を判定します。最初にTrueになった条件のブロックを実行したら、以降の<code>ElseIf</code>や<code>Else</code>はスキップされ、<code>End If</code>の次へ抜けます (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)。もし全ての条件がFalseであれば、最後の<code>Else</code>ブロックの処理が実行されます。 (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>具体例として、テストの点数<code>score</code>に応じて評価を変える場合を考えてみましょう (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=%E4%BE%8B%E3%81%88%E3%81%B0%E3%80%81%E7%82%B9%E6%95%B0%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E5%88%86%E5%B2%90%E3%81%97%E3%81%9F%E3%81%84%E6%99%82%E3%81%AF%E3%80%81%E4%BB%A5%E4%B8%8B%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)。点数が90以上なら「優」、75以上なら「良」、60以上なら「可」、それ未満は「不合格」と表示するコードは以下のように書けます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">Dim score As Integer\nscore = 75\n\nIf score &gt;= 90 Then\n    MsgBox \"優\"\nElseIf score &gt;= 75 Then\n    MsgBox \"良\"\nElseIf score &gt;= 60 Then\n    MsgBox \"可\"\nElse\n    MsgBox \"不合格\"\nEnd If\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このように複数の条件を連ねることで、段階的な条件分岐を表現できます。実行時には上から順に条件を評価し、当てはまった箇所の処理だけが実行されます（この例では<code>score=75</code>なので「良」が表示されます） (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=If%20score%20,End%20If\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">条件分岐の処理フロー（例）</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>ElseIf</code>を含む条件分岐の流れを、簡単な例で表に整理してみましょう。以下は「条件1」「条件2」という2つの条件を持つ<code>If～ElseIf～Else</code>構造において、各条件の真偽によってどのブロックが実行されるかを示したものです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table class=\"has-fixed-layout\"><thead><tr><th>条件1の判定</th><th>条件2の判定</th><th>実行される処理ブロック</th></tr></thead><tbody><tr><td>True（成立）</td><td>（※条件2は検査せず）</td><td>Thenブロックの処理を実行</td></tr><tr><td>False（不成立）</td><td>True（成立）</td><td>ElseIfブロックの処理を実行</td></tr><tr><td>False（不成立）</td><td>False（不成立）</td><td>Elseブロックの処理を実行</td></tr></tbody></table></figure>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>上の表のとおり、まず条件1を評価し、成立した場合はその時点で処理が確定します。条件1が不成立の場合に限り条件2の評価に進み、条件2が成立すればその処理を実行、不成立なら最後の<code>Else</code>処理を実行します。これが基本的な<code>If～ElseIf～Else</code>による分岐処理の流れです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">実務的なサンプルコード</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>それでは、実際の業務で役立つ<code>If</code>文の使用例を見てみましょう。ここでは、シンプルな例と、実務シナリオを想定した例の2つを紹介します。コードはVBAエディタにコピーして実行できます。それぞれのコードについて、後でステップごとに解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">シンプルな<code>If</code>文の例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>まずは基本的な<code>If</code>/<code>Else</code>の例です。変数に格納された数値に応じてメッセージを表示するマクロを作ってみます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">Sub CheckScore()\n    Dim score As Integer\n    score = 45   ' テストの点数\n\n    If score &gt;= 60 Then\n        MsgBox \"合格です！\"    ' 条件を満たす場合\n    Else\n        MsgBox \"不合格です。\"  ' 条件を満たさない場合\n    End If\nEnd Sub\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>このマクロ<code>CheckScore</code>では、変数<code>score</code>の値が60以上かどうかを<code>If</code>文で判定し、結果に応じて**「合格です！」<strong>または</strong>「不合格です。」**というメッセージボックスを表示します。<code>score</code>が例えば45の場合は条件がFalseなので<code>Else</code>側が実行され、「不合格です。」と表示されます。値を変えて試すことで、<code>If</code>文の基本的な動作を確認できます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">データのバリデーションを行う活用例</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次に、ユーザー入力の妥当性をチェックして処理を分岐する実践的な例を紹介します。ユーザーに数値入力を求め、<strong>入力が空か</strong>・<strong>数値でないか</strong>・<strong>範囲外か</strong>によってそれぞれエラーメッセージを出し、問題なければ処理を続行するマクロです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"basic\" class=\"language-basic\">Sub ValidateInput()\n    Dim userInput As String\n    userInput = InputBox(\"0～100の数値を入力してください:\")\n\n    ' ①空入力のチェック\n    If userInput = \"\" Then\n        MsgBox \"入力が必要です。\"\n        Exit Sub   ' 処理を中断\n    End If\n\n    ' ②数値かどうかチェック\n    If Not IsNumeric(userInput) Then\n        MsgBox \"数値を入力してください。\"\n        Exit Sub   ' 処理を中断\n    End If\n\n    ' ③数値の範囲チェック\n    If CInt(userInput) &lt; 0 Or CInt(userInput) &gt; 100 Then\n        MsgBox \"入力値は0から100の範囲である必要があります。\"\n        Exit Sub   ' 処理を中断\n    End If\n\n    ' ここまで全てのチェックを通過した場合のみ実行\n    MsgBox \"入力された数値は \" &amp; userInput &amp; \" です。\"\nEnd Sub\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>この<code>ValidateInput</code>マクロでは、<code>InputBox</code>でユーザーに入力を求めています。続く複数の<code>If</code>文で入力値を順番に検証し、各チェックで問題があればメッセージを表示して<code>Exit Sub</code>でマクロの処理自体を終了しています。例えば何も入力せずOKした場合は①の条件がTrueとなり「入力が必要です。」と表示して終了します。一方、適切な数値（例:50）が入力された場合は全ての<code>If</code>条件がFalseとなり、最後に<strong>入力値を確認するメッセージ</strong>が表示されます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>このように<strong>複数の独立した条件チェック</strong>を行う場合、<code>ElseIf</code>を使った一つの大きな条件分岐にするよりも、上記のように個別の<code>If</code>で早めに不正入力時の処理を抜けてしまう方が見通しが良くなります。 (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=ElseIf%E3%81%A7%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E6%9B%B8%E3%81%8F%E3%81%93%E3%81%A8%E3%81%AF%E3%80%81%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%82%92%E8%90%BD%E3%81%A8%E3%81%99%E3%81%93%E3%81%A8%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%8B%E3%82%89%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%81%AD\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)（各チェックごとに処理が中断されるため、後続の無駄な評価も行わずに済みます。）実務では入力チェックやエラー検証の場面で頻出するパターンなので、ぜひ覚えておきましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ステップごとの解説</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>それでは、上記サンプルコードがどのように動作するのか、処理の流れをステップごとに追ってみます。また、コードを実行するためのVBAエディタ上での操作手順も簡単に説明します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">VBAエディタでコードを実行する手順</h3>\n<!-- /wp:heading -->\n\n<!-- wp:image {\"id\":488,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/88ba7258cbd648df9c59316903dfd159/57493956-8c11-4aef-bab3-3ce3876979d8.webp\" alt=\"VBA画面の開き方\" class=\"wp-image-488\"></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>(<a href=\"https://studyexcel.jp/vba-3/\">〖Excel〗VBA画面の開き方</a>)まず、Excelの「開発」タブにある<strong>Visual Basic</strong>ボタンをクリックしてVBAエディタ（VBE）を開きます。開発タブが表示されていない場合は、Excelのオプションから開発タブを有効にする必要があります。（<strong>ショートカット:</strong> <code>Alt + F11</code>キーでもVBEを起動できます。）VBEが開いたら、メニューから<strong>挿入 &gt; 標準モジュール</strong>を選んで新しいモジュールを挿入し、そのコードウィンドウに先ほどのサンプルコードをコピーしましょう。コードを入力できたら、エディタ上部の▶（実行）ボタンを押すか、<code>F5</code>キーを押してマクロを実行できます。すると、書いたコードが上から順に処理され、結果がExcel上に表示されます。 (<a href=\"https://studyexcel.jp/vba-3/#:~:text=VBA%E7%94%BB%E9%9D%A2%E3%81%8C%E3%81%B2%E3%82%89%E3%81%84%E3%81%9F%E3%82%89%E3%80%81%E3%80%8CF7%E3%80%8D%E3%82%92%E6%8A%BC%E3%81%99%E3%81%A8%E3%80%81%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%9F%E3%82%81%E3%81%AE%E7%AA%93%E3%81%8C%E3%81%B2%E3%82%89%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82%20%E3%81%93%E3%81%AE%E7%AA%93%E3%82%92%E3%80%81%E4%BB%A5%E4%B8%8B%E3%81%AE%E8%AA%AC%E6%98%8E%E3%81%A7%E3%81%AF%E3%80%8C%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%80%8D%E3%81%A8%E3%82%88%E3%81%B3%E3%81%BE%E3%81%99%E3%80%82%20%E4%B8%80%E7%95%AA%E4%B8%8A%E3%81%AE%E9%83%A8%E5%88%86%E3%82%84%E3%80%8C%E2%96%A1%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B%E3%81%A8%E3%80%81%E6%9C%80%E5%A4%A7%E5%8C%96%E3%81%97%E3%81%A6%E6%9E%A0%E3%81%AE%E4%B8%AD%E3%81%84%E3%81%A3%E3%81%B1%E3%81%84%E3%81%AB%E5%BA%83%E3%81%8C%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%B2%E3%82%8D%E3%81%92%E3%81%A6%E3%81%8A%E3%81%84%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%80%82\">〖Excel〗VBA画面の開き方</a>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">コードの処理フローを追う</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>次に、例として「データのバリデーションを行う活用例」で示した<code>ValidateInput</code>マクロの処理手順を追ってみます。ユーザーの入力に対して、コードがどのように分岐・動作するかを順番に解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>入力の取得:</strong> <code>InputBox</code>が表示され、ユーザーがテキストボックスに値を入力します。OKボタンが押されると、その値が文字列として<code>userInput</code>変数に格納されます（キャンセルされた場合は空文字列が返ります）。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>空入力のチェック:</strong> 最初の<code>If userInput = \"\" Then</code>で入力が空かを確認します。空文字列だった場合は条件がTrueとなり、メッセージを表示した後<code>Exit Sub</code>でマクロを終了します。入力が空でなければ条件はFalseとなり、<code>End If</code>の次（次のチェック）へ進みます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>数値形式のチェック:</strong> 次の<code>If Not IsNumeric(userInput) Then</code>で入力が数値として解釈できるかを確認します。数字以外の文字が含まれている場合など<code>IsNumeric</code>がFalseなら条件がTrueとなり、「数値を入力してください。」というメッセージを表示して終了します。ここでも、条件がFalse（すなわち入力が数値）なら処理は続行されます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>数値の範囲チェック:</strong> 3番目の<code>If</code>では<code>CInt</code>関数で文字列を数値に変換したうえで、その値が0～100の範囲内かを確認します。範囲外であれば条件がTrueとなり、エラーメッセージを出して終了します。範囲内であればFalseとなり、最後の<code>End If</code>を抜けます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>最終処理:</strong> ここまで全てのチェックを通過できた場合（どの<code>If</code>条件もTrueにならなかった場合）に、最後の行の<code>MsgBox</code>が実行されます。これにより「入力された数値は ○○ です。」というメッセージが表示され、マクロの処理が完了します。</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>以上のように、<code>If</code>文による各条件チェックで問題がなければ次へ、問題があれば途中で処理終了、といった流れになっています。<code>ElseIf</code>を使った場合でも基本的な流れは同様で、上から順に条件を判定し、該当するブロックの処理を実行したら分岐構造を抜けます (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ベストプラクティス：<code>If</code>文の書き方のコツ</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>最後に、VBAで<code>If</code>文を使う際のベストプラクティスや注意点をまとめます。コードの可読性や保守性を高めるために、以下のポイントに気を付けましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>インデントをつけて読みやすく:</strong> <code>If～End If</code>ブロックの中身は字下げ（インデント）して記述するのが一般的です。インデント自体は文法上必須ではありませんが、ネストした構造も視覚的に分かりやすくなり、コードを見やすくする効果があります (<a href=\"https://diamond.jp/articles/-/267834#:~:text=If%E6%A7%8B%E6%96%87%E3%81%AF%E3%80%8CEnd%20If%E3%80%8D%E3%81%A7%E9%96%89%E3%81%98%E3%81%AA%E3%81%84%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82%E5%BF%98%E3%82%8C%E3%81%9A%E3%81%AB%E6%9B%B8%E3%81%8D%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%80%82%E5%87%A6%E7%90%86%E5%86%85%E5%AE%B9%E3%81%AF%E8%A1%8C%E9%A0%AD%E3%81%8B%E3%82%891%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E5%88%86%E7%A9%BA%E3%81%91%E3%81%A6%E6%9B%B8%E3%81%8F%E3%81%93%E3%81%A8%E3%81%8C%E5%A4%9A%E3%81%84%E3%81%A7%E3%81%99%E3%80%82%E3%81%93%E3%82%8C%E3%81%AF%E3%83%9E%E3%82%AF%E3%83%AD%E3%82%92%E3%82%8F%E3%81%8B%E3%82%8A%20%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%A7%E3%81%99%EF%BC%88%E7%A9%BA%E3%81%91%E3%81%AA%E3%81%91%E3%82%8C%E3%81%B0%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%82%8B%E3%82%8F%E3%81%91%E3%81%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93%EF%BC%89%E3%80%82\">初心者でもわかるExcelマクロ入門！ Ifを使ったマクロの使い方をマスター | 4時間のエクセル仕事は20秒で終わる | ダイヤモンド・オンライン</a>)。特に複数の条件分岐が入れ子になる場合は、インデントで対応関係をはっきりさせましょう。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ネストは必要最小限に:</strong> <code>If</code>文は何段にもネスト（入れ子）にできますが、深くネストしすぎるとコードの追跡が困難になります (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=%E3%81%AA%E3%82%8B%E3%81%B9%E3%81%8F%E3%83%8D%E3%82%B9%E3%83%88%E3%81%AB%E3%81%97%E3%81%AA%E3%81%84%E6%96%B9%E3%81%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%81%AF%E3%82%88%E3%81%8F%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)。例えば、<code>ElseIf</code>を使わずに<code>If</code>の中にさらに<code>If</code>を書くこともできますが、必要以上に入れ子構造にしない方が後々の可読性は向上します (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=%E3%81%AA%E3%82%8B%E3%81%B9%E3%81%8F%E3%83%8D%E3%82%B9%E3%83%88%E3%81%AB%E3%81%97%E3%81%AA%E3%81%84%E6%96%B9%E3%81%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%81%AF%E3%82%88%E3%81%8F%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)。どうしてもネストが深くなる場合は、ロジックを分割したり<code>Exit Sub</code>で早期リターンするなどして、ネストの深さを抑える工夫をしましょう。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>ElseIf</code>の乱用に注意:</strong> <code>ElseIf</code>は便利ですが、あまりに数が多くなると横に長い複雑な条件判定になりがちです (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=ElseIf%E3%81%A7%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E6%9B%B8%E3%81%8F%E3%81%93%E3%81%A8%E3%81%AF%E3%80%81%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%82%92%E8%90%BD%E3%81%A8%E3%81%99%E3%81%93%E3%81%A8%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%8B%E3%82%89%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%81%AD\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)。先述のように、入力チェックなど**「ある条件では処理を中止」**する場合には、<code>ElseIf</code>にせず個別の<code>If</code>で対処した方が理解しやすいケースもあります。状況に応じて適切に使い分けましょう。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>Select Case</code>の活用:</strong> 判定する条件が「特定の値に等しいかどうか」を多数比較するような場合（例えば点数による評価やメニューの選択肢分岐など）は、<code>If</code>の多段ネストよりも**<code>Select Case</code>構文**を使った方がすっきり書けます (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=If,%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AF%E3%80%81%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A7%E3%83%8D%E3%82%B9%E3%83%88%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)。<code>Select Case</code>は一つの式の値に応じて分岐する構文で、可読性が高く複数条件の分岐に適しています。状況に応じて<code>If</code>と使い分けると良いでしょう。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>一行で書ける<code>If</code>文:</strong> VBAでは、実行文が1行だけの場合に限り<code>Then</code>の後に処理を続けて1行で書くこともできます。しかし、可読性やデバッグの面から初心者のうちはブロック構造で書くことをお勧めします (<a href=\"https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/ifthenelse-statement#:~:text=Remarks\">If...Then...Else statement (VBA) | Microsoft Learn</a>)。まずは基本形の<code>If～End If</code>で確実に動作を理解してから、一行形式の書き方に挑戦すると良いでしょう。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>参考資料:</strong> VBA <code>If...Then...Else</code>文の公式ドキュメント (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=If,%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AF%E3%80%81%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A7%E3%83%8D%E3%82%B9%E3%83%88%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>) (<a href=\"https://learn.microsoft.com/ja-jp/office/vba/language/concepts/getting-started/using-ifthenelse-statements#:~:text=ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%20If,ElseIf%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%20False%20%E3%81%AE%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81Else%20%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E7%B6%9A%E3%81%8F%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">If...Then...Else ステートメントを使用する (VBA) | Microsoft Learn</a>)，初心者向けの解説記事 (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=IF%E6%96%87%E3%81%AF%E3%80%81%E7%89%B9%E5%AE%9A%E3%81%AE%E6%9D%A1%E4%BB%B6%E3%81%8C%E7%9C%9F%E3%81%A7%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%20%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E6%96%87%E3%81%A7%E3%81%99%E3%80%82%E4%BB%A5%E4%B8%8B%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E6%9B%B8%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>) (<a href=\"https://diamond.jp/articles/-/267834#:~:text=If%E6%A7%8B%E6%96%87%E3%81%A7%E3%81%AF%E6%9D%A1%E4%BB%B6%E3%82%92%E5%88%A4%E5%AE%9A%E3%81%97%E3%80%81%E6%9D%A1%E4%BB%B6%E3%81%8C%E6%88%90%E7%AB%8B%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AFThen%E4%BB%A5%E9%99%8D%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99%E3%80%82%E6%9D%A1%E4%BB%B6%E3%81%8C%E6%88%90%E7%AB%8B%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AFElse%20%E4%BB%A5%E9%99%8D%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\">初心者でもわかるExcelマクロ入門！ Ifを使ったマクロの使い方をマスター | 4時間のエクセル仕事は20秒で終わる | ダイヤモンド・オンライン</a>) (<a href=\"https://entsumugu.com/vba-if-iif/#:~:text=ElseIf%E3%81%A7%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E6%9B%B8%E3%81%8F%E3%81%93%E3%81%A8%E3%81%AF%E3%80%81%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%82%92%E8%90%BD%E3%81%A8%E3%81%99%E3%81%93%E3%81%A8%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%8B%E3%82%89%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%E3%81%AD\">VBAのIF文とIIF文：初心者向けガイド | 縁紡ぐ</a>)など。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/7a34d97898e6427486770179322ccf94/Screenshot-2025-03-08-at-1.49.56%E2%80%AFpm.webp","categories":["faba1e00af","dbbae1b99a"]},{"id":"560aa3e6e9","publishedAt":"2025-05-10T01:48:24.000Z","title":"【中・上級者向け】外資系企業にITエンジニアが転職内定するための履歴書と職務経歴書の書き方","contents":"<p id=\"145f5796-1f9f-4cef-8e47-820d0a0a4a53\">こんにちは、プログラミングスクール\"SiiD\" 編集部です。<br>「GoogleやAdobeなどの外資系IT企業に挑戦したいけど、どんな書類を用意すればいいの？」と思っている方も多いのではないでしょうか。<br>実は、海外企業向けの書類作成には独特のポイントがあります。ここでは、私が実際に取り組んだノウハウを元に、書類を効果的にアピールするためのコツを共有します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"605a00f3-7dd8-4c35-aeb3-3239f46f87b6\">日本のIT企業と比べ、外資系IT企業（Google, Adobeなど）は採用プロセスや応募書類の見方が若干異なります。<br>私は実際何社かの選考を経て、過去にAdobe JapanさんのITコンサル職に内定した過去がありますが、その際には英字での書類提出を求められました。<br>履歴書・職務経歴書が必ずしも「日本版のフォーマット」である必要はなく、むしろ海外のフォーマットに近いスタイルが好まれる傾向があります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\" id=\"44f2def9-da4b-46fd-b57e-a4439c8aea39\">Level 1: 基礎編</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">カバーレター</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>外資の場合、カバーレターという概念があります。<br>カバーレターは、書類と一緒に提出するもので、応募者が自分の経験やスキルをアピールするための文書です。特に外資系企業では、カバーレターが重視されることがしばしばあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>実際にGoogleの応募フォームを見てみると、「Cover Letterは任意」という場合もあります。<br>簡潔に志望動機や自己PRをまとめた一文程度で十分なので、ぜひ用意しましょう。<br>カバーレターは書類で用意するのではなく、応募フォームの欄に直接入力するか、別途Wordなどで用意します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>職務経歴書の重要性</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>履歴書が不要な場合があります。<br>外資系IT企業では、<strong>履歴書(日本的なフォーマット)</strong>&nbsp;ではなく、英語の<strong>Resume</strong>や<strong>職務経歴書</strong>を重視することが多いです。書式も自由度が高いので、まずは企業の応募要項をチェックしましょう。<br>その際は下記の3点を重視してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul id=\"daa568f4-a41a-4527-b04d-3ad753c9650b\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>最新の職歴から順に</strong>書く</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>誤字脱字を無くす</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>自慢できる実績のみ</strong>を記載（情報過多は逆効果）</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\" id=\"c8c3e0b9-015d-4f82-b5e9-f4f1fc791f0f\">Level 2: 中級編</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\" id=\"ca9068f4-5c0a-40d8-897a-2ba7f6bd7d40\">X-Y-Zフォーミュラを使う</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p id=\"a31c4ab2-101b-4e1a-b88b-72550296e520\">具体的な成果をアピールするには、<strong>何をしたのか(X)、どんな手段を使ったのか(Y)、どんな成果があったのか(Z)</strong>&nbsp;をセットで書くと効果的です。<br>例えば：「10名のチームを率いて3ヶ月でプロジェクトを完成（X）。アジャイル手法を導入し、フィードバックループを短縮（Y）。結果、納期を2週間短縮、顧客満足度が20%向上（Z）。」</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\" id=\"15a73e93-63ec-4354-8a5c-fbda7242b1e0\">かっこいい英語の動詞を使う</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p id=\"f5537ac5-9b48-465f-ba86-7e9c2e5b15b5\">英語で書くときは、「did」「made」など平凡な動詞よりも、「developed」「engineered」「implemented」など、<strong>アクションが伝わる動詞</strong>を使うと印象アップ。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\" id=\"653d7e8f-a2d4-43ab-aed6-d6cba5d7ddc5\">GitHubの記載は必須</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p id=\"e4081d74-810a-4370-b2dd-818a27ecc3bb\">エンジニアであれば、<strong>GitHubのリンク</strong>を載せるのが基本。特にアプリケーションやコードを公開している場合、企業の担当者がそこを見てスキルを評価してくれることが多いです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\" id=\"cc2134f9-0f11-4559-bb8f-fc50231ab9e1\">使用経験のある技術を強調</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p id=\"e22ea7ea-385b-4333-af8d-165bdc646e4f\">言語やフレームワーク、ライブラリなど、<strong>実際に使用したことがある技術は太字</strong>にして目立たせましょう。外資系企業は技術スタックを重視するため、視認性が高いほどアピールしやすいです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\" id=\"bafd3ba0-cd74-451c-985b-272f06473ab8\">Level 3: 上級編</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\" id=\"29d94c65-8699-4acf-9d46-3f613c1034f4\">1枚にまとめる</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p id=\"f995bf34-3ecf-4a17-af33-85c0cacb1a42\"><strong>1枚にすべてを要約</strong>するのが理想。アメリカの採用担当者は大量のResumeを読むので、パッと見で内容が理解できる方が有利。情報は厳選し、余白や見出しを活用して見やすくしましょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\" id=\"40af0866-0ec3-4831-89ea-54aa2669b9d0\">添削してもらう</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p id=\"5b715a67-fe37-4211-b233-af647246afbf\">英語の職務経歴書なら、<strong>ネイティブチェック</strong>や英語が得意な友人の添削を受けましょう。<br>私も何度もプロに見てもらって、こなれた英語表現や不要な文の整理を行いました。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\" id=\"ff40a3ea-d285-4681-9ad9-6247397089d2\">さいごに</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p id=\"0b0bc390-7f62-477c-a1eb-d83e1a4f4597\">外資系IT企業に挑戦する上で、履歴書と職務経歴書は合否を左右する重要なツールです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol id=\"85fe68b7-29b2-429b-97aa-7df924034dfd\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>カバーレターは簡潔でOK</strong></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>X-Y-Zフォーミュラ</strong>などで成果を具体的に表現</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>GitHubリンク</strong>と<strong>かっこいい英語動詞</strong>の活用</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>1枚にまとめ、プロに添削</strong>してもらう</li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p id=\"60a113ce-a400-40fc-8c3f-86dfb38e8d97\">こうしたポイントを押さえれば、あなたの経歴を魅力的に伝えられ、面接に呼ばれる確率もグッと上がるはずです。<br>ぜひトライしてみてください！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/5cb992acd0904aebaf321b3bbcadbced/AdobeStock_304370363_Editorial_Use_Only-scaled.jpeg","categories":["89b7505ad7","423af599b3"],"tags":["05b0c6b2c3","ef2a0f4cb9","0233b1055c"]},{"id":"a435270b90","publishedAt":"2025-05-21T04:51:06.000Z","title":"Webデザイナーにコーディング力は必要？その理由と重要スキルを解説","contents":"<p>こんにちは、プログラミングスクール”SiiD” 編集部です。<br>Web業界で活躍を目指す初心者にとって、デザインスキルの他に「コーディング力」も必要かどうか疑問に思ったことはありませんか？この質問は多くのWebデザイナー予備軍が抱える共通の悩みです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>結論から言うと、Webデザイナーにとって <strong>コーディングの基礎知識はマスト</strong>。ただし、プロのエンジニアレベルのスキルが求められるわけではありません。この記事では、「なぜWebデザイナーにコーディング力が必要なのか」「必要なスキルの具体的なレベル」と「学んでおくべきスキル」について詳しく解説します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Webデザイナーに求められる役割とコーディングが重要な理由</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>そもそも、Webデザイナーが担うべき役割は何でしょうか？Webデザイナーの任務は、見た目が美しいだけでなく、ユーザーにとって <strong>「使いやすい」「直感的」</strong> なデザインを作ることです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>では、なぜコーディング力がここで必要となるのでしょう？</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 実現可能なデザインを設計する理解力が身につく</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Webサイトやアプリは、コードによって動作します。そのため、 <strong>プラットフォームの仕組み</strong>（HTMLやCSS、JavaScriptがどのように機能するか）が分からないと、構築不可能なデザインを作ってしまうリスクがあります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>例えば、新人デザイナーがファイル形式や画像最適化の知識がなく、重いJPEG画像を大量に使用したデザインを提出してしまった場合、結果的にページの読み込み速度が遅くなり、ユーザー体験を損ないます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. デザイナーとエンジニアのコミュニケーションが円滑になる</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>会社やプロジェクトチームでは、Web開発は <strong>デザイナーとエンジニアのチーム作業</strong> によって進行します。このとき、コーディング知識があるかないかでコミュニケーションの質は大きく変わります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>例えば、SVG（ベクターファイル形式）の活用方法を知るデザイナーは、軽量で高品質な画像を提供できるため、エンジニアが効率良くコードに組み込むことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. 最低限の修正は自分で行える</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>小規模プロジェクトの場合、コーディングに対応するエンジニアがいないことも少なくありません。このようなシーンでは、デザイナーが自分で簡単な修正を行えると <strong>作業効率</strong> が大幅にアップ。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>例えば、CSSやHTMLをほんの少し書けるだけでも、文字サイズやレイアウトの調整を瞬時に行えるため、納品までのスピードが段違いに向上します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">必要なコーディング力の具体的なレベル</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>「最低限どこまでのコーディングスキルが必要？」という疑問を多くの人が抱くはずです。以下のスキルセットを持っておくと、実用的かつ即戦力になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. HTMLとCSSの基礎スキル</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>マストスキル</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ページ構造を設計できる（見出し、段落、リンクなど）</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>文字や画像の配置を制御する</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>レスポンシブデザインの基本を理解する</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. JavaScriptの知識（基礎レベル）</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>あると便利なスキル</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>簡単なアニメーションやインタラクティブな要素を作成</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>フォームのバリデーション（入力値の確認）</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. バージョン管理システム（Git/GitHub）</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>チームでの作業に必須</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>基本的なコマンドでファイルを管理・共有できる</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. ワイヤーフレーム・プロトタイプの知識</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>コードに限らず、ツール（Figma、Adobe XDなど）を用いたプロトタイピングができると、エンジニアとの連携がよりスムーズになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">スキルを高めるためのおすすめ学習法</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>初心者でスキルに自信がない方も、「ウェブデザイン」と「プログラミング」の正しい学習方法を知っておくことで、効率良くステップアップできます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. オンライン学習プラットフォームを活用</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>UdemyやProgate、ドットインストールは、初心者向けの講座が充実しています。特に <strong>体験型ハンズオン</strong> が多い講座がおすすめです。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. モックサイトを作成して実践</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>学んだスキルを実際に活用し、サンプルプロジェクトを作成してみましょう。小規模なポートフォリオや架空の企業サイトを制作するなど、実践を通してスキルを磨きます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. コーダーやデザイナーとの交流</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>勉強会やコミュニティ（TwitterやSlack、登壇イベント）で <strong>実務経験者のアドバイス</strong> をもらうと、独学では得られないポイントを掴むことができます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">デザイナーに求められるその他の知識</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>コーディング力だけがデザイナーに求められるスキルではありません。マーケティングや分析能力が加わることで、さらに強力な「稼げるデザイナー」に進化します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. マーケティングとデータ分析</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>ユーザーのクリック率や行動履歴を分析し、改善を設計する</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>広告効果測定を基にしたデザイン修正</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. UX/UIデザインと人間工学</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>ボタン配置や色使い</strong> によってコンバージョン率（例：購入、登録）が変わる</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>利用者視点を重視したデザイン案を作成できる</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. タイポグラフィとビジュアルデザイン力</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>美しい仕上がりは、何よりも <strong>最終的な価値を高める</strong> 上で不可欠です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">コーディング知識がデザインに生かされる未来</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>どんなに優れたデザインであっても、それが技術的に実装不可能であれば意味がありません。コーディング基本知識を持つことで、プロジェクト全体を推進する <strong>信頼されるデザイナー</strong> へと成長します。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>現在のWeb・アプリ開発では、デザインと技術の境界がどんどん薄れてきています。初心者の方も、今から基本を学び始めることで、未来のデザイン業界で活躍できるスキルセットが手に入るでしょう。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>一歩ずつ進めば大丈夫です！あなたの成長を応援しています。</p>\n<!-- /wp:paragraph -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/f1e30c40f0424dd48f752bc74e63736c/Jasper_2025-05-21T133A493A31.889Z.png","categories":["89b7505ad7"],"tags":["5eb515fac8","3c6d29fed2","f553de0ea0"]},{"id":"068814875f","publishedAt":"2025-06-17T21:17:59.000Z","title":"ソフトウェア開発におけるMVPとは？ポートフォリオ作成におけるMVPの役割","contents":"<p>こんにちは！プログラミングスクール”SiiD” 編集部です。<br>ソフトウェア開発やプログラミングを学んでいる方で「MVP」という言葉を耳にしたことがある人も多いのではないでしょうか？この記事では、MVPの基本的な概念と、それをプログラミング学習にどう活用すれば良いのか詳しく解説します。ポートフォリオを作りたいけど、どこから手をつけたら良いか迷っている方も必読です！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ソフトウェア開発におけるMVPとは何か</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">MVPの概要</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>MVP（Minimum Viable Product）は、「最小限の機能を持つ実現可能な製品」という意味を持ち、ユーザーのフィードバックを基に改善を繰り返すためのプロダクト開発手法です。簡単に言えば、「まずは動くもの」を作り、そこから試行錯誤を重ねながらプロジェクトを成長させます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>例えば、新しいモバイルアプリを開発する際に、全部の機能を搭載するのではなく、まず基本的な使い方に必要な機能だけを実装してリリースします。その結果、ユーザーがどの機能に価値を感じるのかを知ることができ、効果的な改良が可能になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">MVPのメリット</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>開発コストの削減</strong>：必要最小限の時間とリソースで始められるため、大きなリスクを取らずにプロジェクトを進められます。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>ユーザーフィードバックを得られる</strong>：完成度の高いプロダクトを一気に作り上げるよりも、柔軟な方向転換が可能になります。</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>素早い市場投入</strong>：競争が激しい環境では、スピード感を持ってサービスを展開できることが大きな利点です。</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">プログラミング学習にMVPを取り入れよう</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">プログラミング学習ではアウトプットが重要</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>学習としてインプットを積み重ねることは大切ですが、それ以上に実践すること、すなわちアウトプットが重要です。特に転職活動を視野に入れる場合、ポートフォリオとして完成度の高いプロダクトを提示することは、面接でのアピールポイントになります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">まずは基礎力を固めてから取り組もう</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>MVPを活用して何かを作り始めるタイミングは、プログラミング学習の中盤からがオススメです。HTML、CSS、JavaScriptといった基礎的なスキルを一通り身につけてからスタートすると、実践を通して基礎を深めることができます。焦らず、基礎をきちんと固めてから取り組むことが成功への近道です。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">プログラミング学習にMVPを取り入れることのメリット</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. 小さな成功体験でモチベーション維持</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>小さな成功体験を積み重ねることは学習の大きなモチベーションとなります。「動くものを作る」という具体的な目標を持つだけで、日々の学びが楽しくなります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>例えば</strong>：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>シンプルなToDoアプリを作り動作させる</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>APIを利用して天気予報アプリを構築する</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>ここで大切なのは、全ての機能やデザインにこだわらず、まずは「これがないとアプリとして成り立たない」というコア機能だけを実装することです。たとえば、本当はWhat to doアプリを作るつもりだったのに、日付管理や色分け、リマインダー機能など、あれもこれもと機能を追加したくなったり、きれいなデザインやソースコードのリファクタリングに時間をかけ過ぎていませんか？</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>そのようなときは、「絶対に必要な機能だけを優先し、それ以外は一旦後回し」にしましょう。まずはミニマムでいいので、実際に動くものを仕上げることを目指してください。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>このように最低限のMVPを作りきる経験が自信につながり、継続的な学習意欲を引き出します。後から追加や改良をすることはいくらでもできます。まずは「完成まで持っていけた」という小さな成功体験を積むことが、次への大きなモチベーションとなります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. 締め切り効果で効率アップ</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ゴールが定まると自然に「締め切り効果」が働きます。特にポートフォリオ制作では、完成までの期間をしっかり決めることが大切です。目安としては、遅くても1ヶ月以内、できれば2〜3週間以内の完成を目指しましょう。期間が長引くと、どうしてもモチベーションが下がりやすくなりますし、作業ペースもだれてしまいます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ポイントは「とにかく最小限でいいのでまず動くものを作りきる」という経験を積むことです。最初から完璧を目指すのではなく、期限内に最低限の機能を持ったMVP（Minimum Viable Product）を作り上げることが重要です。その過程で、「期限内に成果物を仕上げる」力も自然と身につき、実際の開発現場でも役立つスキルが養えます。経験を早く積むことで、次への自信にもつながります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. 実際の開発プロセスを学べる</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ソフトウェア開発の現場では、一度完成したプロダクトもフィードバックを基に修正や機能追加を行います。「完成」イコール「終了」ではありません。MVPを学習に取り入れることで、実際の開発現場と同じ経験が得られます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>例えば、「ユーザーが欲しい機能」を意識しながら開発する力をつけることができます。このプロセスを繰り返すことで、ユーザー目線でのプロダクトデザインが身につきます。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ポートフォリオ作成を加速させよう</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>プログラミング学習では、あなたの実力を示せるポートフォリオが最大の武器。MVPを活用することで、実践力を高めながら効率よく作品づくりが可能になります。</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>もしどこから始めれば良いか迷っている方は、プログラミングスクールSiiDへお気軽にご相談ください。私たちはあなたのキャリア構築を全力でサポートします！一緒に第一歩を踏み出しましょう！</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"></h2>\n<!-- /wp:heading -->","author":"SiiD編集部","eyecatch":"https://images.microcms-assets.io/assets/674fbf2fe21c4dc1999adeb8abf750c1/7200a69ce772411f91a852794a34274d/fe63a75f-bdcf-4ee7-8b6e-2ffd830e7a6f.png","categories":["ab2620f9b7","89b7505ad7","423af599b3"]}]